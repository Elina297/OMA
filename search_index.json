[["index.html", "Orchestrating Microbiome Analysis Preface", " Orchestrating Microbiome Analysis Authors: Leo Lahti [aut], Sudarshan Shetty [aut], Felix GM Ernst [aut, cre] Version: 0.98.8 Modified: 2021-03-25 Compiled: 2021-04-09 Environment: R Under development (unstable) (2021-04-05 r80145), Bioconductor 3.13 License: CC BY-NC-SA 3.0 US Copyright: Source: https://github.com/microbiome/OMA Preface This website is a book on microbiome analysis in the Bioconductor universe and is showing common principles and workflows of performing microbiome analysis. The book was borne out of necessity, while updating tools for microbiome analysis to work with common classes of the Bioconductor project handling count data of various sorts. It is heavily influenced by similar resources, such as the Orchestrating Single-Cell Analysis with Bioconductor book, phyloseq tutorials and microbiome tutorials. We focus on microbiome analysis tools, new, updated and established methods. In the Introduction section, we show how to work with the key data infrastructure TreeSummarizedExperiment and related classes, how this framework relates to other infrastructure and how to load microbiome analysis data to work with in the context of this framework. The second section, Focus Topics, is all about the steps for analyzing microbiome data, beginning with the most common steps and progressing to more specialized methods in subsequent sections. The third section, Appendix, contains the rest of things we didn’t find another place for, yet. "],["data-introduction.html", "Chapter 1 Data Infrastructure 1.1 Installation 1.2 Background 1.3 Loading experimental microbiome data 1.4 Metadata 1.5 Microbiome and tree data specific aspects 1.6 Data conversion 1.7 Conclusion Session Info", " Chapter 1 Data Infrastructure .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } The SummarizedExperiment (SE) is a widely used class for analyzing data obtained by common sequencing techniques. SE is common structure for several Bioconductor packages that are used for analyzing RNAseq, ChIp-Seq data. SE class is also used in R packages for analyzing microarrays, flow cytometry, proteomics, single-cell sequencing data and many more. The single-cell analysis is facilitated by SingelCellExperiment class (SCE), which allows the user to store results of dimensionality reduction and alternative experiments. Alternative experiments (altExps) can be differently processed data within the analysis workflows. Recently, TreeSummarizedExperiment (TSE) were developed to extend the SE and SCE class for incorporating hierarchical information (including phylogenetic tree) and reference sequences. The mia package implements tools using these classes for analysis of microbiome sequencing data. 1.1 Installation Install the development version from GitHub using remotes R package. # install remotes #install.packages(&quot;remotes&quot;) BiocManager::install(&quot;FelixErnst/mia&quot;) 1.1.1 Packages mia : Microbiome analysis tools miaViz : Microbiome analysis specific visualization See also: microbiome 1.2 Background The widely used phyloseq package and class were around before the SummarizedExperiment and the derived TreeSummarizedExperiment class. Many methods for taxonomic profiling data are readily for the phyloseq class structure. In order to facilitate the transition, we provide here a short description how phyloseq and *Experiment classes relate to each other. assays : This slot is similar to otu_table in phyloseq. In a SummarizedExperiment object multiple assays, raw counts, transformed counts can be stored. See also MultiAssayExperiment for storing data from multiple experiments such as RNASeq, Proteomics, etc. rowData : This slot is similar to tax_table in phyloseq to store taxonomic information. colData : This slot is similar to sample_data in phyloseq to store information related to samples. rowTree : This slot is similar to phy_tree in phyloseq to store phylogenetic tree. In this book, you will come across terms like FeatureIDs and SampleIDs. FeatureIDs : These are basically OTU/ASV ids which are row names in assays and rowData. SampleIDs : As the name suggests, these are sample ids which are column names in assays and row names in colData. FeatureIDs and SampleIDs are used but the technical terms rownames and colnames are encouraged to be used, since they relate to actual objects we work with. 1.3 Loading experimental microbiome data 1.3.1 Importing data TODO: data importer from standard CSV/TSV/tree files directly into TSE? Alternative input file formats: data from QIIME2 file formats can be directly imported in TreeSummarizedExperiment format. See help(mia::makeTreeSummarizedExperimentFromqiime2) for examples. 1.3.2 Conversions between data formats in R If the data is has already been imported in R in another format, it can be readily converted into TreeSummarizedExperiment, as shown in our next example. Note that similar conversion functions to TreeSummarizedExperiment are available for multiple data formats via the mia package (see makeTreeSummarizedExperimentFrom* for phyloseq, Biom, and DADA2). library(mia) # phyloseq example data data(GlobalPatterns, package=&quot;phyloseq&quot;) GlobalPatterns_phyloseq &lt;- GlobalPatterns # convert phyloseq to TSE GlobalPatterns_TSE &lt;- makeTreeSummarizedExperimentFromphyloseq(GlobalPatterns_phyloseq) We can also convert TreeSummarizedExperiment objects into phyloseq with respect to the shared components that are supported by both formats (i.e. taxonomic abundance table, sample metadata, taxonomic table, phylogenetic tree, sequence information). This is useful for instance when additional methods are available for phyloseq. TODO: conversion function from TSE to phyloseq 1.4 Metadata 1.5 Microbiome and tree data specific aspects library(mia) data(&quot;GlobalPatterns&quot;) se &lt;- GlobalPatterns se ## class: TreeSummarizedExperiment ## dim: 19216 26 ## metadata(0): ## assays(1): counts ## rownames(19216): 549322 522457 ... 200359 271582 ## rowData names(7): Kingdom Phylum ... Genus Species ## colnames(26): CL3 CC1 ... Even2 Even3 ## colData names(7): X.SampleID Primer ... SampleType Description ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: a LinkDataFrame (19216 rows) ## rowTree: 1 phylo tree(s) (19216 leaves) ## colLinks: NULL ## colTree: NULL 1.5.1 Assays The assays slots contains the experimental data as count matrices. Multiple matrices can be stored the result of assays is actually a list of matrices. assays(se) ## List of length 1 ## names(1): counts Individual assays can be accessed via assay assay(se, &quot;counts&quot;)[1:5,1:7] ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr M11Plmr ## 549322 0 0 0 0 0 0 0 ## 522457 0 0 0 0 0 0 0 ## 951 0 0 0 0 0 0 1 ## 244423 0 0 0 0 0 0 0 ## 586076 0 0 0 0 0 0 0 To illustrate the use of multiple assays, the relative abundance data can be calcualted and stored along the original count data using relAbundanceCounts. se &lt;- relAbundanceCounts(se) assays(se) ## List of length 2 ## names(2): counts relabundance Now there are two assays available in the se object, counts and relabundance. assay(se, &quot;relabundance&quot;)[1:5,1:7] ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr M11Plmr ## 549322 0 0 0 0 0 0 0.000e+00 ## 522457 0 0 0 0 0 0 0.000e+00 ## 951 0 0 0 0 0 0 2.305e-06 ## 244423 0 0 0 0 0 0 0.000e+00 ## 586076 0 0 0 0 0 0 0.000e+00 1.5.2 colData colData contains data on the samples. colData(se) ## DataFrame with 26 rows and 7 columns ## X.SampleID Primer Final_Barcode Barcode_truncated_plus_T ## &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; ## CL3 CL3 ILBC_01 AACGCA TGCGTT ## CC1 CC1 ILBC_02 AACTCG CGAGTT ## SV1 SV1 ILBC_03 AACTGT ACAGTT ## M31Fcsw M31Fcsw ILBC_04 AAGAGA TCTCTT ## M11Fcsw M11Fcsw ILBC_05 AAGCTG CAGCTT ## ... ... ... ... ... ## TS28 TS28 ILBC_25 ACCAGA TCTGGT ## TS29 TS29 ILBC_26 ACCAGC GCTGGT ## Even1 Even1 ILBC_27 ACCGCA TGCGGT ## Even2 Even2 ILBC_28 ACCTCG CGAGGT ## Even3 Even3 ILBC_29 ACCTGT ACAGGT ## Barcode_full_length SampleType ## &lt;factor&gt; &lt;factor&gt; ## CL3 CTAGCGTGCGT Soil ## CC1 CATCGACGAGT Soil ## SV1 GTACGCACAGT Soil ## M31Fcsw TCGACATCTCT Feces ## M11Fcsw CGACTGCAGCT Feces ## ... ... ... ## TS28 GCATCGTCTGG Feces ## TS29 CTAGTCGCTGG Feces ## Even1 TGACTCTGCGG Mock ## Even2 TCTGATCGAGG Mock ## Even3 AGAGAGACAGG Mock ## Description ## &lt;factor&gt; ## CL3 Calhoun South Carolina Pine soil, pH 4.9 ## CC1 Cedar Creek Minnesota, grassland, pH 6.1 ## SV1 Sevilleta new Mexico, desert scrub, pH 8.3 ## M31Fcsw M3, Day 1, fecal swab, whole body study ## M11Fcsw M1, Day 1, fecal swab, whole body study ## ... ... ## TS28 Twin #1 ## TS29 Twin #2 ## Even1 Even1 ## Even2 Even2 ## Even3 Even3 1.5.3 rowData rowData contains data on the features of the samples analyzed. Of particular interest for the microbiome field this is used to store taxonomic information. rowData(se) ## DataFrame with 19216 rows and 7 columns ## Kingdom Phylum Class Order Family ## &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; ## 549322 Archaea Crenarchaeota Thermoprotei NA NA ## 522457 Archaea Crenarchaeota Thermoprotei NA NA ## 951 Archaea Crenarchaeota Thermoprotei Sulfolobales Sulfolobaceae ## 244423 Archaea Crenarchaeota Sd-NA NA NA ## 586076 Archaea Crenarchaeota Sd-NA NA NA ## ... ... ... ... ... ... ## 278222 Bacteria SR1 NA NA NA ## 463590 Bacteria SR1 NA NA NA ## 535321 Bacteria SR1 NA NA NA ## 200359 Bacteria SR1 NA NA NA ## 271582 Bacteria SR1 NA NA NA ## Genus Species ## &lt;character&gt; &lt;character&gt; ## 549322 NA NA ## 522457 NA NA ## 951 Sulfolobus Sulfolobusacidocalda.. ## 244423 NA NA ## 586076 NA NA ## ... ... ... ## 278222 NA NA ## 463590 NA NA ## 535321 NA NA ## 200359 NA NA ## 271582 NA NA 1.5.4 rowTree Phylogenetic trees also play an important role for the microbiome field. The TreeSummarizedExperiment class is able to keep track of feature and node relations via two functions, rowTree and rowLinks. A tree can be accessed via rowTree as phylo object. rowTree(se) ## ## Phylogenetic tree with 19216 tips and 19215 internal nodes. ## ## Tip labels: ## 549322, 522457, 951, 244423, 586076, 246140, ... ## Node labels: ## , 0.858.4, 1.000.154, 0.764.3, 0.995.2, 1.000.2, ... ## ## Rooted; includes branch lengths. The links to the individual features are available through rowLinks. rowLinks(se) ## LinkDataFrame with 19216 rows and 5 columns ## nodeLab nodeNum nodeLab_alias isLeaf whichTree ## &lt;character&gt; &lt;integer&gt; &lt;character&gt; &lt;logical&gt; &lt;character&gt; ## 1 549322 1 alias_1 TRUE phylo ## 2 522457 2 alias_2 TRUE phylo ## 3 951 3 alias_3 TRUE phylo ## 4 244423 4 alias_4 TRUE phylo ## 5 586076 5 alias_5 TRUE phylo ## ... ... ... ... ... ... ## 19212 278222 19212 alias_19212 TRUE phylo ## 19213 463590 19213 alias_19213 TRUE phylo ## 19214 535321 19214 alias_19214 TRUE phylo ## 19215 200359 19215 alias_19215 TRUE phylo ## 19216 271582 19216 alias_19216 TRUE phylo Please note that there can be a 1:1 relationship between tree nodes and features, but this is not a must have. This means there can be features, which are not linked to nodes, and nodes, which are not linked to features. To change the links in an existing object, the changeTree function is available. 1.6 Data conversion Sometimes custom solutions are need for analyzing the data. mia contains a few functions to help in these situations. 1.6.1 Tidy data For several custom analysis and visualization packages such as those from the tidyverse the SE data can be converted to long data.frame format with meltAssay. library(mia) molten_se &lt;- meltAssay(se, add_row_data = TRUE, add_col_data = TRUE, abund_values = &quot;relabundance&quot;) molten_se ## # A tibble: 499,616 x 17 ## FeatureID SampleID counts Kingdom Phylum Class Order Family Genus Species ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 549322 CL3 0 Archaea Crenarc… Thermo… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 2 549322 CC1 0 Archaea Crenarc… Thermo… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 3 549322 SV1 0 Archaea Crenarc… Thermo… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 4 549322 M31Fcsw 0 Archaea Crenarc… Thermo… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 5 549322 M11Fcsw 0 Archaea Crenarc… Thermo… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 6 549322 M31Plmr 0 Archaea Crenarc… Thermo… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 7 549322 M11Plmr 0 Archaea Crenarc… Thermo… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 8 549322 F21Plmr 0 Archaea Crenarc… Thermo… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 9 549322 M31Tong 0 Archaea Crenarc… Thermo… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 10 549322 M11Tong 0 Archaea Crenarc… Thermo… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## # … with 499,606 more rows, and 7 more variables: X.SampleID &lt;fct&gt;, ## # Primer &lt;fct&gt;, Final_Barcode &lt;fct&gt;, Barcode_truncated_plus_T &lt;fct&gt;, ## # Barcode_full_length &lt;fct&gt;, SampleType &lt;fct&gt;, Description &lt;fct&gt; 1.7 Conclusion Some wrapping up… Session Info View session info R Under development (unstable) (2021-04-05 r80145) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.2 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets [8] methods base other attached packages: [1] mia_0.99.10 TreeSummarizedExperiment_1.99.11 [3] Biostrings_2.59.2 XVector_0.31.1 [5] SingleCellExperiment_1.13.14 SummarizedExperiment_1.21.3 [7] Biobase_2.51.0 GenomicRanges_1.43.4 [9] GenomeInfoDb_1.27.10 IRanges_2.25.7 [11] S4Vectors_0.29.15 BiocGenerics_0.37.1 [13] MatrixGenerics_1.3.1 matrixStats_0.58.0 [15] BiocStyle_2.19.2 rebook_1.1.19 [17] BiocManager_1.30.12 loaded via a namespace (and not attached): [1] ggbeeswarm_0.6.0 colorspace_2.0-0 [3] ellipsis_0.3.1 scuttle_1.1.18 [5] BiocNeighbors_1.9.4 rstudioapi_0.13 [7] bit64_4.0.5 fansi_0.4.2 [9] codetools_0.2-18 splines_4.1.0 [11] sparseMatrixStats_1.3.7 cachem_1.0.4 [13] knitr_1.31 scater_1.19.11 [15] ade4_1.7-16 jsonlite_1.7.2 [17] phyloseq_1.35.0 cluster_2.1.1 [19] graph_1.69.0 compiler_4.1.0 [21] assertthat_0.2.1 Matrix_1.3-2 [23] fastmap_1.1.0 cli_2.4.0 [25] BiocSingular_1.7.2 prettyunits_1.1.1 [27] htmltools_0.5.1.1 tools_4.1.0 [29] igraph_1.2.6 rsvd_1.0.3 [31] gtable_0.3.0 glue_1.4.2 [33] GenomeInfoDbData_1.2.4 reshape2_1.4.4 [35] dplyr_1.0.5 Rcpp_1.0.6 [37] jquerylib_0.1.3 rhdf5filters_1.3.4 [39] vctrs_0.3.7 multtest_2.47.0 [41] debugme_1.1.0 ape_5.4-1 [43] nlme_3.1-152 DECIPHER_2.19.2 [45] iterators_1.0.13 DelayedMatrixStats_1.13.5 [47] xfun_0.22 stringr_1.4.0 [49] ps_1.6.0 beachmat_2.7.7 [51] lifecycle_1.0.0 irlba_2.3.3 [53] XML_3.99-0.6 zlibbioc_1.37.0 [55] MASS_7.3-53.1 scales_1.1.1 [57] hms_1.0.0 biomformat_1.19.0 [59] rhdf5_2.35.2 yaml_2.2.1 [61] memoise_2.0.0 gridExtra_2.3 [63] ggplot2_3.3.3 sass_0.3.1 [65] stringi_1.5.3 RSQLite_2.2.5 [67] foreach_1.5.1 ScaledMatrix_0.99.2 [69] permute_0.9-5 filelock_1.0.2 [71] BiocParallel_1.25.5 rlang_0.4.10 [73] pkgconfig_2.0.3 bitops_1.0-6 [75] evaluate_0.14 lattice_0.20-41 [77] Rhdf5lib_1.13.4 purrr_0.3.4 [79] CodeDepends_0.6.5 bit_4.0.4 [81] tidyselect_1.1.0 plyr_1.8.6 [83] magrittr_2.0.1 bookdown_0.21 [85] R6_2.5.0 generics_0.1.0 [87] DelayedArray_0.17.10 DBI_1.1.1 [89] pillar_1.5.1 mgcv_1.8-34 [91] survival_3.2-10 RCurl_1.98-1.3 [93] tibble_3.1.0 dir.expiry_0.99.4 [95] crayon_1.4.1 utf8_1.2.1 [97] rmarkdown_2.7 progress_1.2.2 [99] viridis_0.5.1 grid_4.1.0 [101] data.table_1.14.0 blob_1.2.1 [103] vegan_2.5-7 digest_0.6.27 [105] tidyr_1.1.3 munsell_0.5.0 [107] DirichletMultinomial_1.33.2 beeswarm_0.3.1 [109] viridisLite_0.3.0 vipor_0.4.5 [111] bslib_0.2.4 "],["overview.html", "Chapter 2 Overview 2.1 Introduction 2.2 Microbiome experiment types 2.3 Processing steps 2.4 Quick Start Session Info", " Chapter 2 Overview .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 2.1 Introduction 2.2 Microbiome experiment types 2.3 Processing steps 2.4 Quick Start Session Info View session info R Under development (unstable) (2021-04-05 r80145) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.2 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] BiocStyle_2.19.2 rebook_1.1.19 BiocManager_1.30.12 loaded via a namespace (and not attached): [1] graph_1.69.0 knitr_1.31 magrittr_2.0.1 [4] BiocGenerics_0.37.1 R6_2.5.0 rlang_0.4.10 [7] stringr_1.4.0 tools_4.1.0 parallel_4.1.0 [10] xfun_0.22 jquerylib_0.1.3 htmltools_0.5.1.1 [13] CodeDepends_0.6.5 yaml_2.2.1 digest_0.6.27 [16] bookdown_0.21 dir.expiry_0.99.4 codetools_0.2-18 [19] sass_0.3.1 evaluate_0.14 rmarkdown_2.7 [22] stringi_1.5.3 compiler_4.1.0 bslib_0.2.4 [25] filelock_1.0.2 XML_3.99-0.6 stats4_4.1.0 [28] jsonlite_1.7.2 "],["taxonomic-information.html", "Chapter 3 Taxonomic information 3.1 Assigning taxonomic information. 3.2 Functions to access taxonomic information 3.3 Data agglomeration 3.4 Pick specific Session Info", " Chapter 3 Taxonomic information .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } library(mia) data(&quot;GlobalPatterns&quot;) se &lt;- GlobalPatterns Taxonomic information are a key part of analyzing microbiome data and without it, any type of data analysis probably will not make much sense. However, the degree of detail of taxonomic information differs depending on the dataset and annotation data used. Therefore, the mia package expects a loose assembly of taxonomic information and assumes certain key aspects: Taxonomic information is given as character vectors or factors in the rowData of an SummarizedExperiment object. The columns containing the taxonomic information must be named domain, kingdom, phylum, class, order, family, genus, species or with a capital first letter. the columns must be given in the order shown above column can be omited, but the order must remain 3.1 Assigning taxonomic information. There are a number of methods to assign taxonomic information. We like to give a short introduction about the methods available without ranking one over the other. This has to be your choice based on the result for the individual dataset. 3.1.1 dada2 The dada2 package (Callahan, McMurdie, and Holmes 2020) implements the assignTaxonomy function, which takes as input the ASV sequences associated with each row of data and a training dataset. For more information visit the dada2 website. 3.1.2 DECIPHER The DECIPHER package (Wright 2020) implements the IDTAXA algorithm to assign either taxonomic information or function information. For mia only the first option is of interest for now and more information can be found on the DECIPHER website 3.2 Functions to access taxonomic information checkTaxonomy checks whether the taxonomic information is usable for mia checkTaxonomy(se) ## [1] TRUE Since the rowData can contain other data, taxonomyRanks will return the columns mia assumes to contain the taxonomic information. taxonomyRanks(se) ## [1] &quot;Kingdom&quot; &quot;Phylum&quot; &quot;Class&quot; &quot;Order&quot; &quot;Family&quot; &quot;Genus&quot; &quot;Species&quot; This can then be used to subset the rowData to columns needed. rowData(se)[,taxonomyRanks(se)] ## DataFrame with 19216 rows and 7 columns ## Kingdom Phylum Class Order Family ## &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; ## 549322 Archaea Crenarchaeota Thermoprotei NA NA ## 522457 Archaea Crenarchaeota Thermoprotei NA NA ## 951 Archaea Crenarchaeota Thermoprotei Sulfolobales Sulfolobaceae ## 244423 Archaea Crenarchaeota Sd-NA NA NA ## 586076 Archaea Crenarchaeota Sd-NA NA NA ## ... ... ... ... ... ... ## 278222 Bacteria SR1 NA NA NA ## 463590 Bacteria SR1 NA NA NA ## 535321 Bacteria SR1 NA NA NA ## 200359 Bacteria SR1 NA NA NA ## 271582 Bacteria SR1 NA NA NA ## Genus Species ## &lt;character&gt; &lt;character&gt; ## 549322 NA NA ## 522457 NA NA ## 951 Sulfolobus Sulfolobusacidocalda.. ## 244423 NA NA ## 586076 NA NA ## ... ... ... ## 278222 NA NA ## 463590 NA NA ## 535321 NA NA ## 200359 NA NA ## 271582 NA NA taxonomyRankEmpty checks for empty values in the given rank and returns a logical vector of length(x). all(!taxonomyRankEmpty(se, rank = &quot;Kingdom&quot;)) ## [1] TRUE table(taxonomyRankEmpty(se, rank = &quot;Genus&quot;)) ## ## FALSE TRUE ## 8008 11208 table(taxonomyRankEmpty(se, rank = &quot;Species&quot;)) ## ## FALSE TRUE ## 1413 17803 getTaxonomyLabels is a multi-purpose function, which turns taxonomic information into a character vector of length(x) head(getTaxonomyLabels(se)) ## [1] &quot;Class:Thermoprotei&quot; &quot;Class:Thermoprotei_1&quot; ## [3] &quot;Species:Sulfolobusacidocaldarius&quot; &quot;Class:Sd-NA&quot; ## [5] &quot;Class:Sd-NA_1&quot; &quot;Class:Sd-NA_2&quot; By default this will used the lowest non-empty information to construct a string with the following scheme level:value. If all levels are the same this part is omited, but can be added by setting with_rank = TRUE phylum &lt;- !is.na(rowData(se)$Phylum) &amp; vapply(data.frame(apply(rowData(se)[,taxonomyRanks(se)[3:7]],1L,is.na)),all,logical(1)) head(getTaxonomyLabels(se[phylum,])) ## [1] &quot;Crenarchaeota&quot; &quot;Crenarchaeota_1&quot; &quot;Crenarchaeota_2&quot; &quot;Actinobacteria&quot; ## [5] &quot;Actinobacteria_1&quot; &quot;Spirochaetes&quot; head(getTaxonomyLabels(se[phylum,], with_rank = TRUE)) ## [1] &quot;Phylum:Crenarchaeota&quot; &quot;Phylum:Crenarchaeota_1&quot; ## [3] &quot;Phylum:Crenarchaeota_2&quot; &quot;Phylum:Actinobacteria&quot; ## [5] &quot;Phylum:Actinobacteria_1&quot; &quot;Phylum:Spirochaetes&quot; By default the return value of getTaxonomyLabels contains only unique elements by passing it through make.unique. This step can be omited by setting make_unique = FALSE head(getTaxonomyLabels(se[phylum,], with_rank = TRUE, make_unique = FALSE)) ## [1] &quot;Phylum:Crenarchaeota&quot; &quot;Phylum:Crenarchaeota&quot; &quot;Phylum:Crenarchaeota&quot; ## [4] &quot;Phylum:Actinobacteria&quot; &quot;Phylum:Actinobacteria&quot; &quot;Phylum:Spirochaetes&quot; To apply the loop resolving function resolveLoop from the TreeSummarizedExperiment package (Huang 2020) within getTaxonomyLabels, set resolve_loops = TRUE. 3.2.1 Generate a taxonomic tree on the fly To create a taxonomic tree taxonomyTree used the information and returns a phylo object. Duplicate information from the rowData are removed. taxonomyTree(se) ## ## Phylogenetic tree with 1645 tips and 1089 internal nodes. ## ## Tip labels: ## Species:Cenarchaeumsymbiosum, Species:pIVWA5, Species:CandidatusNitrososphaeragargensis, Species:SCA1145, Species:SCA1170, Species:Sulfolobusacidocaldarius, ... ## Node labels: ## root:ALL, Kingdom:Archaea, Phylum:Crenarchaeota, Class:C2, Class:Sd-NA, Class:Thaumarchaeota, ... ## ## Rooted; includes branch lengths. se &lt;- addTaxonomyTree(se) se ## class: TreeSummarizedExperiment ## dim: 19216 26 ## metadata(0): ## assays(1): counts ## rownames(19216): Class:Thermoprotei Class:Thermoprotei ... Phylum:SR1 ## Phylum:SR1 ## rowData names(7): Kingdom Phylum ... Genus Species ## colnames(26): CL3 CC1 ... Even2 Even3 ## colData names(7): X.SampleID Primer ... SampleType Description ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: a LinkDataFrame (19216 rows) ## rowTree: 1 phylo tree(s) (1645 leaves) ## colLinks: NULL ## colTree: NULL The implementation is based on the the toTree function from the TreeSummarizedExperiment package (Huang 2020). 3.3 Data agglomeration One of the main applications of taxonomic information in regards to count data is to agglomerate count data on taxonomic levels and track the influence of changing conditions through these levels. For this mia contains the agglomerateByRank function. The ideal location to store the agglomerated data is as an alternative experiment. se &lt;- relAbundanceCounts(se) altExp(se, &quot;Family&quot;) &lt;- agglomerateByRank(se, rank = &quot;Family&quot;, agglomerateTree = TRUE) altExp(se, &quot;Family&quot;) ## class: TreeSummarizedExperiment ## dim: 603 26 ## metadata(0): ## assays(2): counts relabundance ## rownames(603): Class:Thermoprotei Family:Sulfolobaceae ... ## Family:Thermodesulfobiaceae Phylum:SR1 ## rowData names(7): Kingdom Phylum ... Genus Species ## colnames(26): CL3 CC1 ... Even2 Even3 ## colData names(7): X.SampleID Primer ... SampleType Description ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: a LinkDataFrame (603 rows) ## rowTree: 1 phylo tree(s) (496 leaves) ## colLinks: NULL ## colTree: NULL If multiple assays (counts and relabundance) exists, both will be agglomerated. assayNames(se) ## [1] &quot;counts&quot; &quot;relabundance&quot; assayNames(altExp(se, &quot;Family&quot;)) ## [1] &quot;counts&quot; &quot;relabundance&quot; assay(altExp(se, &quot;Family&quot;), &quot;relabundance&quot;)[1:5,1:7] ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr M11Plmr ## Class:Thermoprotei 0.0000000 0.000e+00 0 0 0 0 0.000e+00 ## Family:Sulfolobaceae 0.0000000 0.000e+00 0 0 0 0 2.305e-06 ## Class:Sd-NA 0.0000000 0.000e+00 0 0 0 0 0.000e+00 ## Order:NRP-J 0.0001991 2.070e-04 0 0 0 0 6.914e-06 ## Family:SAGMA-X 0.0000000 6.165e-06 0 0 0 0 0.000e+00 assay(altExp(se, &quot;Family&quot;), &quot;counts&quot;)[1:5,1:7] ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr M11Plmr ## Class:Thermoprotei 0 0 0 0 0 0 0 ## Family:Sulfolobaceae 0 0 0 0 0 0 1 ## Class:Sd-NA 0 0 0 0 0 0 0 ## Order:NRP-J 172 235 0 0 0 0 3 ## Family:SAGMA-X 0 7 0 0 0 0 0 altExpNames now consists of Family level data. This can be extended to use any level present in Kingdom, Phylum, Class, Order, Family, Genus, Species. 3.4 Pick specific Retrieving of specific elements are required for specific analysis. For instance, extracting abundances for a specific taxa in all samples or all taxa in one sample. 3.4.1 Abundances of all taxa in specific sample taxa.abund.cc1 &lt;- getAbundanceSample(se, sample_id = &quot;CC1&quot;, abund_values = &quot;counts&quot;) taxa.abund.cc1[1:10] ## Class:Thermoprotei Class:Thermoprotei ## 0 0 ## Species:Sulfolobusacidocaldarius Class:Sd-NA ## 0 0 ## Class:Sd-NA Class:Sd-NA ## 0 0 ## Order:NRP-J Order:NRP-J ## 1 0 ## Order:NRP-J Order:NRP-J ## 194 5 3.4.2 Abundances of specific taxa in all samples taxa.abundances &lt;- getAbundanceFeature(se, feature_id = &quot;Phylum:Bacteroidetes&quot;, abund_values = &quot;counts&quot;) taxa.abundances[1:10] ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr M11Plmr F21Plmr M31Tong M11Tong ## 2 18 2 0 0 0 0 1 0 0 Session Info View session info R Under development (unstable) (2021-04-05 r80145) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.2 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets [8] methods base other attached packages: [1] mia_0.99.10 TreeSummarizedExperiment_1.99.11 [3] Biostrings_2.59.2 XVector_0.31.1 [5] SingleCellExperiment_1.13.14 SummarizedExperiment_1.21.3 [7] Biobase_2.51.0 GenomicRanges_1.43.4 [9] GenomeInfoDb_1.27.10 IRanges_2.25.7 [11] S4Vectors_0.29.15 BiocGenerics_0.37.1 [13] MatrixGenerics_1.3.1 matrixStats_0.58.0 [15] BiocStyle_2.19.2 rebook_1.1.19 [17] BiocManager_1.30.12 loaded via a namespace (and not attached): [1] nlme_3.1-152 bitops_1.0-6 [3] DirichletMultinomial_1.33.2 bit64_4.0.5 [5] filelock_1.0.2 tools_4.1.0 [7] bslib_0.2.4 vegan_2.5-7 [9] utf8_1.2.1 R6_2.5.0 [11] irlba_2.3.3 vipor_0.4.5 [13] mgcv_1.8-34 DBI_1.1.1 [15] colorspace_2.0-0 permute_0.9-5 [17] gridExtra_2.3 tidyselect_1.1.0 [19] bit_4.0.4 compiler_4.1.0 [21] graph_1.69.0 BiocNeighbors_1.9.4 [23] DelayedArray_0.17.10 bookdown_0.21 [25] sass_0.3.1 scales_1.1.1 [27] stringr_1.4.0 digest_0.6.27 [29] rmarkdown_2.7 scater_1.19.11 [31] pkgconfig_2.0.3 htmltools_0.5.1.1 [33] sparseMatrixStats_1.3.7 fastmap_1.1.0 [35] rlang_0.4.10 RSQLite_2.2.5 [37] DelayedMatrixStats_1.13.5 jquerylib_0.1.3 [39] generics_0.1.0 jsonlite_1.7.2 [41] BiocParallel_1.25.5 dplyr_1.0.5 [43] RCurl_1.98-1.3 magrittr_2.0.1 [45] BiocSingular_1.7.2 GenomeInfoDbData_1.2.4 [47] scuttle_1.1.18 Matrix_1.3-2 [49] Rcpp_1.0.6 ggbeeswarm_0.6.0 [51] munsell_0.5.0 fansi_0.4.2 [53] DECIPHER_2.19.2 viridis_0.5.1 [55] ape_5.4-1 lifecycle_1.0.0 [57] stringi_1.5.3 yaml_2.2.1 [59] MASS_7.3-53.1 debugme_1.1.0 [61] zlibbioc_1.37.0 blob_1.2.1 [63] grid_4.1.0 crayon_1.4.1 [65] dir.expiry_0.99.4 lattice_0.20-41 [67] splines_4.1.0 beachmat_2.7.7 [69] CodeDepends_0.6.5 knitr_1.31 [71] pillar_1.5.1 codetools_0.2-18 [73] ScaledMatrix_0.99.2 XML_3.99-0.6 [75] glue_1.4.2 evaluate_0.14 [77] vctrs_0.3.7 tidyr_1.1.3 [79] gtable_0.3.0 purrr_0.3.4 [81] assertthat_0.2.1 cachem_1.0.4 [83] ggplot2_3.3.3 xfun_0.22 [85] rsvd_1.0.3 viridisLite_0.3.0 [87] tibble_3.1.0 memoise_2.0.0 [89] beeswarm_0.3.1 cluster_2.1.1 [91] ellipsis_0.3.1 "],["quality-control.html", "Chapter 4 Quality Control 4.1 Get top taxa and taxonomy 4.2 Library size Session Info", " Chapter 4 Quality Control .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } library(mia) data(&quot;GlobalPatterns&quot;) se &lt;- GlobalPatterns 4.1 Get top taxa and taxonomy 4.1.1 Features The getTopTaxa can be used for identifying top taxa in the data. top_features &lt;- getTopTaxa(se, method=&quot;median&quot;, top=10) tax_data &lt;- rowData(se)[top_features,taxonomyRanks(se)] tax_data ## DataFrame with 10 rows and 7 columns ## Kingdom Phylum Class Order ## &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; ## 549656 Bacteria Cyanobacteria Chloroplast Stramenopiles ## 331820 Bacteria Bacteroidetes Bacteroidia Bacteroidales ## 317182 Bacteria Cyanobacteria Chloroplast Stramenopiles ## 94166 Bacteria Proteobacteria Gammaproteobacteria Pasteurellales ## 279599 Bacteria Cyanobacteria Nostocophycideae Nostocales ## 158660 Bacteria Bacteroidetes Bacteroidia Bacteroidales ## 329744 Bacteria Actinobacteria Actinobacteria Actinomycetales ## 326977 Bacteria Actinobacteria Actinobacteria Bifidobacteriales ## 248140 Bacteria Bacteroidetes Bacteroidia Bacteroidales ## 550960 Bacteria Proteobacteria Gammaproteobacteria Enterobacteriales ## Family Genus Species ## &lt;character&gt; &lt;character&gt; &lt;character&gt; ## 549656 NA NA NA ## 331820 Bacteroidaceae Bacteroides NA ## 317182 NA NA NA ## 94166 Pasteurellaceae Haemophilus Haemophilusparainflu.. ## 279599 Nostocaceae Dolichospermum NA ## 158660 Bacteroidaceae Bacteroides NA ## 329744 ACK-M1 NA NA ## 326977 Bifidobacteriaceae Bifidobacterium Bifidobacteriumadole.. ## 248140 Bacteroidaceae Bacteroides Bacteroidescaccae ## 550960 Enterobacteriaceae Providencia NA 4.2 Library size The total counts/sample can be calculated using the perCellQCMetrics/addPerCellQC from the scater package. The first one just calculates the values, whereas the latter one directly adds them to the colData. library(scater) perCellQCMetrics(se) ## DataFrame with 26 rows and 3 columns ## sum detected total ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## CL3 864077 6964 864077 ## CC1 1135457 7679 1135457 ## SV1 697509 5729 697509 ## M31Fcsw 1543451 2667 1543451 ## M11Fcsw 2076476 2574 2076476 ## ... ... ... ... ## TS28 937466 2679 937466 ## TS29 1211071 2629 1211071 ## Even1 1216137 4213 1216137 ## Even2 971073 3130 971073 ## Even3 1078241 2776 1078241 se &lt;- addPerCellQC(se) colData(se) ## DataFrame with 26 rows and 10 columns ## X.SampleID Primer Final_Barcode Barcode_truncated_plus_T ## &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; ## CL3 CL3 ILBC_01 AACGCA TGCGTT ## CC1 CC1 ILBC_02 AACTCG CGAGTT ## SV1 SV1 ILBC_03 AACTGT ACAGTT ## M31Fcsw M31Fcsw ILBC_04 AAGAGA TCTCTT ## M11Fcsw M11Fcsw ILBC_05 AAGCTG CAGCTT ## ... ... ... ... ... ## TS28 TS28 ILBC_25 ACCAGA TCTGGT ## TS29 TS29 ILBC_26 ACCAGC GCTGGT ## Even1 Even1 ILBC_27 ACCGCA TGCGGT ## Even2 Even2 ILBC_28 ACCTCG CGAGGT ## Even3 Even3 ILBC_29 ACCTGT ACAGGT ## Barcode_full_length SampleType ## &lt;factor&gt; &lt;factor&gt; ## CL3 CTAGCGTGCGT Soil ## CC1 CATCGACGAGT Soil ## SV1 GTACGCACAGT Soil ## M31Fcsw TCGACATCTCT Feces ## M11Fcsw CGACTGCAGCT Feces ## ... ... ... ## TS28 GCATCGTCTGG Feces ## TS29 CTAGTCGCTGG Feces ## Even1 TGACTCTGCGG Mock ## Even2 TCTGATCGAGG Mock ## Even3 AGAGAGACAGG Mock ## Description sum detected ## &lt;factor&gt; &lt;numeric&gt; &lt;numeric&gt; ## CL3 Calhoun South Carolina Pine soil, pH 4.9 864077 6964 ## CC1 Cedar Creek Minnesota, grassland, pH 6.1 1135457 7679 ## SV1 Sevilleta new Mexico, desert scrub, pH 8.3 697509 5729 ## M31Fcsw M3, Day 1, fecal swab, whole body study 1543451 2667 ## M11Fcsw M1, Day 1, fecal swab, whole body study 2076476 2574 ## ... ... ... ... ## TS28 Twin #1 937466 2679 ## TS29 Twin #2 1211071 2629 ## Even1 Even1 1216137 4213 ## Even2 Even2 971073 3130 ## Even3 Even3 1078241 2776 ## total ## &lt;numeric&gt; ## CL3 864077 ## CC1 1135457 ## SV1 697509 ## M31Fcsw 1543451 ## M11Fcsw 2076476 ## ... ... ## TS28 937466 ## TS29 1211071 ## Even1 1216137 ## Even2 971073 ## Even3 1078241 The calulated library sizes can be visualized using the plotColData function. library(ggplot2) plotColData(se,&quot;sum&quot;,&quot;X.SampleID&quot;, colour_by = &quot;X.SampleID&quot;) + theme(axis.text.x = element_text(angle = 45, hjust=1)) Figure 4.1: Library sizes per sample. plotColData(se,&quot;sum&quot;,&quot;SampleType&quot;, colour_by = &quot;SampleType&quot;) + theme(axis.text.x = element_text(angle = 45, hjust=1)) Figure 4.2: Library sizes per sample type. Session Info View session info R Under development (unstable) (2021-04-05 r80145) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.2 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets [8] methods base other attached packages: [1] scater_1.19.11 ggplot2_3.3.3 [3] mia_0.99.10 TreeSummarizedExperiment_1.99.11 [5] Biostrings_2.59.2 XVector_0.31.1 [7] SingleCellExperiment_1.13.14 SummarizedExperiment_1.21.3 [9] Biobase_2.51.0 GenomicRanges_1.43.4 [11] GenomeInfoDb_1.27.10 IRanges_2.25.7 [13] S4Vectors_0.29.15 BiocGenerics_0.37.1 [15] MatrixGenerics_1.3.1 matrixStats_0.58.0 [17] BiocStyle_2.19.2 rebook_1.1.19 [19] BiocManager_1.30.12 loaded via a namespace (and not attached): [1] ggbeeswarm_0.6.0 colorspace_2.0-0 [3] ellipsis_0.3.1 scuttle_1.1.18 [5] BiocNeighbors_1.9.4 farver_2.1.0 [7] bit64_4.0.5 fansi_0.4.2 [9] codetools_0.2-18 splines_4.1.0 [11] sparseMatrixStats_1.3.7 cachem_1.0.4 [13] knitr_1.31 jsonlite_1.7.2 [15] cluster_2.1.1 graph_1.69.0 [17] compiler_4.1.0 assertthat_0.2.1 [19] Matrix_1.3-2 fastmap_1.1.0 [21] BiocSingular_1.7.2 htmltools_0.5.1.1 [23] tools_4.1.0 rsvd_1.0.3 [25] gtable_0.3.0 glue_1.4.2 [27] GenomeInfoDbData_1.2.4 dplyr_1.0.5 [29] Rcpp_1.0.6 jquerylib_0.1.3 [31] vctrs_0.3.7 debugme_1.1.0 [33] ape_5.4-1 nlme_3.1-152 [35] DECIPHER_2.19.2 DelayedMatrixStats_1.13.5 [37] xfun_0.22 stringr_1.4.0 [39] beachmat_2.7.7 lifecycle_1.0.0 [41] irlba_2.3.3 XML_3.99-0.6 [43] zlibbioc_1.37.0 MASS_7.3-53.1 [45] scales_1.1.1 yaml_2.2.1 [47] memoise_2.0.0 gridExtra_2.3 [49] sass_0.3.1 stringi_1.5.3 [51] RSQLite_2.2.5 highr_0.8 [53] ScaledMatrix_0.99.2 permute_0.9-5 [55] filelock_1.0.2 BiocParallel_1.25.5 [57] rlang_0.4.10 pkgconfig_2.0.3 [59] bitops_1.0-6 evaluate_0.14 [61] lattice_0.20-41 purrr_0.3.4 [63] CodeDepends_0.6.5 labeling_0.4.2 [65] cowplot_1.1.1 bit_4.0.4 [67] tidyselect_1.1.0 magrittr_2.0.1 [69] bookdown_0.21 R6_2.5.0 [71] generics_0.1.0 DelayedArray_0.17.10 [73] DBI_1.1.1 pillar_1.5.1 [75] withr_2.4.1 mgcv_1.8-34 [77] RCurl_1.98-1.3 tibble_3.1.0 [79] dir.expiry_0.99.4 crayon_1.4.1 [81] utf8_1.2.1 rmarkdown_2.7 [83] viridis_0.5.1 grid_4.1.0 [85] blob_1.2.1 vegan_2.5-7 [87] digest_0.6.27 tidyr_1.1.3 [89] munsell_0.5.0 DirichletMultinomial_1.33.2 [91] beeswarm_0.3.1 viridisLite_0.3.0 [93] vipor_0.4.5 bslib_0.2.4 "],["microbiome-exploration.html", "Chapter 5 Microbiome Exploration 5.1 Prevalence Session Info", " Chapter 5 Microbiome Exploration .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } This chapter focuses on the exploration of microbiome data and establish commonly used descriptors of a microbiome. The main difference to quality control is that the exploration assumes the technical aspects of the dataset have been investigated to your satisfaction. Generally speaking at this point you should be quite certain, that the dataset doesn’t suffer from severe technical biases or you should at least be aware of potential problems. In reality you might need to go back and forth between QC and exploration, since you discover through exploration of your dataset technical aspects you need to check. library(mia) data(&quot;GlobalPatterns&quot;) se &lt;- GlobalPatterns 5.1 Prevalence Prevalence is a measurements, which describes in how many samples certain microbes were detected. Investigating the prevalence of microbes allows you either to focus on changes, which pertain to most of the samples, or to focus on less often found microbes, which are nonetheless abundantly found in a small number of samples. On the raw data, the population prevalence (frequency) at a 1% relative abundance threshold (detection = 1/100 and as_relative = TRUE), can look like this. The low prevalence in this examples can be explained by rather different sample types as well as the in depth nature of the data. head(getPrevalence(se, detection = 1/100, sort = TRUE, as_relative = TRUE)) ## 331820 158660 98605 326977 145149 114821 ## 0.2308 0.2308 0.1923 0.1923 0.1538 0.1538 The detection and as_relative can also be used to access, how many samples do pass a threshold for raw counts. Here the population prevalence (frequency) at the absolute abundance threshold (as_relative = FALSE) at read count 1 (detection = TRUE) is accessed. head(getPrevalence(se, detection = 1, sort = TRUE, abund_values = &quot;counts&quot;, as_relative = FALSE)) ## 145149 114821 108747 526804 98605 180658 ## 1 1 1 1 1 1 Note that, if the output should used for subsetting or storing the data in the rowData, set sort = FALSE. 5.1.1 Prevalent microbiota analysis To investigate the microbiome data at a selected taxonomic levels, two approaches are available. First the data can be agglomerated to the taxonomic level and getPrevalence be used on the result. altExp(se,&quot;Phylum&quot;) &lt;- agglomerateByRank(se, &quot;Phylum&quot;) head(getPrevalence(altExp(se,&quot;Phylum&quot;), detection = 1/100, sort = TRUE, abund_values = &quot;counts&quot;, as_relative = TRUE)) ## Phylum:Bacteroidetes Phylum:Proteobacteria Phylum:Actinobacteria ## 1.0000 0.9231 0.8462 ## Phylum:Cyanobacteria Phylum:Firmicutes Phylum:Verrucomicrobia ## 0.6154 0.5769 0.4615 Alternatively the rank argument can be set, to perform the agglomeration on the fly. altExp(se,&quot;Phylum&quot;) &lt;- agglomerateByRank(se, &quot;Phylum&quot;) head(getPrevalence(se, rank = &quot;Phylum&quot;, detection = 1/100, sort = TRUE, abund_values = &quot;counts&quot;, as_relative = TRUE)) ## Bacteroidetes Proteobacteria Actinobacteria Cyanobacteria Firmicutes ## 1.0000 0.9231 0.8462 0.6154 0.5769 ## Verrucomicrobia ## 0.4615 The difference in the naming scheme, is that by default na.rm = TRUE is used for agglomeration in getPrevalence, whereas the default for agglomerateByRank is FALSE to prevent accidental data loss. If you only need the names of the prevalent taxa, getPrevalentTaxa is available. This returns the taxa that exceed the given prevalence and detection thresholds. getPrevalentTaxa(se, detection = 0, prevalence = 50/100) prev &lt;- getPrevalentTaxa(se, detection = 0, prevalence = 50/100, rank = &quot;Phylum&quot;, sort = TRUE) prev Note, that the detection and prevalence thresholds are not the same, since detection can be applied to relative counts or absolute couts depending on whether as_relative is set TRUE or FALSE TODO See also related functions for the analysis of rare and variable taxa (rareMembers; rareAbundance; lowAbundance). 5.1.2 Plotting prevalence To plot the prevalence, the data is first added to the rowData. rowData(altExp(se,&quot;Phylum&quot;))$prevalence &lt;- getPrevalence(altExp(se,&quot;Phylum&quot;), detection = 1/100, sort = FALSE, abund_values = &quot;counts&quot;, as_relative = TRUE) Then it can be plotted via the plotting functions from the scater package. library(scater) plotRowData(altExp(se,&quot;Phylum&quot;), &quot;prevalence&quot;, colour_by = &quot;Phylum&quot;) Additionally, the prevalence can be plotted on the taxonomic tree using the miaViz package. altExps(se) &lt;- splitByRanks(se) altExps(se) &lt;- lapply(altExps(se), function(y){ rowData(y)$prevalence &lt;- getPrevalence(y, detection = 1/100, sort = FALSE, abund_values = &quot;counts&quot;, as_relative = TRUE) y }) top_phyla &lt;- getTopTaxa(altExp(se,&quot;Phylum&quot;), method=&quot;prevalence&quot;, top=10L, abund_values=&quot;counts&quot;) top_phyla_mean &lt;- getTopTaxa(altExp(se,&quot;Phylum&quot;), method=&quot;mean&quot;, top=10L, abund_values=&quot;counts&quot;) x &lt;- unsplitByRanks(se, ranks = taxonomyRanks(se)[1:6]) x &lt;- addTaxonomyTree(x) After some preparation the data is assembled and can be plotted via plotRowTree. library(miaViz) plotRowTree(x[rowData(x)$Phylum %in% top_phyla,], edge_colour_by = &quot;Phylum&quot;, tip_colour_by = &quot;prevalence&quot;, node_colour_by = &quot;prevalence&quot;) Figure 5.1: Prevalence of top phyla as judged by prevalence plotRowTree(x[rowData(x)$Phylum %in% top_phyla_mean,], edge_colour_by = &quot;Phylum&quot;, tip_colour_by = &quot;prevalence&quot;, node_colour_by = &quot;prevalence&quot;) Figure 5.2: Prevalence of top phyla as judged by mean abundance Session Info View session info R Under development (unstable) (2021-04-05 r80145) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.2 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets [8] methods base other attached packages: [1] miaViz_0.99.6 ggraph_2.0.5 [3] scater_1.19.11 ggplot2_3.3.3 [5] mia_0.99.10 TreeSummarizedExperiment_1.99.11 [7] Biostrings_2.59.2 XVector_0.31.1 [9] SingleCellExperiment_1.13.14 SummarizedExperiment_1.21.3 [11] Biobase_2.51.0 GenomicRanges_1.43.4 [13] GenomeInfoDb_1.27.10 IRanges_2.25.7 [15] S4Vectors_0.29.15 BiocGenerics_0.37.1 [17] MatrixGenerics_1.3.1 matrixStats_0.58.0 [19] BiocStyle_2.19.2 rebook_1.1.19 [21] BiocManager_1.30.12 loaded via a namespace (and not attached): [1] ggtree_2.5.2 ggnewscale_0.4.5 [3] ggbeeswarm_0.6.0 colorspace_2.0-0 [5] ellipsis_0.3.1 scuttle_1.1.18 [7] BiocNeighbors_1.9.4 aplot_0.0.6 [9] farver_2.1.0 graphlayouts_0.7.1 [11] ggrepel_0.9.1 bit64_4.0.5 [13] fansi_0.4.2 codetools_0.2-18 [15] splines_4.1.0 sparseMatrixStats_1.3.7 [17] cachem_1.0.4 knitr_1.31 [19] polyclip_1.10-0 jsonlite_1.7.2 [21] cluster_2.1.1 graph_1.69.0 [23] ggforce_0.3.3 compiler_4.1.0 [25] rvcheck_0.1.8 lazyeval_0.2.2 [27] assertthat_0.2.1 Matrix_1.3-2 [29] fastmap_1.1.0 tweenr_1.0.2 [31] BiocSingular_1.7.2 htmltools_0.5.1.1 [33] tools_4.1.0 igraph_1.2.6 [35] rsvd_1.0.3 gtable_0.3.0 [37] glue_1.4.2 GenomeInfoDbData_1.2.4 [39] dplyr_1.0.5 Rcpp_1.0.6 [41] jquerylib_0.1.3 vctrs_0.3.7 [43] debugme_1.1.0 ape_5.4-1 [45] nlme_3.1-152 DECIPHER_2.19.2 [47] DelayedMatrixStats_1.13.5 xfun_0.22 [49] stringr_1.4.0 beachmat_2.7.7 [51] lifecycle_1.0.0 irlba_2.3.3 [53] XML_3.99-0.6 zlibbioc_1.37.0 [55] MASS_7.3-53.1 scales_1.1.1 [57] tidygraph_1.2.0 yaml_2.2.1 [59] memoise_2.0.0 gridExtra_2.3 [61] sass_0.3.1 stringi_1.5.3 [63] RSQLite_2.2.5 highr_0.8 [65] ScaledMatrix_0.99.2 tidytree_0.3.3 [67] permute_0.9-5 filelock_1.0.2 [69] BiocParallel_1.25.5 rlang_0.4.10 [71] pkgconfig_2.0.3 bitops_1.0-6 [73] evaluate_0.14 lattice_0.20-41 [75] purrr_0.3.4 treeio_1.15.6 [77] patchwork_1.1.1 CodeDepends_0.6.5 [79] labeling_0.4.2 cowplot_1.1.1 [81] bit_4.0.4 tidyselect_1.1.0 [83] magrittr_2.0.1 bookdown_0.21 [85] R6_2.5.0 generics_0.1.0 [87] DelayedArray_0.17.10 DBI_1.1.1 [89] pillar_1.5.1 withr_2.4.1 [91] mgcv_1.8-34 RCurl_1.98-1.3 [93] tibble_3.1.0 dir.expiry_0.99.4 [95] crayon_1.4.1 utf8_1.2.1 [97] rmarkdown_2.7 viridis_0.5.1 [99] grid_4.1.0 blob_1.2.1 [101] vegan_2.5-7 digest_0.6.27 [103] tidyr_1.1.3 munsell_0.5.0 [105] DirichletMultinomial_1.33.2 beeswarm_0.3.1 [107] viridisLite_0.3.0 vipor_0.4.5 [109] bslib_0.2.4 "],["microbiome-diversity.html", "Chapter 6 Microbiome Diversity 6.1 Alpha diversity 6.2 Beta diversity 6.3 Community comparisons [TODO combine with the material above for simplicity?] 6.4 Further reading Session Info", " Chapter 6 Microbiome Diversity .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } Diversity estimates are a central topic in microbiome data analysis. There are three commonly employed levels of diversity measurements, which are trying to put a number on different aspects of the questions associated with diversity (Whittaker 1960). Many different ways for estimating such diversity measurements have been described in the literature. Which measurement is best or applicable for your samples, is not the aim of the following sections. library(mia) data(&quot;GlobalPatterns&quot;) se &lt;- GlobalPatterns 6.1 Alpha diversity Alpha diversity, also sometimes interchangeably used with the term species diversity, summarizes the distribution of species abundances in a given sample into a single number that depends on species richness and evenness. Diversity indices measure the overall community heterogeneity. A number of ecological diversity measures are available. The Hill coefficient combines many standard indices into a single equation that provides observed richness, inverse Simpson, and Shannon diversity, and generalized diversity as special cases. In general, diversity increases together with increasing richness and evenness. Sometimes richness, evenness, and dominance are considered to be variants of alpha diversity. Richness refers to the total number of species in a community (sample). The simplest richness index is the number of observed species (observed richness). Assuming limited sampling from the community, however, this may underestimate the true species richness. Several estimators are available, including for instance ACE (reference?) and Chao1 (reference?). Richness estimates are unaffected by species abundances. Evenness focuses on species abundances, and can thus complement the number of species. A typical evenness index is the Pielou’s evenness, which is Shannon diversity normalized by the observed richness. Dominance indices are in general negatively correlated with diversity, and sometimes used in ecological literature. High dominance is obtained when one or few species have a high share of the total species abundance in the community. 6.1.1 Estimating alpha diversity Alpha diversity can be estimated with wrapper functions that interact with other packages implementing the calculation, such as vegan (Oksanen et al. 2020). The main function, estimateDiversity, calculates the selected diversity index based on the selected assay data and adds it to the colData of the SummarizedExperiment under the given column name. se &lt;- mia::estimateDiversity(se, abund_values = &quot;counts&quot;, index = &quot;shannon&quot;, name = &quot;shannon&quot;) head(colData(se)$shannon) ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr ## 6.577 6.777 6.498 3.828 3.288 4.289 This allows the values to analyzed directly from the colData, for example by plotting them using plotColData from the scater package (McCarthy et al. 2020). library(scater) plotColData(se, &quot;shannon&quot;, &quot;SampleType&quot;, colour_by = &quot;SampleType&quot;) + theme(axis.text.x = element_text(angle=45,hjust=1)) Figure 6.1: Shannon diversity estimates plotted grouped by sample type. All available indices will be calculated by default… se &lt;- estimateDiversity(se) .. and a plot comparing them can then be constructed directly. plots &lt;- lapply(c(&quot;shannon&quot;,&quot;gini_simpson&quot;,&quot;inverse_simpson&quot;, &quot;coverage&quot;, &quot;fisher&quot;), plotColData, object = se, x = &quot;SampleType&quot;, colour_by = &quot;SampleType&quot;) plots &lt;- lapply(plots,&quot;+&quot;, theme(axis.text.x = element_text(angle=45,hjust=1))) ggpubr::ggarrange(plotlist = plots, nrow = 2, ncol = 3, common.legend = TRUE, legend = &quot;right&quot;) 6.2 Beta diversity Where alpha diversity focuses on community variation within a community (sample), beta diversity quantifies (dis-)similarites between communities (samples). Some of the most popular beta diversity measures in microbiome research include Bray-Curtis index (for compositional data), Jaccard index (for presence / absence data, ignoring abundance information), Aitchison distance (Euclidean distance for clr transformed abundances, aiming to avoid the compositionality bias), and the Unifrac distances (that take into account the phylogenetic tree information). Only some of the commonly used beta diversity measures are actual distances; this is a mathematically well-defined concept and many ecological beta diversity measures, such as Bray-Curtis index, are not proper distances. Therefore, the term dissimilarity or beta diversity is commonly used. Technically, beta diversities are usually represented as dist objects, which contain triangular data describing the distance between each pair of samples. These distances can be further subjected to ordination. Ordination is a common concept in ecology that aims to reduce the dimensionsionality of the data for further evaluation or visualization. Ordination techniques aim to capture as much of essential information in the data as possible in a lower dimensional representation. Dimension reduction is bound to loose information but the common ordination techniques aim to preserve relevant information of sample similarities in an optimal way, which is defined in different way by different methods. [TODO add references and/or link to ordination chapter instead?] Some of the most common ordination methods in microbiome research include Principal Component Analysis (PCA), metric and non-metric multi-dimensional scaling (MDS, NMDS), The MDS methods is also known as Principal Coordinates Analysis (PCoA). Other recently popular techniques include t-SNE and UMAP. 6.2.1 Explained variance The percentage of explained variance is typically shown for PCA ordination plots. This quantifies the proportion of overall variance in the data that is captured by the PCA axes, or how well the ordination axes reflect the original distances. Sometimes a similar measure is shown for MDS/PCoA. The interpretation is generally different, however, and hence we do not recommend using it. PCA is a special case of PCoA with Euclidean distances. With non-Euclidean dissimilarities PCoA uses a trick where the pointwise dissimilarities are first cast into similarities a Euclidean space (with some information loss i.e. stress) and then projected to the maximal variance axes. In this case, the maximal variance axes do not directly reflect the correspondence of the projected distances and original distances, as they do for PCA. In typical use cases, we would like to know how well the ordination reflects the original similarity structures; then the quantity of interest is the so-called “stress” function, which measures the difference in pairwise similarities between the data points in the original (high-dimensional) vs. projected (low-dimensional) space. Hence, we propose that for PCoA and other ordination methods, users would report relative stress (varies in the unit interval; the smaller the better). This can be calculated as shown below. For further examples, check the note from Huber lab. # Example data data(GlobalPatterns) # Data matrix (features x samples) x &lt;- GlobalPatterns x &lt;- transformCounts(x, method = &quot;relabundance&quot;) x &lt;- assay(x, &quot;relabundance&quot;) # Quantify dissimilarities in the original feature space library(vegan) d0 &lt;- as.matrix(vegdist(t(x), &quot;bray&quot;)) # PCoA Ordination pcoa &lt;- as.data.frame(cmdscale(d0, k = 2)) names(pcoa) &lt;- c(&quot;PCoA1&quot;, &quot;PCoA2&quot;) # Quantify dissimilarities in the ordination space dp &lt;- as.matrix(dist(pcoa)) # Calculate stress i.e. relative difference in the original and # projected dissimilarities stress &lt;- sum((dp - d0)^2)/sum(d0^2) Shepard plot visualizes the original versus projected (ordination) dissimilarities between the data points: ord &lt;- order(as.vector(d0)) df &lt;- data.frame(d0 = as.vector(d0)[ord], dmds = as.vector(dp)[ord]) library(ggplot2) ggplot(aes(x = d0, y = dmds), data=df) + geom_smooth() + geom_point() + labs(title = &quot;Shepard plot&quot;, x = &quot;Original distance&quot;, y = &quot;MDS distance&quot;, subtitle = paste(&quot;Stress:&quot;, round(stress, 2))) 6.2.2 Estimating beta diversity In the following examples dissimilarities are calculated by functions supplied to the FUN argument. This function can defined by the user. It must return a dist function, which can then be used to calculate reduced dimension either via ordination methods (such as MDS or NMDS), and the results can be stored in the reducedDim. This entire process is wrapped in the runMDS and runNMDS functions. se &lt;- runMDS(se, FUN = vegan::vegdist, name = &quot;MDS_BC&quot;, exprs_values = &quot;counts&quot;) Sample similarities can be visualized on a lower-dimensional display (typically 2D) using the plotReducedDim function in the scaterpackage. This provides also further tools to incorporate additional information using variations in colour, shape or size. # Create ggplot object p &lt;- plotReducedDim(se, &quot;MDS_BC&quot;, colour_by = &quot;SampleType&quot;) # Add explained variance for each axis e &lt;- attr(reducedDim(se, &quot;MDS_BC&quot;), &quot;eig&quot;); rel_eig &lt;- e/sum(e[e&gt;0]) p &lt;- p + labs(x = paste(&quot;PCoA 1 (&quot;, round(100 * rel_eig[[1]],1), &quot;%&quot;, &quot;)&quot;, sep = &quot;&quot;), y = paste(&quot;PCoA 2 (&quot;, round(100 * rel_eig[[2]],1), &quot;%&quot;, &quot;)&quot;, sep = &quot;&quot;)) print(p) Figure 6.2: MDS plot based on the Bray-Curtis distances on the GlobalPattern dataset. With additional tools from the ggplot2 universe, comparisons can be performed informing on the applicability to visualize sample similarities in a meaningful way. se &lt;- runMDS(se, FUN = vegan::vegdist, name = &quot;MDS_euclidean&quot;, method = &quot;euclidean&quot;, exprs_values = &quot;counts&quot;) se &lt;- runNMDS(se, FUN = vegan::vegdist, name = &quot;NMDS_BC&quot;) ## initial value 47.733208 ## iter 5 value 33.853364 ## iter 10 value 32.891200 ## final value 32.823570 ## converged se &lt;- runNMDS(se, FUN = vegan::vegdist, name = &quot;NMDS_euclidean&quot;, method = &quot;euclidean&quot;) ## initial value 31.882673 ## final value 31.882673 ## converged plots &lt;- lapply(c(&quot;MDS_BC&quot;,&quot;MDS_euclidean&quot;,&quot;NMDS_BC&quot;,&quot;NMDS_euclidean&quot;), plotReducedDim, object = se, colour_by = &quot;SampleType&quot;) ggpubr::ggarrange(plotlist = plots, nrow = 2, ncol = 2, common.legend = TRUE, legend = &quot;right&quot;) Figure 6.3: Comparison of MDS and NMDS plots based on the Bray-Curtis or euclidean distances on the GlobalPattern dataset. The UniFrac method is a special case, as it requires data on the relationship of features in form on a phylo tree. calculateUniFrac performs the calculation to return a dist object, which can again be used within runMDS. se &lt;- runMDS(se, FUN = calculateUniFrac, name = &quot;UniFrac&quot;, tree = rowTree(se), ntop = nrow(se), exprs_values = &quot;counts&quot;) plotReducedDim(se, &quot;UniFrac&quot;, colour_by = &quot;SampleType&quot;) Figure 6.4: UniFrac distances scaled by MDS of the GlobalPattern dataset. 6.2.3 Other ordination methods Other dimension reduction methods, such as PCA, t-SNE and UMAP are inherited directly from the scater package. se &lt;- runPCA(se, name = &quot;PCA&quot;, exprs_values = &quot;counts&quot;, ncomponents = 10) plotReducedDim(se, &quot;PCA&quot;, colour_by = &quot;SampleType&quot;) Figure 6.5: PCA plot on the GlobalPatterns data set containing sample from different sources. As mentioned before, applicability of the different methods depends on your sample set. FIXME: let us switch to UMAP for the examples? se &lt;- runTSNE(se, name = &quot;TSNE&quot;, exprs_values = &quot;counts&quot;, ncomponents = 3) plotReducedDim(se, &quot;TSNE&quot;, colour_by = &quot;SampleType&quot;, ncomponents = c(1:3)) Figure 6.6: t-SNE plot on the GlobalPatterns data set containing sample from different sources. 6.3 Community comparisons [TODO combine with the material above for simplicity?] A typical comparison of community composition starts with a visual comparison of the groups on a 2D ordination. Let us load an example data set: library(microbiomeDataSets) se.lahti &lt;- LahtiMData() Then we estimate relative abundances and MDS ordination based on Bray-Curtis (BC) dissimilarity between the groups, and visualize the results. se.lahti &lt;- relAbundanceCounts(se.lahti) se.lahti &lt;- runNMDS(se.lahti, FUN = vegan::vegdist, name = &quot;BC&quot;, nmdsFUN = &quot;monoMDS&quot;, exprs_values = &quot;relabundance&quot;, keep_dist = TRUE) plotReducedDim(se.lahti, &quot;BC&quot;, colour_by = &quot;group&quot;) No clear difference between the groups can be visually observed. 6.3.1 Testing differences in community composition between sample groups The permutational analysis of variance (PERMANOVA) (Anderson 2001) is a widely used non-parametric multivariate method that can be used to estimate the actual statistical significance of differences in the observed community composition between two groups of samples. PERMANOVA evaluates the hypothesis that the centroids and dispersion of the community are equivalent between the compared groups. A small p-value indicates that the compared groups have, on average, a different community composition. This method is implemented in the vegan package (function adonis). library(vegan) permanova &lt;- vegan::adonis(t(assay(se.lahti,&quot;relabundance&quot;)) ~ group, data = colData(se.lahti), permutations = 9999) # P-value print(as.data.frame(permanova$aov.tab)[&quot;group&quot;, &quot;Pr(&gt;F)&quot;]) ## [1] 0.27 In this case, the community composition is not significantly different between the groups. Let us visualize the model coefficients for species that exhibit the largest differences between the groups. This gives some insights into how the groups tend to differ from each other in terms of community composition. coef &lt;- coefficients(permanova)[&quot;group1&quot;,] top.coef &lt;- sort(head(coef[rev(order(abs(coef)))],20)) ggplot(data.frame(x = top.coef, y = factor(names(top.coef), unique(names(top.coef)))), aes(x = x, y = y)) + geom_bar(stat=&quot;identity&quot;) + labs(x=&quot;&quot;,y=&quot;&quot;,title=&quot;Top Taxa&quot;) + theme_bw() In the above example, the largest differences between the two groups can be attributed to Bacteroides intestinalis (elevated in the first group) and Faecalibacterium prausnitzii (elevated in the second group), and many other co-varying species. 6.3.2 Checking the homogeneity condition It is important to note that the application of PERMANOVA assumes homogeneous group dispersions (variances). This can be tested with the PERMDISP2 method (Anderson 2006). anova(vegan::betadisper(attr(reducedDim(se.lahti,&quot;BC&quot;),&quot;dist&quot;), colData(se.lahti)$group)) ## Analysis of Variance Table ## ## Response: Distances ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Groups 1 0.000 0.00002 0 0.95 ## Residuals 42 0.158 0.00376 In our example, the groups have similar dispersions, and PERMANOVA is an appropriate choice for comparing community compositions. 6.4 Further reading In certain settings beta diversities might be used to group samples without prior knowledge. For this we want to point to excellent resources on how to extract information from the clusters. See also community typing. Session Info View session info R Under development (unstable) (2021-04-05 r80145) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.2 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets [8] methods base other attached packages: [1] microbiomeDataSets_0.99.5 MultiAssayExperiment_1.17.20 [3] vegan_2.5-7 lattice_0.20-41 [5] permute_0.9-5 scater_1.19.11 [7] ggplot2_3.3.3 mia_0.99.10 [9] TreeSummarizedExperiment_1.99.11 Biostrings_2.59.2 [11] XVector_0.31.1 SingleCellExperiment_1.13.14 [13] SummarizedExperiment_1.21.3 Biobase_2.51.0 [15] GenomicRanges_1.43.4 GenomeInfoDb_1.27.10 [17] IRanges_2.25.7 S4Vectors_0.29.15 [19] BiocGenerics_0.37.1 MatrixGenerics_1.3.1 [21] matrixStats_0.58.0 BiocStyle_2.19.2 [23] rebook_1.1.19 BiocManager_1.30.12 loaded via a namespace (and not attached): [1] readxl_1.3.1 backports_1.2.1 [3] AnnotationHub_2.99.0 BiocFileCache_1.99.1 [5] splines_4.1.0 BiocParallel_1.25.5 [7] digest_0.6.27 htmltools_0.5.1.1 [9] viridis_0.5.1 fansi_0.4.2 [11] magrittr_2.0.1 memoise_2.0.0 [13] ScaledMatrix_0.99.2 cluster_2.1.1 [15] DECIPHER_2.19.2 openxlsx_4.2.3 [17] colorspace_2.0-0 rappdirs_0.3.3 [19] blob_1.2.1 haven_2.3.1 [21] xfun_0.22 dplyr_1.0.5 [23] crayon_1.4.1 RCurl_1.98-1.3 [25] jsonlite_1.7.2 graph_1.69.0 [27] ape_5.4-1 glue_1.4.2 [29] gtable_0.3.0 zlibbioc_1.37.0 [31] DelayedArray_0.17.10 car_3.0-10 [33] BiocSingular_1.7.2 abind_1.4-5 [35] scales_1.1.1 DBI_1.1.1 [37] rstatix_0.7.0 Rcpp_1.0.6 [39] xtable_1.8-4 viridisLite_0.3.0 [41] foreign_0.8-81 bit_4.0.4 [43] rsvd_1.0.3 httr_1.4.2 [45] dir.expiry_0.99.4 ellipsis_0.3.1 [47] pkgconfig_2.0.3 XML_3.99-0.6 [49] farver_2.1.0 scuttle_1.1.18 [51] dbplyr_2.1.1 CodeDepends_0.6.5 [53] sass_0.3.1 utf8_1.2.1 [55] AnnotationDbi_1.53.1 later_1.1.0.1 [57] tidyselect_1.1.0 labeling_0.4.2 [59] rlang_0.4.10 BiocVersion_3.13.1 [61] munsell_0.5.0 cellranger_1.1.0 [63] tools_4.1.0 cachem_1.0.4 [65] ExperimentHub_1.99.0 DirichletMultinomial_1.33.2 [67] generics_0.1.0 RSQLite_2.2.5 [69] broom_0.7.6 evaluate_0.14 [71] stringr_1.4.0 fastmap_1.1.0 [73] yaml_2.2.1 knitr_1.31 [75] bit64_4.0.5 zip_2.1.1 [77] purrr_0.3.4 KEGGREST_1.31.1 [79] nlme_3.1-152 sparseMatrixStats_1.3.7 [81] mime_0.10 debugme_1.1.0 [83] compiler_4.1.0 png_0.1-7 [85] interactiveDisplayBase_1.29.0 beeswarm_0.3.1 [87] filelock_1.0.2 curl_4.3 [89] ggsignif_0.6.1 tibble_3.1.0 [91] bslib_0.2.4 stringi_1.5.3 [93] highr_0.8 forcats_0.5.1 [95] Matrix_1.3-2 vctrs_0.3.7 [97] pillar_1.5.1 lifecycle_1.0.0 [99] jquerylib_0.1.3 BiocNeighbors_1.9.4 [101] data.table_1.14.0 cowplot_1.1.1 [103] bitops_1.0-6 irlba_2.3.3 [105] httpuv_1.5.5 R6_2.5.0 [107] promises_1.2.0.1 bookdown_0.21 [109] gridExtra_2.3 rio_0.5.26 [111] vipor_0.4.5 codetools_0.2-18 [113] MASS_7.3-53.1 assertthat_0.2.1 [115] withr_2.4.1 GenomeInfoDbData_1.2.4 [117] mgcv_1.8-34 hms_1.0.0 [119] grid_4.1.0 beachmat_2.7.7 [121] tidyr_1.1.3 rmarkdown_2.7 [123] DelayedMatrixStats_1.13.5 carData_3.0-4 [125] Rtsne_0.15 ggpubr_0.4.0 [127] shiny_1.6.0 ggbeeswarm_0.6.0 "],["microbiome-community.html", "Chapter 7 Microbiome Community 7.1 Community composition 7.2 Community typing Session Info", " Chapter 7 Microbiome Community .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 7.1 Community composition Heatmaps 7.2 Community typing Community State Types (CST) Dirichlet Multinomial Mixtures (DMM) Session Info View session info R Under development (unstable) (2021-04-05 r80145) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.2 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] BiocStyle_2.19.2 rebook_1.1.19 BiocManager_1.30.12 loaded via a namespace (and not attached): [1] graph_1.69.0 knitr_1.31 magrittr_2.0.1 [4] BiocGenerics_0.37.1 R6_2.5.0 rlang_0.4.10 [7] stringr_1.4.0 tools_4.1.0 parallel_4.1.0 [10] xfun_0.22 jquerylib_0.1.3 htmltools_0.5.1.1 [13] CodeDepends_0.6.5 yaml_2.2.1 digest_0.6.27 [16] bookdown_0.21 dir.expiry_0.99.4 codetools_0.2-18 [19] sass_0.3.1 evaluate_0.14 rmarkdown_2.7 [22] stringi_1.5.3 compiler_4.1.0 bslib_0.2.4 [25] filelock_1.0.2 XML_3.99-0.6 stats4_4.1.0 [28] jsonlite_1.7.2 "],["differential-abundance.html", "Chapter 8 Differential abundance Session Info", " Chapter 8 Differential abundance .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } A number of methods for differential abundance analysis are available, and reviewed elsewhere. Session Info View session info R Under development (unstable) (2021-04-05 r80145) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.2 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] BiocStyle_2.19.2 rebook_1.1.19 BiocManager_1.30.12 loaded via a namespace (and not attached): [1] graph_1.69.0 knitr_1.31 magrittr_2.0.1 [4] BiocGenerics_0.37.1 R6_2.5.0 rlang_0.4.10 [7] stringr_1.4.0 tools_4.1.0 parallel_4.1.0 [10] xfun_0.22 jquerylib_0.1.3 htmltools_0.5.1.1 [13] CodeDepends_0.6.5 yaml_2.2.1 digest_0.6.27 [16] bookdown_0.21 dir.expiry_0.99.4 codetools_0.2-18 [19] sass_0.3.1 evaluate_0.14 rmarkdown_2.7 [22] stringi_1.5.3 compiler_4.1.0 bslib_0.2.4 [25] filelock_1.0.2 XML_3.99-0.6 stats4_4.1.0 [28] jsonlite_1.7.2 "],["microbiome-timeseries.html", "Chapter 9 Microbiome time series 9.1 Stability 9.2 Tipping elements Session Info", " Chapter 9 Microbiome time series .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } This chapter focuses on the exploration of microbiome time series. 9.1 Stability 9.2 Tipping elements Session Info View session info R Under development (unstable) (2021-04-05 r80145) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.2 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] BiocStyle_2.19.2 rebook_1.1.19 BiocManager_1.30.12 loaded via a namespace (and not attached): [1] graph_1.69.0 knitr_1.31 magrittr_2.0.1 [4] BiocGenerics_0.37.1 R6_2.5.0 rlang_0.4.10 [7] stringr_1.4.0 tools_4.1.0 parallel_4.1.0 [10] xfun_0.22 jquerylib_0.1.3 htmltools_0.5.1.1 [13] CodeDepends_0.6.5 yaml_2.2.1 digest_0.6.27 [16] bookdown_0.21 dir.expiry_0.99.4 codetools_0.2-18 [19] sass_0.3.1 evaluate_0.14 rmarkdown_2.7 [22] stringi_1.5.3 compiler_4.1.0 bslib_0.2.4 [25] filelock_1.0.2 XML_3.99-0.6 stats4_4.1.0 [28] jsonlite_1.7.2 "],["multitable.html", "Chapter 10 Representation of multiple data tables 10.1 Assay data 10.2 Alternative experiments 10.3 MultiAssayExperiments Session Info", " Chapter 10 Representation of multiple data tables .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } Microbiome data can be part of multiomics experiments and analysis strategies and we want to outline the understanding in which we think the packages explained and used in this book relate to these experiment layouts using the TreeSummarizedExperiment and classes beyond. Many microbiome experiments include multiple versions and types of data generated independently or derived from each other through transformation or agglomeration. We start by providing recommendations on how to represent different varieties of multi-table data within the TreeSummarizedExperiment class. The options and recommendations are summarized in Table 10.1. 10.1 Assay data The original count-based taxonomic abundance tables may have different transformations, such as logarithmic, Centered Log-Ratio (CLR), or relative abundance. These are typically stored in assays. library(mia) data(GlobalPatterns) se &lt;- GlobalPatterns assays(se) ## List of length 1 ## names(1): counts As an example the relative abundance is calculated. se &lt;- relAbundanceCounts(se) assays(se) ## List of length 2 ## names(2): counts relabundance Here the dimension of the count data remains unchanged. This is actually a requirement for any SummarizedExperiment object. 10.2 Alternative experiments Alternative experiments differ from transformations as they can contain complementary data, which is no longer tied to the same dimensions as the assay data. However, the number of samples (columns) must be the same, however. This can come into play for instance when one has taxonomic abundance profiles quantified with different measurement technologies, such as phylogenetic microarrays, amplicon sequencing, or metagenomic sequencing. Such alternative experiments that concern the same samples can be stored as Separate assays assuming that the taxonomic information can be mapped between feature directly 1:1; or data in the altExp slot of the TreeSummarizedExperiment, if the feature dimensions differ. Each element of the altExp slot is a SummarizedExperiment or an object from a derived class with independent feature data. As an example, we show how to store taxonomic abundance tables agglomerated at different taxonomic levels. However, the data could as well originate from entirely different measurement sources as long as the samples are matched. # Agglomerate the data to Phylym level se.phylum &lt;- agglomerateByRank(se, &quot;Phylum&quot;) # both have the same number of columns (samples) dim(se) ## [1] 19216 26 dim(se.phylum) ## [1] 67 26 # Add the new table as an alternative experiment altExp(se, &quot;Phylum&quot;) &lt;- se.phylum altExpNames(se) ## [1] &quot;Phylum&quot; # Pick a sample subset: this acts on both altExp and assay data se[,1:10] ## class: TreeSummarizedExperiment ## dim: 19216 10 ## metadata(0): ## assays(2): counts relabundance ## rownames(19216): 549322 522457 ... 200359 271582 ## rowData names(7): Kingdom Phylum ... Genus Species ## colnames(10): CL3 CC1 ... M31Tong M11Tong ## colData names(7): X.SampleID Primer ... SampleType Description ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(1): Phylum ## rowLinks: a LinkDataFrame (19216 rows) ## rowTree: 1 phylo tree(s) (19216 leaves) ## colLinks: NULL ## colTree: NULL dim(altExp(se[,1:10],&quot;Phylum&quot;)) ## [1] 67 10 For more details of altExp have a look at the Intro vignette of the SingleCellExperiment package (Lun and Risso 2020). 10.3 MultiAssayExperiments Multiple experiments relate to complementary measurement types, such as transcriptomic or metabolomic profiling of the microbiome or the host. Multiple experiments can be represented using the same options as alternative experiments, or by using the MultiAssayExperiment class (Ramos and Waldron 2020). Depending on how the datasets relate to each other the data can be stored as: Separate altExp if the samples can be matched directly 1:1; or As MultiAssayExperiment objects, in which the connections between sample are defined through a sampleMap. Each element on the experimentsList of an MultiAssayExperiment is matrix or matrix-like object including SummarizedExperiment objects, and the number of samples can differ between the elements. #TODO: Find the right dataset to explain a non 1:1 sample relationship For information have a look at the intro vignette of the MultiAssayExperiment package. Table 10.1: Recommended options for storing multiple data tables in microbiome studies The assays are best suited for data transformations (one-to-one match between samples and columns across the assays). The alternative experiments are particularly suitable for alternative versions of the data that is of same type but may have a different number of features (e.g. taxonomic groups); this is for instance the case with taxonomic abundance tables agglomerated at different levels (e.g. genus vs. phyla) or alternative profiling technologies (e.g. amplicon sequencing vs. shallow shotgun metagenomics). For alternative experiments one-to-one match between samples (cols) is required but the alternative experiment tables can have different numbers of features (rows). Finally, elements of the MultiAssayExperiment provide the most flexible way to incorporate multi-omic data tables with flexible numbers of samples and features. We recommend these conventions as the basis for methods development and application in microbiome studies. Option Rows (features) Cols (samples) Recommended assays match match Data transformations altExp free match Alternative experiments MultiAssay free free (mapping) Multi-omic experiments Session Info View session info R Under development (unstable) (2021-04-05 r80145) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.2 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets [8] methods base other attached packages: [1] mia_0.99.10 TreeSummarizedExperiment_1.99.11 [3] Biostrings_2.59.2 XVector_0.31.1 [5] SingleCellExperiment_1.13.14 SummarizedExperiment_1.21.3 [7] Biobase_2.51.0 GenomicRanges_1.43.4 [9] GenomeInfoDb_1.27.10 IRanges_2.25.7 [11] S4Vectors_0.29.15 BiocGenerics_0.37.1 [13] MatrixGenerics_1.3.1 matrixStats_0.58.0 [15] BiocStyle_2.19.2 rebook_1.1.19 [17] BiocManager_1.30.12 loaded via a namespace (and not attached): [1] nlme_3.1-152 bitops_1.0-6 [3] DirichletMultinomial_1.33.2 bit64_4.0.5 [5] filelock_1.0.2 tools_4.1.0 [7] bslib_0.2.4 vegan_2.5-7 [9] utf8_1.2.1 R6_2.5.0 [11] irlba_2.3.3 vipor_0.4.5 [13] mgcv_1.8-34 DBI_1.1.1 [15] colorspace_2.0-0 permute_0.9-5 [17] gridExtra_2.3 tidyselect_1.1.0 [19] bit_4.0.4 compiler_4.1.0 [21] graph_1.69.0 BiocNeighbors_1.9.4 [23] DelayedArray_0.17.10 bookdown_0.21 [25] sass_0.3.1 scales_1.1.1 [27] stringr_1.4.0 digest_0.6.27 [29] rmarkdown_2.7 scater_1.19.11 [31] pkgconfig_2.0.3 htmltools_0.5.1.1 [33] sparseMatrixStats_1.3.7 fastmap_1.1.0 [35] rlang_0.4.10 RSQLite_2.2.5 [37] DelayedMatrixStats_1.13.5 jquerylib_0.1.3 [39] generics_0.1.0 jsonlite_1.7.2 [41] BiocParallel_1.25.5 dplyr_1.0.5 [43] RCurl_1.98-1.3 magrittr_2.0.1 [45] BiocSingular_1.7.2 GenomeInfoDbData_1.2.4 [47] scuttle_1.1.18 Matrix_1.3-2 [49] Rcpp_1.0.6 ggbeeswarm_0.6.0 [51] munsell_0.5.0 fansi_0.4.2 [53] DECIPHER_2.19.2 viridis_0.5.1 [55] ape_5.4-1 lifecycle_1.0.0 [57] stringi_1.5.3 yaml_2.2.1 [59] MASS_7.3-53.1 debugme_1.1.0 [61] zlibbioc_1.37.0 blob_1.2.1 [63] grid_4.1.0 crayon_1.4.1 [65] dir.expiry_0.99.4 lattice_0.20-41 [67] splines_4.1.0 beachmat_2.7.7 [69] CodeDepends_0.6.5 knitr_1.31 [71] pillar_1.5.1 codetools_0.2-18 [73] ScaledMatrix_0.99.2 XML_3.99-0.6 [75] glue_1.4.2 evaluate_0.14 [77] vctrs_0.3.7 tidyr_1.1.3 [79] gtable_0.3.0 purrr_0.3.4 [81] assertthat_0.2.1 cachem_1.0.4 [83] ggplot2_3.3.3 xfun_0.22 [85] rsvd_1.0.3 viridisLite_0.3.0 [87] tibble_3.1.0 memoise_2.0.0 [89] beeswarm_0.3.1 cluster_2.1.1 [91] ellipsis_0.3.1 "],["example-data.html", "Chapter 11 Example data 11.1 Package data Session Info", " Chapter 11 Example data .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 11.1 Package data The datasets in mia are conversions of the phyloseq datasets GlobalPatterns enterotype, esophagus and soilrep. 11.1.1 GlobalPatterns library(mia) # Example how to load data data(&quot;GlobalPatterns&quot;) GlobalPatterns ## class: TreeSummarizedExperiment ## dim: 19216 26 ## metadata(0): ## assays(1): counts ## rownames(19216): 549322 522457 ... 200359 271582 ## rowData names(7): Kingdom Phylum ... Genus Species ## colnames(26): CL3 CC1 ... Even2 Even3 ## colData names(7): X.SampleID Primer ... SampleType Description ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: a LinkDataFrame (19216 rows) ## rowTree: 1 phylo tree(s) (19216 leaves) ## colLinks: NULL ## colTree: NULL 11.1.2 Enterotype 11.1.3 Esophagus 11.1.4 Soilrep Session Info View session info R Under development (unstable) (2021-04-05 r80145) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.2 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] parallel stats4 stats graphics grDevices utils datasets [8] methods base other attached packages: [1] mia_0.99.10 TreeSummarizedExperiment_1.99.11 [3] Biostrings_2.59.2 XVector_0.31.1 [5] SingleCellExperiment_1.13.14 SummarizedExperiment_1.21.3 [7] Biobase_2.51.0 GenomicRanges_1.43.4 [9] GenomeInfoDb_1.27.10 IRanges_2.25.7 [11] S4Vectors_0.29.15 BiocGenerics_0.37.1 [13] MatrixGenerics_1.3.1 matrixStats_0.58.0 [15] BiocStyle_2.19.2 rebook_1.1.19 [17] BiocManager_1.30.12 loaded via a namespace (and not attached): [1] nlme_3.1-152 bitops_1.0-6 [3] DirichletMultinomial_1.33.2 bit64_4.0.5 [5] filelock_1.0.2 tools_4.1.0 [7] bslib_0.2.4 vegan_2.5-7 [9] utf8_1.2.1 R6_2.5.0 [11] irlba_2.3.3 vipor_0.4.5 [13] mgcv_1.8-34 DBI_1.1.1 [15] colorspace_2.0-0 permute_0.9-5 [17] gridExtra_2.3 tidyselect_1.1.0 [19] bit_4.0.4 compiler_4.1.0 [21] graph_1.69.0 BiocNeighbors_1.9.4 [23] DelayedArray_0.17.10 bookdown_0.21 [25] sass_0.3.1 scales_1.1.1 [27] stringr_1.4.0 digest_0.6.27 [29] rmarkdown_2.7 scater_1.19.11 [31] pkgconfig_2.0.3 htmltools_0.5.1.1 [33] sparseMatrixStats_1.3.7 fastmap_1.1.0 [35] rlang_0.4.10 RSQLite_2.2.5 [37] DelayedMatrixStats_1.13.5 jquerylib_0.1.3 [39] generics_0.1.0 jsonlite_1.7.2 [41] BiocParallel_1.25.5 dplyr_1.0.5 [43] RCurl_1.98-1.3 magrittr_2.0.1 [45] BiocSingular_1.7.2 GenomeInfoDbData_1.2.4 [47] scuttle_1.1.18 Matrix_1.3-2 [49] Rcpp_1.0.6 ggbeeswarm_0.6.0 [51] munsell_0.5.0 fansi_0.4.2 [53] DECIPHER_2.19.2 viridis_0.5.1 [55] ape_5.4-1 lifecycle_1.0.0 [57] stringi_1.5.3 yaml_2.2.1 [59] MASS_7.3-53.1 debugme_1.1.0 [61] zlibbioc_1.37.0 blob_1.2.1 [63] grid_4.1.0 crayon_1.4.1 [65] dir.expiry_0.99.4 lattice_0.20-41 [67] splines_4.1.0 beachmat_2.7.7 [69] CodeDepends_0.6.5 knitr_1.31 [71] pillar_1.5.1 codetools_0.2-18 [73] ScaledMatrix_0.99.2 XML_3.99-0.6 [75] glue_1.4.2 evaluate_0.14 [77] vctrs_0.3.7 tidyr_1.1.3 [79] gtable_0.3.0 purrr_0.3.4 [81] assertthat_0.2.1 cachem_1.0.4 [83] ggplot2_3.3.3 xfun_0.22 [85] rsvd_1.0.3 viridisLite_0.3.0 [87] tibble_3.1.0 memoise_2.0.0 [89] beeswarm_0.3.1 cluster_2.1.1 [91] ellipsis_0.3.1 "],["function-ref.html", "Chapter 12 Function reference 12.1 Objects 12.2 Reduced dimension (PCA, t-SNE, UMAP, MDS, etc) 12.3 Plotting", " Chapter 12 Function reference 12.1 Objects Function name package man page link SingleCellExperiment SingleCellExperiment ?SingleCellExperiment BioC TreeSummarizedExperiment TreeSummarizedExperiment ?TreeSummarizedExperiment BioC 12.2 Reduced dimension (PCA, t-SNE, UMAP, MDS, etc) Function name package man page link reducedDim SingleCellExperiment ?reducedDims BioC reducedDims SingleCellExperiment ?reducedDims BioC plotReducedDim scater ?plotReducedDim BioC 12.3 Plotting Function name package man page link plotColData scater ?plotColData BioC plotRowData scater ?plotRowData BioC plotExpression scater ?plotExpression BioC plotReducedDim scater ?plotReducedDim BioC plotRowTree miaViz ?plotTree GitHub plotColTree miaViz ?plotTree GitHub plotRowGraph miaViz ?plotGraph GitHub plotColGraph miaViz ?plotGraph GitHub plotAbundance miaViz ?plotAbundance GitHub plotPrevalence miaViz ?plotPrevalence GitHub plotSeries miaViz ?plotSeries GitHub "],["bibliography.html", "Bibliography", " Bibliography Anderson, Marti J. 2001. “A New Method for Non-Parametric Multivariate Analysis of Variance.” Austral Ecology 26 (1): 32–46. https://doi.org/10.1111/j.1442-9993.2001.01070.pp.x. ———. 2006. “Distance-Based Tests for Homogeneity of Multivariate Dispersions.” Biometrics 62: 245–53. https://doi.org/10.1111/j.1541-0420.2005.00440.x. Callahan, Benjamin, Paul McMurdie, and Susan Holmes. 2020. Dada2: Accurate, High-Resolution Sample Inference from Amplicon Sequencing Data. http://benjjneb.github.io/dada2/. Huang, Ruizhu. 2020. TreeSummarizedExperiment: A S4 Class for Data with Tree Structures. Lun, Aaron, and Davide Risso. 2020. SingleCellExperiment: S4 Classes for Single Cell Data. McCarthy, Davis, Kieran Campbell, Aaron Lun, and Quin Wills. 2020. Scater: Single-Cell Analysis Toolkit for Gene Expression Data in r. http://bioconductor.org/packages/scater/. Oksanen, Jari, F. Guillaume Blanchet, Michael Friendly, Roeland Kindt, Pierre Legendre, Dan McGlinn, Peter R. Minchin, et al. 2020. Vegan: Community Ecology Package. https://CRAN.R-project.org/package=vegan. Ramos, Marcel, and Levi Waldron. 2020. MultiAssayExperiment: Software for the Integration of Multi-Omics Experiments in Bioconductor. http://waldronlab.io/MultiAssayExperiment/. Whittaker, R. H. 1960. “Vegetation of the Siskiyou Mountains, Oregon and California.” Ecological Monographs 30 (3): 279–338. https://doi.org/https://doi.org/10.2307/1943563. Wright, Erik. 2020. DECIPHER: Tools for Curating, Analyzing, and Manipulating Biological Sequences. "]]
