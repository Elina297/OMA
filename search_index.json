[["index.html", "Orchestrating Microbiome Analysis Welcome", " Orchestrating Microbiome Analysis Authors: Leo Lahti [aut], Sudarshan Shetty [aut], Felix GM Ernst [aut, cre] Version: 0.98.9 Modified: 2021-09-10 Compiled: 2021-10-18 Environment: R version 4.1.1 (2021-08-10), Bioconductor 3.14 License: CC BY-NC-SA 3.0 US Copyright: Source: https://github.com/microbiome/OMA Welcome You are reading the online book, Orchestrating Microbiome Analysis with R and Bioconductor (Lahti et al. 2021), where we walk through common strategies and workflows in microbiome data science. The book shows through concrete examples how you can take advantage of the latest developments in R/Bioconductor for the manipulation, analysis, and reproducible reporting of hierarchical and heterogeneous microbiome profiling data sets. The book was borne out of necessity, while updating microbiome analysis tools to work with Bioconductor classes that provide support for multi-modal data collections. Many of these techniques are generic and widely applicable in other contexts as well. This work has been heavily influenced by other similar resources, in particular the Orchestrating Single-Cell Analysis with Bioconductor (R. A. Amezquita et al. 2020), phyloseq tutorials (B. J. Callahan et al. 2016) and microbiome tutorials (Shetty and Lahti 2019). This book extends these resources to teach the grammar of Bioconductor workflows in the context of microbiome data science. As such, it supports the adoption of general skills in the analysis of large, hierarchical, and multi-modal data collections. We focus on microbiome analysis tools, including entirely new, partially updated as well as previously established methods. This online resource and its associated ecosystem of microbiome data science tools are a result of a community-driven development process, and welcoming new contributors. Several individuals have contributed methods, workflows and improvements as acknowledged in the Introduction. You can find more information on how to find us online and join the developer community through the project homepage at microbiome.github.io. This online resource has been written in RMarkdown with the bookdown R package. The material is free to use with the Creative Commons Attribution-NonCommercial 3.0 License. Bibliography "],["intro.html", "Chapter 1 Introduction", " Chapter 1 Introduction .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } This work - Orchestrating Microbiome Analysis with R and Bioconductor (Lahti et al. 2021) - contributes novel methods and educational resources for microbiome data science. It aims to teach the grammar of Bioconductor workflows in the context of microbiome data science. We show through concrete examples how to use the latest developments and data analytical strategies in R/Bioconductor for the manipulation, analysis, and reproducible reporting of hierarchical, heterogeneous, and multi-modal microbiome profiling data. The data science methodology is tightly integrated with the broader R/Bioconductor ecosystem that focuses on the development of of high-quality open research software for life sciences (Gentleman et al. (2004), Huber et al. (2015)). The support for modularity and interoperability is a key to efficient resource sharing and collaborative development both within and across research fields. The central data infrastructure, the SummarizedExperiment data container and its derivatives, have already been widely adopted in microbiome research, single cell sequencing, and in other fields, allowing a rapid adoption and extensions of emerging data science techniques across application domains. We assume that the reader is already familiar with R programming. For references and tips on introductory material for R and Bioconductor, see Chapter 12. This online resource and its associated ecosystem of microbiome data science tools are a result of a community-driven development process, and welcoming new users and contributors. You can find more information on how to find us online and join the developer community through the project homepage at microbiome.github.io. The book is organized into three parts. We start by introducing the material and link to further resources for learning R and Bioconductor. We describe the key data infrastructure, the TreeSummarizedExperiment class that provides a container for microbiome data, and how to get started by loading microbiome data set in the context of this new framework. The second section, Focus Topics, covers the common steps in microbiome data analysis, beginning with the most common steps and progressing to more specialized methods in subsequent sections. Third, Workflows, provides case studies for the various datasets used throughout the book. Finally, Appendix, links to further resources and acknowledgments. Bibliography "],["containers.html", "Chapter 2 Microbiome Data 2.1 Data science framework 2.2 Data containers 2.3 Loading experimental microbiome data 2.4 Demonstration data Session Info", " Chapter 2 Microbiome Data .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 2.1 Data science framework The building blocks of the framework are data container (SummarizedExperiment and its derivatives), packages from various developers using the TreeSE container, open demonstration data sets, in a separate chapter 2.4, and online tutorials including this online book as well as the various package vignettes and other material. 2.2 Data containers SummarizedExperiment (SE) is a generic and highly optimized container for complex data structures. It has become a common choice for analysing various types of biomedical profiling data, such as RNAseq, ChIp-Seq, microarrays, flow cytometry, proteomics, and single-cell sequencing. TreeSummarizedExperiment (TreeSE) was developed as an extension to incorporate hierarchical information (such as phylogenetic trees and sample hierarchies) and reference sequences. MultiAssayExperiment (MAE) provides an organized way to bind several different data structures together in a single object. For example, we can bind microbiome data (in TreeSE format) with metabolomic profiling data (in SE) format, with shared sample metadata. This is convenient and robust for instance in subsetting and other data manipulation tasks. Microbiome data can be part of multiomics experiments and analysis strategies and we want to outline the understanding in which we think the packages explained and used in this book relate to these experiment layouts using the TreeSummarizedExperiment and classes beyond. This section provides an introductions to these data containers. In microbiome data science, these containers link taxonomic abundance tables with rich side information on the features and samples. Taxonomic abundance data can be obtained by 16S rRNA amplicon or metagenomic sequencing, phylogenetic microarrays, or by other means. Many microbiome experiments include multiple versions and types of data generated independently or derived from each other through transformation or agglomeration. We start by providing recommendations on how to represent different varieties of multi-table data within the TreeSummarizedExperiment class. The options and recommendations are summarized in Table 2.1. 2.2.1 Assay data The original count-based taxonomic abundance tables may have different transformations, such as logarithmic, Centered Log-Ratio (CLR), or relative abundance. These are typically stored in assays. library(mia) data(GlobalPatterns, package=&quot;mia&quot;) se &lt;- GlobalPatterns assays(se) ## List of length 1 ## names(1): counts The assays slot contains the experimental data as count matrices. Multiple matrices can be stored the result of assays is actually a list of matrices. assays(se) ## List of length 1 ## names(1): counts Individual assays can be accessed via assay assay(se, &quot;counts&quot;)[1:5,1:7] ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr M11Plmr ## 549322 0 0 0 0 0 0 0 ## 522457 0 0 0 0 0 0 0 ## 951 0 0 0 0 0 0 1 ## 244423 0 0 0 0 0 0 0 ## 586076 0 0 0 0 0 0 0 To illustrate the use of multiple assays, the relative abundance data can be calcualted and stored along the original count data using relAbundanceCounts. se &lt;- relAbundanceCounts(se) assays(se) ## List of length 2 ## names(2): counts relabundance Now there are two assays available in the se object, counts and relabundance. assay(se, &quot;relabundance&quot;)[1:5,1:7] ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr M11Plmr ## 549322 0 0 0 0 0 0 0.000e+00 ## 522457 0 0 0 0 0 0 0.000e+00 ## 951 0 0 0 0 0 0 2.305e-06 ## 244423 0 0 0 0 0 0 0.000e+00 ## 586076 0 0 0 0 0 0 0.000e+00 Here the dimension of the count data remains unchanged. This is in fact a requirement for any SummarizedExperiment object. 2.2.2 colData colData contains data on the samples. colData(se) ## DataFrame with 26 rows and 7 columns ## X.SampleID Primer Final_Barcode Barcode_truncated_plus_T ## &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; ## CL3 CL3 ILBC_01 AACGCA TGCGTT ## CC1 CC1 ILBC_02 AACTCG CGAGTT ## SV1 SV1 ILBC_03 AACTGT ACAGTT ## M31Fcsw M31Fcsw ILBC_04 AAGAGA TCTCTT ## M11Fcsw M11Fcsw ILBC_05 AAGCTG CAGCTT ## ... ... ... ... ... ## TS28 TS28 ILBC_25 ACCAGA TCTGGT ## TS29 TS29 ILBC_26 ACCAGC GCTGGT ## Even1 Even1 ILBC_27 ACCGCA TGCGGT ## Even2 Even2 ILBC_28 ACCTCG CGAGGT ## Even3 Even3 ILBC_29 ACCTGT ACAGGT ## Barcode_full_length SampleType ## &lt;factor&gt; &lt;factor&gt; ## CL3 CTAGCGTGCGT Soil ## CC1 CATCGACGAGT Soil ## SV1 GTACGCACAGT Soil ## M31Fcsw TCGACATCTCT Feces ## M11Fcsw CGACTGCAGCT Feces ## ... ... ... ## TS28 GCATCGTCTGG Feces ## TS29 CTAGTCGCTGG Feces ## Even1 TGACTCTGCGG Mock ## Even2 TCTGATCGAGG Mock ## Even3 AGAGAGACAGG Mock ## Description ## &lt;factor&gt; ## CL3 Calhoun South Carolina Pine soil, pH 4.9 ## CC1 Cedar Creek Minnesota, grassland, pH 6.1 ## SV1 Sevilleta new Mexico, desert scrub, pH 8.3 ## M31Fcsw M3, Day 1, fecal swab, whole body study ## M11Fcsw M1, Day 1, fecal swab, whole body study ## ... ... ## TS28 Twin #1 ## TS29 Twin #2 ## Even1 Even1 ## Even2 Even2 ## Even3 Even3 2.2.3 rowData rowData contains data on the features of the analyzed samples. Of particular interest for the microbiome field this is used to store taxonomic information. rowData(se) ## DataFrame with 19216 rows and 7 columns ## Kingdom Phylum Class Order Family ## &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; ## 549322 Archaea Crenarchaeota Thermoprotei NA NA ## 522457 Archaea Crenarchaeota Thermoprotei NA NA ## 951 Archaea Crenarchaeota Thermoprotei Sulfolobales Sulfolobaceae ## 244423 Archaea Crenarchaeota Sd-NA NA NA ## 586076 Archaea Crenarchaeota Sd-NA NA NA ## ... ... ... ... ... ... ## 278222 Bacteria SR1 NA NA NA ## 463590 Bacteria SR1 NA NA NA ## 535321 Bacteria SR1 NA NA NA ## 200359 Bacteria SR1 NA NA NA ## 271582 Bacteria SR1 NA NA NA ## Genus Species ## &lt;character&gt; &lt;character&gt; ## 549322 NA NA ## 522457 NA NA ## 951 Sulfolobus Sulfolobusacidocalda.. ## 244423 NA NA ## 586076 NA NA ## ... ... ... ## 278222 NA NA ## 463590 NA NA ## 535321 NA NA ## 200359 NA NA ## 271582 NA NA 2.2.4 rowTree Phylogenetic trees also play an important role for the microbiome field. The TreeSummarizedExperiment class is able to keep track of feature and node relations via two functions, rowTree and rowLinks. A tree can be accessed via rowTree as phylo object. rowTree(se) ## ## Phylogenetic tree with 19216 tips and 19215 internal nodes. ## ## Tip labels: ## 549322, 522457, 951, 244423, 586076, 246140, ... ## Node labels: ## , 0.858.4, 1.000.154, 0.764.3, 0.995.2, 1.000.2, ... ## ## Rooted; includes branch lengths. The links to the individual features are available through rowLinks. rowLinks(se) ## LinkDataFrame with 19216 rows and 5 columns ## nodeLab nodeNum nodeLab_alias isLeaf whichTree ## &lt;character&gt; &lt;integer&gt; &lt;character&gt; &lt;logical&gt; &lt;character&gt; ## 1 549322 1 alias_1 TRUE phylo ## 2 522457 2 alias_2 TRUE phylo ## 3 951 3 alias_3 TRUE phylo ## 4 244423 4 alias_4 TRUE phylo ## 5 586076 5 alias_5 TRUE phylo ## ... ... ... ... ... ... ## 19212 278222 19212 alias_19212 TRUE phylo ## 19213 463590 19213 alias_19213 TRUE phylo ## 19214 535321 19214 alias_19214 TRUE phylo ## 19215 200359 19215 alias_19215 TRUE phylo ## 19216 271582 19216 alias_19216 TRUE phylo Please note that there can be a 1:1 relationship between tree nodes and features, but this is not a must have. This means there can be features, which are not linked to nodes, and nodes, which are not linked to features. To change the links in an existing object, the changeTree function is available. 2.2.5 Alternative experiments Alternative experiments differ from transformations as they can contain complementary data, which is no longer tied to the same dimensions as the assay data. However, the number of samples (columns) must be the same. This can come into play for instance when one has taxonomic abundance profiles quantified with different measurement technologies, such as phylogenetic microarrays, amplicon sequencing, or metagenomic sequencing. Such alternative experiments that concern the same samples can be stored as Separate assays assuming that the taxonomic information can be mapped between feature directly 1:1; or data in the altExp slot of the TreeSummarizedExperiment, if the feature dimensions differ. Each element of the altExp slot is a SummarizedExperiment or an object from a derived class with independent feature data. As an example, we show how to store taxonomic abundance tables agglomerated at different taxonomic levels. However, the data could as well originate from entirely different measurement sources as long as the samples are matched. # Agglomerate the data to Phylym level se.phylum &lt;- agglomerateByRank(se, &quot;Phylum&quot;) # both have the same number of columns (samples) dim(se) ## [1] 19216 26 dim(se.phylum) ## [1] 67 26 # Add the new table as an alternative experiment altExp(se, &quot;Phylum&quot;) &lt;- se.phylum altExpNames(se) ## [1] &quot;Phylum&quot; # Pick a sample subset: this acts on both altExp and assay data se[,1:10] ## class: TreeSummarizedExperiment ## dim: 19216 10 ## metadata(0): ## assays(2): counts relabundance ## rownames(19216): 549322 522457 ... 200359 271582 ## rowData names(7): Kingdom Phylum ... Genus Species ## colnames(10): CL3 CC1 ... M31Tong M11Tong ## colData names(7): X.SampleID Primer ... SampleType Description ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(1): Phylum ## rowLinks: a LinkDataFrame (19216 rows) ## rowTree: 1 phylo tree(s) (19216 leaves) ## colLinks: NULL ## colTree: NULL dim(altExp(se[,1:10],&quot;Phylum&quot;)) ## [1] 67 10 For more details of altExp have a look at the Intro vignette of the SingleCellExperiment package (Lun and Risso 2020). 2.2.6 MultiAssayExperiments Multiple experiments relate to complementary measurement types, such as transcriptomic or metabolomic profiling of the microbiome or the host. Multiple experiments can be represented using the same options as alternative experiments, or by using the MultiAssayExperiment class (Ramos and Waldron 2020). Depending on how the datasets relate to each other the data can be stored as: Separate altExp if the samples can be matched directly 1:1; or As MultiAssayExperiment objects, in which the connections between samples are defined through a sampleMap. Each element on the experimentsList of an MultiAssayExperiment is matrix or matrix-like object including SummarizedExperiment objects, and the number of samples can differ between the elements. #TODO: Find the right dataset to explain a non 1:1 sample relationship For information have a look at the intro vignette of the MultiAssayExperiment package. Table 2.1: Recommended options for storing multiple data tables in microbiome studies The assays are best suited for data transformations (one-to-one match between samples and columns across the assays). The alternative experiments are particularly suitable for alternative versions of the data that are of same type but may have a different number of features (e.g. taxonomic groups); this is for instance the case with taxonomic abundance tables agglomerated at different levels (e.g. genus vs. phyla) or alternative profiling technologies (e.g. amplicon sequencing vs. shallow shotgun metagenomics). For alternative experiments one-to-one match between samples (cols) is required but the alternative experiment tables can have different numbers of features (rows). Finally, elements of the MultiAssayExperiment provide the most flexible way to incorporate multi-omic data tables with flexible numbers of samples and features. We recommend these conventions as the basis for methods development and application in microbiome studies. Option Rows (features) Cols (samples) Recommended assays match match Data transformations altExp free match Alternative experiments MultiAssay free free (mapping) Multi-omic experiments 2.3 Loading experimental microbiome data 2.3.1 Import from external files Microbiome (taxonomic) profiling data is commonly distributed in various file formats. You can import such external data files as a (Tree)SummarizedExperiment object but the details depend on the file format. Here, we provide examples for common formats. CSV data tables can be imported with the standard R functions, then converted to the desired format. For detailed examples, you can check the Bioconductor course material by Martin Morgan. The following example reads abundance tables, taxonomic mapping tables, and sample metadata, assuming that the input data files are properly prepared with appropriate row and column names. counts &lt;- read.csv(count_file) # Abundance table (e.g. ASV data; to assay data) tax &lt;- read.csv(tax_file) # Taxonomy table (to rowData) samples &lt;- read.csv(sample_file) # Sample data (to colData) se &lt;- SummarizedExperiment(assays = list(counts = counts), colData = samples, rowData = tax) Specific import functions are provided for: Biom files (see help(mia::loadFromBiom)) QIIME2 files (see help(mia::loadFromQIIME2)) Mothur files (see help(mia::loadFromMothur)) 2.3.1.1 Biom example This example shows how Biom files are imported into a TreeSummarizedExperiment object. The data is from following publication: Tengeler AC et al. (2020) Gut microbiota from persons with attention-deficit/hyperactivity disorder affects the brain in mice. The data set consists of 3 files: biom file: abundance table and taxonomy information csv file: sample metadata tree file: phylogenetic tree Store the data in your desired local directory (for instance, data/ under the working directory), and define source file paths biom_file_path &lt;- &quot;data/Aggregated_humanization2.biom&quot; sample_meta_file_path &lt;- &quot;data/Mapping_file_ADHD_aggregated.csv&quot; tree_file_path &lt;- &quot;data/Data_humanization_phylo_aggregation.tre&quot; Now we can load the biom data into a SummarizedExperiment (SE) object. library(mia) # Imports the data se &lt;- loadFromBiom(biom_file_path) # Check se ## class: SummarizedExperiment ## dim: 151 27 ## metadata(0): ## assays(1): counts ## rownames(151): 1726470 1726471 ... 17264756 17264757 ## rowData names(6): taxonomy1 taxonomy2 ... taxonomy5 taxonomy6 ## colnames(27): A110 A111 ... A38 A39 ## colData names(0): The assays slot includes a list of abundance tables. The imported abundance table is named as “counts.” Let us inspect only the first cols and rows. assays(se)$counts[1:3, 1:3] ## A110 A111 A12 ## 1726470 17722 11630 0 ## 1726471 12052 0 2679 ## 17264731 0 970 0 The rowdata includes taxonomic information from the biom file. The head() command shows just the beginning of the data table for an overview. knitr::kable() is for printing the information more nicely. head(rowData(se)) ## DataFrame with 6 rows and 6 columns ## taxonomy1 taxonomy2 taxonomy3 ## &lt;character&gt; &lt;character&gt; &lt;character&gt; ## 1726470 &quot;k__Bacteria p__Bacteroidetes c__Bacteroidia ## 1726471 &quot;k__Bacteria p__Bacteroidetes c__Bacteroidia ## 17264731 &quot;k__Bacteria p__Bacteroidetes c__Bacteroidia ## 17264726 &quot;k__Bacteria p__Bacteroidetes c__Bacteroidia ## 1726472 &quot;k__Bacteria p__Verrucomicrobia c__Verrucomicrobiae ## 17264724 &quot;k__Bacteria p__Bacteroidetes c__Bacteroidia ## taxonomy4 taxonomy5 taxonomy6 ## &lt;character&gt; &lt;character&gt; &lt;character&gt; ## 1726470 o__Bacteroidales f__Bacteroidaceae g__Bacteroides&quot; ## 1726471 o__Bacteroidales f__Bacteroidaceae g__Bacteroides&quot; ## 17264731 o__Bacteroidales f__Porphyromonadaceae g__Parabacteroides&quot; ## 17264726 o__Bacteroidales f__Bacteroidaceae g__Bacteroides&quot; ## 1726472 o__Verrucomicrobiales f__Verrucomicrobiaceae g__Akkermansia&quot; ## 17264724 o__Bacteroidales f__Bacteroidaceae g__Bacteroides&quot; These taxonomic rank names (column names) are not real rank names. Let’s replace them with real rank names. In addition to that, the taxa names include, e.g., ’“k__’ before the name, so let’s make them cleaner by removing them. names(rowData(se)) &lt;- c(&quot;Kingdom&quot;, &quot;Phylum&quot;, &quot;Class&quot;, &quot;Order&quot;, &quot;Family&quot;, &quot;Genus&quot;) # Goes through the whole DataFrame. Removes &#39;.*[kpcofg]__&#39; from strings, where [kpcofg] # is any character from listed ones, and .* any character. rowdata_modified &lt;- BiocParallel::bplapply(rowData(se), FUN = stringr::str_remove, pattern = &#39;.*[kpcofg]__&#39;) # Genus level has additional &#39;\\&quot;&#39;, so let&#39;s delete that also rowdata_modified &lt;- BiocParallel::bplapply(rowdata_modified, FUN = stringr::str_remove, pattern = &#39;\\&quot;&#39;) # rowdata_modified is a list, so it is converted back to DataFrame format. rowdata_modified &lt;- DataFrame(rowdata_modified) # And then assigned back to the SE object rowData(se) &lt;- rowdata_modified # Now we have a nicer table head(rowData(se)) ## DataFrame with 6 rows and 6 columns ## Kingdom Phylum Class Order ## &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; ## 1726470 Bacteria Bacteroidetes Bacteroidia Bacteroidales ## 1726471 Bacteria Bacteroidetes Bacteroidia Bacteroidales ## 17264731 Bacteria Bacteroidetes Bacteroidia Bacteroidales ## 17264726 Bacteria Bacteroidetes Bacteroidia Bacteroidales ## 1726472 Bacteria Verrucomicrobia Verrucomicrobiae Verrucomicrobiales ## 17264724 Bacteria Bacteroidetes Bacteroidia Bacteroidales ## Family Genus ## &lt;character&gt; &lt;character&gt; ## 1726470 Bacteroidaceae Bacteroides ## 1726471 Bacteroidaceae Bacteroides ## 17264731 Porphyromonadaceae Parabacteroides ## 17264726 Bacteroidaceae Bacteroides ## 1726472 Verrucomicrobiaceae Akkermansia ## 17264724 Bacteroidaceae Bacteroides We notice that the imported biom file did not contain the sample meta data yet, so it includes an empty data frame. head(colData(se)) ## DataFrame with 6 rows and 0 columns Let us add a sample metadata file. # We use this to check what type of data it is # read.table(sample_meta_file_path) # It seems like a comma separated file and it does not include headers # Let us read it and then convert from data.frame to DataFrame # (required for our purposes) sample_meta &lt;- DataFrame(read.table(sample_meta_file_path, sep = &quot;,&quot;, header = FALSE)) # Add sample names to rownames rownames(sample_meta) &lt;- sample_meta[,1] # Delete column that included sample names sample_meta[,1] &lt;- NULL # We can add headers colnames(sample_meta) &lt;- c(&quot;patient_status&quot;, &quot;cohort&quot;, &quot;patient_status_vs_cohort&quot;, &quot;sample_name&quot;) # Then it can be added to colData colData(se) &lt;- sample_meta Now colData includes the sample metadata. head(colData(se)) ## DataFrame with 6 rows and 4 columns ## patient_status cohort patient_status_vs_cohort sample_name ## &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; ## A110 ADHD Cohort_1 ADHD_Cohort_1 A110 ## A12 ADHD Cohort_1 ADHD_Cohort_1 A12 ## A15 ADHD Cohort_1 ADHD_Cohort_1 A15 ## A19 ADHD Cohort_1 ADHD_Cohort_1 A19 ## A21 ADHD Cohort_2 ADHD_Cohort_2 A21 ## A23 ADHD Cohort_2 ADHD_Cohort_2 A23 Now, let’s add a phylogenetic tree. The current data object, se, is a SummarizedExperiment object. This does not include a slot for adding a phylogenetic tree. In order to do this, we can convert the SE object to an extended TreeSummarizedExperiment object which includes also a rowTree slot. tse &lt;- as(se, &quot;TreeSummarizedExperiment&quot;) # tse includes same data as se tse ## class: TreeSummarizedExperiment ## dim: 151 27 ## metadata(0): ## assays(1): counts ## rownames(151): 1726470 1726471 ... 17264756 17264757 ## rowData names(6): Kingdom Phylum ... Family Genus ## colnames(27): A110 A12 ... A35 A38 ## colData names(4): patient_status cohort patient_status_vs_cohort ## sample_name ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: NULL ## rowTree: NULL ## colLinks: NULL ## colTree: NULL Next, let us read the tree data file and add it to the R data object (tse). # Reads the tree file tree &lt;- ape::read.tree(tree_file_path) # Add tree to rowTree rowTree(tse) &lt;- tree # Check tse ## class: TreeSummarizedExperiment ## dim: 151 27 ## metadata(0): ## assays(1): counts ## rownames(151): 1726470 1726471 ... 17264756 17264757 ## rowData names(6): Kingdom Phylum ... Family Genus ## colnames(27): A110 A12 ... A35 A38 ## colData names(4): patient_status cohort patient_status_vs_cohort ## sample_name ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: a LinkDataFrame (151 rows) ## rowTree: 1 phylo tree(s) (151 leaves) ## colLinks: NULL ## colTree: NULL Now rowTree includes a phylogenetic tree: head(rowTree(tse)) 2.3.2 Conversions between data formats in R If the data has already been imported in R in another format, it can be readily converted into TreeSummarizedExperiment, as shown in our next example. Note that similar conversion functions to TreeSummarizedExperiment are available for multiple data formats via the mia package (see makeTreeSummarizedExperimentFrom* for phyloseq, Biom, and DADA2). library(mia) # phyloseq example data data(GlobalPatterns, package=&quot;phyloseq&quot;) GlobalPatterns_phyloseq &lt;- GlobalPatterns GlobalPatterns_phyloseq ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 19216 taxa and 26 samples ] ## sample_data() Sample Data: [ 26 samples by 7 sample variables ] ## tax_table() Taxonomy Table: [ 19216 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 19216 tips and 19215 internal nodes ] # convert phyloseq to TSE GlobalPatterns_TSE &lt;- makeTreeSummarizedExperimentFromPhyloseq(GlobalPatterns_phyloseq) GlobalPatterns_TSE ## class: TreeSummarizedExperiment ## dim: 19216 26 ## metadata(0): ## assays(1): counts ## rownames(19216): 549322 522457 ... 200359 271582 ## rowData names(7): Kingdom Phylum ... Genus Species ## colnames(26): CL3 CC1 ... Even2 Even3 ## colData names(7): X.SampleID Primer ... SampleType Description ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: a LinkDataFrame (19216 rows) ## rowTree: 1 phylo tree(s) (19216 leaves) ## colLinks: NULL ## colTree: NULL We can also convert TreeSummarizedExperiment objects into phyloseq with respect to the shared components that are supported by both formats (i.e. taxonomic abundance table, sample metadata, taxonomic table, phylogenetic tree, sequence information). This is useful for instance when additional methods are available for phyloseq. # convert TSE to phyloseq GlobalPatterns_phyloseq2 &lt;- makePhyloseqFromTreeSummarizedExperiment(GlobalPatterns_TSE) GlobalPatterns_phyloseq2 ## phyloseq-class experiment-level object ## otu_table() OTU Table: [ 19216 taxa and 26 samples ] ## sample_data() Sample Data: [ 26 samples by 7 sample variables ] ## tax_table() Taxonomy Table: [ 19216 taxa by 7 taxonomic ranks ] ## phy_tree() Phylogenetic Tree: [ 19216 tips and 19215 internal nodes ] 2.4 Demonstration data Open demonstration data for testing and benchmarking purposes is available from multiple locations. This chapter introduces some options. The other chapters of this book provide ample examples about the use of the data. 2.4.1 Package data The mia R package contains example data sets that are direct conversions from the alternative phyloseq container to the TreeSummarizedExperiment container. List the available datasets in the mia package: library(mia) data(package=&quot;mia&quot;) Load the GlobalPatterns data from the mia package: data(&quot;GlobalPatterns&quot;, package=&quot;mia&quot;) GlobalPatterns ## class: TreeSummarizedExperiment ## dim: 19216 26 ## metadata(0): ## assays(1): counts ## rownames(19216): 549322 522457 ... 200359 271582 ## rowData names(7): Kingdom Phylum ... Genus Species ## colnames(26): CL3 CC1 ... Even2 Even3 ## colData names(7): X.SampleID Primer ... SampleType Description ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: a LinkDataFrame (19216 rows) ## rowTree: 1 phylo tree(s) (19216 leaves) ## colLinks: NULL ## colTree: NULL Check the documentation for this data set: ## Help on topic &#39;GlobalPatterns&#39; was found in the following packages: ## ## Package Library ## phyloseq /__w/_temp/Library ## mia /__w/_temp/Library ## ## ## Using the first match ... 2.4.2 ExperimentHub data ExperimentHub provides a variety of data resources, including the microbiomeDataSets package. A table of the available data sets is available through the availableDataSets function. library(microbiomeDataSets) availableDataSets() ## Dataset ## 1 GrieneisenTSData ## 2 HintikkaXOData ## 3 LahtiMLData ## 4 LahtiMData ## 5 LahtiWAData ## 6 OKeefeDSData ## 7 SilvermanAGutData ## 8 SongQAData ## 9 SprockettTHData All data are downloaded from ExperimentHub and cached for local re-use. Check the man pages of each function for a detailed documentation of the data contents and references. Let us retrieve a MultiAssayExperiment data set: mae &lt;- HintikkaXOData() Data is available in SummarizedExperiment, r Biocpkg(\"TreeSummarizedExperiment\"), and r Biocpkg(\"MultiAssayExperiment\") data containers; see the separate page on alternative containers for more details. 2.4.3 Other data sources The curatedMetagenomicData is an independent source that provides various example data sets as (Tree)SummarizedExperiment objects. This resource provides curated human microbiome data including gene families, marker abundance, marker presence, pathway abundance, pathway coverage, and relative abundance for samples from different body sites. See the package homepage for more details on data availability and access. As one example, let us retrieve the Vatanen (2016) (Vatanen et al. 2016) data set. This is a larger collection with a bit longer download time. library(curatedMetagenomicData) se &lt;- curatedMetagenomicData(&quot;Vatanen*&quot;, dryrun = FALSE, counts = TRUE) Session Info View session info R version 4.1.1 (2021-08-10) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.3 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 stats graphics grDevices utils datasets methods [8] base other attached packages: [1] microbiomeDataSets_1.1.5 MultiAssayExperiment_1.19.16 [3] phyloseq_1.37.0 mia_1.1.19 [5] TreeSummarizedExperiment_2.1.4 Biostrings_2.61.2 [7] XVector_0.33.0 SingleCellExperiment_1.15.2 [9] SummarizedExperiment_1.23.5 Biobase_2.53.0 [11] GenomicRanges_1.45.0 GenomeInfoDb_1.29.8 [13] IRanges_2.27.2 S4Vectors_0.31.5 [15] BiocGenerics_0.39.2 MatrixGenerics_1.5.4 [17] matrixStats_0.61.0-9001 BiocStyle_2.21.4 [19] rebook_1.3.1 loaded via a namespace (and not attached): [1] AnnotationHub_3.1.6 BiocFileCache_2.1.1 [3] plyr_1.8.6 igraph_1.2.6 [5] lazyeval_0.2.2 splines_4.1.1 [7] BiocParallel_1.27.17 ggplot2_3.3.5 [9] scater_1.21.8 digest_0.6.28 [11] foreach_1.5.1 htmltools_0.5.2 [13] viridis_0.6.2 fansi_0.5.0 [15] magrittr_2.0.1 memoise_2.0.0 [17] ScaledMatrix_1.1.0 cluster_2.1.2 [19] DECIPHER_2.21.0 colorspace_2.0-2 [21] rappdirs_0.3.3 blob_1.2.2 [23] ggrepel_0.9.1 xfun_0.26 [25] dplyr_1.0.7 crayon_1.4.1 [27] RCurl_1.98-1.5 jsonlite_1.7.2 [29] graph_1.71.2 survival_3.2-13 [31] iterators_1.0.13 ape_5.5 [33] glue_1.4.2 gtable_0.3.0 [35] zlibbioc_1.39.0 DelayedArray_0.19.4 [37] BiocSingular_1.9.1 Rhdf5lib_1.15.2 [39] scales_1.1.1 DBI_1.1.1 [41] Rcpp_1.0.7 xtable_1.8-4 [43] viridisLite_0.4.0 decontam_1.13.0 [45] tidytree_0.3.5 bit_4.0.4 [47] rsvd_1.0.5 httr_1.4.2 [49] dir.expiry_1.1.0 ellipsis_0.3.2 [51] pkgconfig_2.0.3 XML_3.99-0.8 [53] scuttle_1.3.1 CodeDepends_0.6.5 [55] sass_0.4.0 dbplyr_2.1.1 [57] utf8_1.2.2 AnnotationDbi_1.55.1 [59] later_1.3.0 tidyselect_1.1.1 [61] rlang_0.4.11 reshape2_1.4.4 [63] munsell_0.5.0 BiocVersion_3.14.0 [65] tools_4.1.1 cachem_1.0.6 [67] DirichletMultinomial_1.35.0 generics_0.1.0 [69] RSQLite_2.2.8 ExperimentHub_2.1.4 [71] ade4_1.7-18 evaluate_0.14 [73] biomformat_1.21.0 stringr_1.4.0 [75] fastmap_1.1.0 yaml_2.2.1 [77] knitr_1.36 bit64_4.0.5 [79] purrr_0.3.4 KEGGREST_1.33.0 [81] nlme_3.1-153 sparseMatrixStats_1.5.3 [83] mime_0.12 compiler_4.1.1 [85] interactiveDisplayBase_1.31.2 curl_4.3.2 [87] beeswarm_0.4.0 filelock_1.0.2 [89] png_0.1-7 treeio_1.17.2 [91] tibble_3.1.5 bslib_0.3.1 [93] stringi_1.7.5 highr_0.9 [95] lattice_0.20-45 Matrix_1.3-4 [97] vegan_2.5-7 permute_0.9-5 [99] multtest_2.49.0 vctrs_0.3.8 [101] pillar_1.6.3 lifecycle_1.0.1 [103] rhdf5filters_1.5.0 BiocManager_1.30.16 [105] jquerylib_0.1.4 BiocNeighbors_1.11.0 [107] data.table_1.14.2 bitops_1.0-7 [109] irlba_2.3.3 httpuv_1.6.3 [111] R6_2.5.1 promises_1.2.0.1 [113] bookdown_0.24 gridExtra_2.3 [115] vipor_0.4.5 codetools_0.2-18 [117] MASS_7.3-54 assertthat_0.2.1 [119] rhdf5_2.37.4 GenomeInfoDbData_1.2.7 [121] mgcv_1.8-38 parallel_4.1.1 [123] grid_4.1.1 beachmat_2.9.1 [125] tidyr_1.1.4 rmarkdown_2.11 [127] DelayedMatrixStats_1.15.4 shiny_1.7.1 [129] ggbeeswarm_0.6.0 Bibliography "],["packages.html", "Chapter 3 Packages 3.1 Package installation 3.2 Some available packages Session Info", " Chapter 3 Packages .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 3.1 Package installation Several R packages provide methods for the analysis and manipulation of SummarizedExperiment and related data containers. One of these is mia. Install the Biocondcuctor development version with: BiocManager::install(&quot;microbiome/mia&quot;, version=&quot;devel&quot;) 3.2 Some available packages Some of the R packages supporting the framework include: mia : Microbiome analysis tools miaViz : Microbiome analysis specific visualization miaSim : Microbiome data simulations miaTime : Microbiome time series analysis philr (external) Session Info View session info R version 4.1.1 (2021-08-10) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.3 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] BiocStyle_2.21.4 rebook_1.3.1 loaded via a namespace (and not attached): [1] graph_1.71.2 knitr_1.36 magrittr_2.0.1 [4] BiocGenerics_0.39.2 R6_2.5.1 rlang_0.4.11 [7] fastmap_1.1.0 stringr_1.4.0 tools_4.1.1 [10] xfun_0.26 jquerylib_0.1.4 htmltools_0.5.2 [13] CodeDepends_0.6.5 yaml_2.2.1 digest_0.6.28 [16] bookdown_0.24 dir.expiry_1.1.0 BiocManager_1.30.16 [19] codetools_0.2-18 sass_0.4.0 evaluate_0.14 [22] rmarkdown_2.11 stringi_1.7.5 compiler_4.1.1 [25] bslib_0.3.1 filelock_1.0.2 stats4_4.1.1 [28] XML_3.99-0.8 jsonlite_1.7.2 "],["datamanipulation.html", "Chapter 4 Data Manipulation 4.1 Tidying and subsetting", " Chapter 4 Data Manipulation .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 4.1 Tidying and subsetting 4.1.1 Tidy data For several custom analysis and visualization packages, such as those from the tidyverse, the SE data can be converted to long data.frame format with meltAssay. library(mia) data(GlobalPatterns, package=&quot;mia&quot;) se &lt;- GlobalPatterns se &lt;- transformSamples(se, method=&quot;relabundance&quot;) molten_se &lt;- meltAssay(se, add_row_data = TRUE, add_col_data = TRUE, abund_values = &quot;relabundance&quot;) molten_se ## # A tibble: 499,616 × 17 ## FeatureID SampleID relabundance Kingdom Phylum Class Order Family Genus ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 549322 CL3 0 Archaea Crenarch… Thermop… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 2 549322 CC1 0 Archaea Crenarch… Thermop… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 3 549322 SV1 0 Archaea Crenarch… Thermop… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 4 549322 M31Fcsw 0 Archaea Crenarch… Thermop… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 5 549322 M11Fcsw 0 Archaea Crenarch… Thermop… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 6 549322 M31Plmr 0 Archaea Crenarch… Thermop… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 7 549322 M11Plmr 0 Archaea Crenarch… Thermop… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 8 549322 F21Plmr 0 Archaea Crenarch… Thermop… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 9 549322 M31Tong 0 Archaea Crenarch… Thermop… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 10 549322 M11Tong 0 Archaea Crenarch… Thermop… &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## # … with 499,606 more rows, and 8 more variables: Species &lt;chr&gt;, ## # X.SampleID &lt;fct&gt;, Primer &lt;fct&gt;, Final_Barcode &lt;fct&gt;, ## # Barcode_truncated_plus_T &lt;fct&gt;, Barcode_full_length &lt;fct&gt;, ## # SampleType &lt;fct&gt;, Description &lt;fct&gt; 4.1.2 Subsetting Subsetting data helps to draw the focus of analysis on particular sets of samples and / or features. When dealing with large data sets, the subset of interest can be extracted and investigated separately. This might improve performance and reduce the computational load. Load: mia dplyr knitr data GlobalPatterns Let us store GlobalPatterns into se and check its original number of features (rows) and samples (columns). Note: when subsetting by sample, expect the number of columns to decrease; when subsetting by feature, expect the number of rows to decrease. # store data into se and check dimensions data(&quot;GlobalPatterns&quot;, package=&quot;mia&quot;) se &lt;- GlobalPatterns # show dimensions (features x samples) dim(se) ## [1] 19216 26 4.1.2.1 Subset by sample (column-wise) For the sake of demonstration, here we will extract a subset containing only the samples of human origin (feces, skin or tongue), stored as SampleType within colData(se) and also in se. First, we would like to see all the possible values that SampleType can take on and how frequent those are: # inspect possible values for SampleType unique(se$SampleType) ## [1] Soil Feces Skin Tongue ## [5] Freshwater Freshwater (creek) Ocean Sediment (estuary) ## [9] Mock ## 9 Levels: Feces Freshwater Freshwater (creek) Mock ... Tongue # show recurrence for each value se$SampleType %&gt;% table() . Freq Feces 4 Freshwater 2 Freshwater (creek) 3 Mock 3 Ocean 3 Sediment (estuary) 3 Skin 3 Soil 3 Tongue 2 Note: after subsetting, expect the number of columns to equal the sum of the recurrences of the samples that you are interested in. For instance, ncols = Feces + Skin + Tongue = 4 + 3 + 2 = 9. Next, we logical index across the columns of se (make sure to leave the first index empty to select all rows) and filter for the samples of human origin. For this, we use the information on the samples from the meta data colData(se). # subset by sample se_subset_by_sample &lt;- se[ , se$SampleType %in% c(&quot;Feces&quot;, &quot;Skin&quot;, &quot;Tongue&quot;)] # show dimensions dim(se_subset_by_sample) ## [1] 19216 9 As a sanity check, the new object se_subset_by_sample should have the original number of features (rows) and a number of samples (columns) equal to the sum of the samples of interest (in this case 9). Several characteristics can be used to subset by sample: origin sampling time sequencing method DNA / RNA barcode cohort 4.1.2.2 Subset by feature (row-wise) Similarly, here we will extract a subset containing only the features that belong to the Phyla “Actinobacteria” and “Chlamydiae,” stored as Phylum within rowData(se). However, subsetting by feature implies a few more obstacles, such as the presence of NA elements and the possible need for agglomeration. As previously, we would first like to see all the possible values that Phylum can take on and how frequent those are: # inspect possible values for Phylum unique(rowData(se)$Phylum) ## [1] &quot;Crenarchaeota&quot; &quot;Euryarchaeota&quot; &quot;Actinobacteria&quot; &quot;Spirochaetes&quot; ## [5] &quot;MVP-15&quot; &quot;Proteobacteria&quot; &quot;SBR1093&quot; &quot;Fusobacteria&quot; ## [9] &quot;Tenericutes&quot; &quot;ZB3&quot; &quot;Cyanobacteria&quot; &quot;GOUTA4&quot; ## [13] &quot;TG3&quot; &quot;Chlorobi&quot; &quot;Bacteroidetes&quot; &quot;Caldithrix&quot; ## [17] &quot;KSB1&quot; &quot;SAR406&quot; &quot;LCP-89&quot; &quot;Thermi&quot; ## [21] &quot;Gemmatimonadetes&quot; &quot;Fibrobacteres&quot; &quot;GN06&quot; &quot;AC1&quot; ## [25] &quot;TM6&quot; &quot;OP8&quot; &quot;Elusimicrobia&quot; &quot;NC10&quot; ## [29] &quot;SPAM&quot; NA &quot;Acidobacteria&quot; &quot;CCM11b&quot; ## [33] &quot;Nitrospirae&quot; &quot;NKB19&quot; &quot;BRC1&quot; &quot;Hyd24-12&quot; ## [37] &quot;WS3&quot; &quot;PAUC34f&quot; &quot;GN04&quot; &quot;GN12&quot; ## [41] &quot;Verrucomicrobia&quot; &quot;Lentisphaerae&quot; &quot;LD1&quot; &quot;Chlamydiae&quot; ## [45] &quot;OP3&quot; &quot;Planctomycetes&quot; &quot;Firmicutes&quot; &quot;OP9&quot; ## [49] &quot;WPS-2&quot; &quot;Armatimonadetes&quot; &quot;SC3&quot; &quot;TM7&quot; ## [53] &quot;GN02&quot; &quot;SM2F11&quot; &quot;ABY1_OD1&quot; &quot;ZB2&quot; ## [57] &quot;OP11&quot; &quot;Chloroflexi&quot; &quot;SC4&quot; &quot;WS1&quot; ## [61] &quot;GAL15&quot; &quot;AD3&quot; &quot;WS2&quot; &quot;Caldiserica&quot; ## [65] &quot;Thermotogae&quot; &quot;Synergistetes&quot; &quot;SR1&quot; # show recurrence for each value rowData(se)$Phylum %&gt;% table() . Freq ABY1_OD1 7 AC1 1 Acidobacteria 1021 Actinobacteria 1631 AD3 9 Armatimonadetes 61 Bacteroidetes 2382 BRC1 13 Caldiserica 3 Caldithrix 10 CCM11b 2 Chlamydiae 21 Chlorobi 64 Chloroflexi 437 Crenarchaeota 106 Cyanobacteria 393 Elusimicrobia 31 Euryarchaeota 102 Fibrobacteres 7 Firmicutes 4356 Fusobacteria 37 GAL15 2 Gemmatimonadetes 191 GN02 8 GN04 7 GN06 2 GN12 1 GOUTA4 11 Hyd24-12 4 KSB1 6 LCP-89 2 LD1 2 Lentisphaerae 21 MVP-15 5 NC10 9 Nitrospirae 74 NKB19 16 OP11 6 OP3 30 OP8 27 OP9 4 PAUC34f 3 Planctomycetes 638 Proteobacteria 6416 SAR406 21 SBR1093 9 SC3 8 SC4 8 SM2F11 5 SPAM 22 Spirochaetes 124 SR1 5 Synergistetes 7 Tenericutes 143 TG3 5 Thermi 46 Thermotogae 1 TM6 27 TM7 32 Verrucomicrobia 470 WPS-2 20 WS1 5 WS2 2 WS3 70 ZB2 2 ZB3 2 Note: after subsetting, expect the number of columns to equal the sum of the recurrences of the feature(s) that you are interested in. For instance, nrows = Actinobacteria + Chlamydiae = 1631 + 21 = 1652. Depending on your research question, you might need to or need not agglomerate the data in the first place: if you want to find the abundance of each and every feature that belongs to Actinobacteria and Chlamydiae, agglomeration is not needed; if you want to find the total abundance of all the features that belong to Actinobacteria or Chlamydiae, agglomeration is recommended. 4.1.2.2.1 Non-agglomerated data Next, we logical index across the rows of se (make sure to leave the second index empty to select all columns) and filter for the features that fall in either Actinobacteria or Chlamydiae. For this, we use the information on the samples from the meta data rowData(se). The first term with the %in% operator are includes all the features of interest, whereas the second term after the AND operator &amp; filters out all the features that present a NA in place of Phylum. # subset by feature se_subset_by_feature &lt;- se[rowData(se)$Phylum %in% c(&quot;Actinobacteria&quot;, &quot;Chlamydiae&quot;) &amp; !is.na(rowData(se)$Phylum), ] # show dimensions dim(se_subset_by_feature) ## [1] 1652 26 As a sanity check, the new object se_subset_by_feature should have the original number of samples (columns) and a number of features (rows) equal to the sum of the features of interest (in this case 1652). 4.1.2.2.2 Agglomerated data When total abundances of certain Phyla are of relevance, the data is initially agglomerated by Phylum. Then, similar steps as in the case of not agglomerated data are followed. # agglomerate by Phylum se_phylum &lt;- se %&gt;% agglomerateByRank(rank = &quot;Phylum&quot;) # subset by feature and get rid of NAs se_phylum_subset_by_feature &lt;- se_phylum[rowData(se_phylum)$Phylum %in% c(&quot;Actinobacteria&quot;, &quot;Chlamydiae&quot;) &amp; !is.na(rowData(se_phylum)$Phylum), ] # show dimensions dim(se_phylum_subset_by_feature) ## [1] 2 26 Note: as data was agglomerated, the number of rows equal the number of Phyla used to index (in this case, just 2) Alternatively: # store features of interest into phyla phyla &lt;- c(&quot;Phylum:Actinobacteria&quot;, &quot;Phylum:Chlamydiae&quot;) # subset by feature se_phylum_subset_by_feature &lt;- se_phylum[phyla, ] # show dimensions dim(se_subset_by_feature) ## [1] 1652 26 The code above returns the not agglomerated version of the data. Fewer characteristics can be used to subset by feature: Taxonomic rank Meta-taxonomic group For subsetting by Kingdom, agglomeration does not apply, whereas for the other ranks it can be applied if necessary. 4.1.2.3 Subset by sample and feature Finally, we can subset data by sample and feature at once. The resulting subset contains all the samples of human origin and all the features of Phyla “Actinobacteria” or “Chlamydiae.” # subset by sample and feature and get rid of NAs se_subset_by_sample_feature &lt;- se[rowData(se)$Phylum %in% c(&quot;Actinobacteria&quot;, &quot;Chlamydiae&quot;) &amp; !is.na(rowData(se)$Phylum), se$SampleType %in% c(&quot;Feces&quot;, &quot;Skin&quot;, &quot;Tongue&quot;)] # show dimensions dim(se_subset_by_sample_feature) ## [1] 1652 9 Note: the dimensions of se_subset_by_sample_feature agree with those of the previous subsets (9 columns filtered by sample and 1652 rows filtered by feature). If a study was to consider and quantify the presence of Actinobacteria as well as Chlamydiae in different sites of the human body, se_subset_by_sample_feature might be a suitable subset to start with. "],["quality-control.html", "Chapter 5 Exploration and quality Control 5.1 Abundance 5.2 Prevalence 5.3 Quality control Session Info", " Chapter 5 Exploration and quality Control .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } This chapter focuses on the exploration and quality control of microbiome data and establishes commonly used descriptors of a microbiome. The main difference to quality control is that the exploration assumes that technical aspects of the dataset have been investigated to your satisfaction. Generally speaking, at this point you should be quite certain that the dataset does not suffer from severe technical biases, or you should at least be aware of potential problems. In reality you might need to go back and forth between QC and exploration, since you discover through exploration of your dataset technical aspects you need to check. library(mia) data(&quot;GlobalPatterns&quot;, package=&quot;mia&quot;) se &lt;- GlobalPatterns 5.1 Abundance One initial approach for exploring data is by visualizing abundance. miaViz offers the function plotAbundanceDensity where most abundant taxa can be plotted including several options. In the following few demonstrations are shown, using the (Lahti et al. 2014) dataset. A Jitter plot based on relative abundance data, similar to the one presented at (Salosensaari et al. 2021) supplementary figure 1, could be visualized as follows: # Loading data library(microbiomeDataSets) tse &lt;- atlas1006() # Counts relative abundances tse &lt;- transformSamples(tse, method = &quot;relabundance&quot;) library(miaViz) plotAbundanceDensity(tse, layout = &quot;jitter&quot;, abund_values = &quot;relabundance&quot;, n = 40, point_size=1, point_shape=19, point_alpha=0.1) + scale_x_log10(label=scales::percent) For instance, relative abundance values for the top 5 taxa can be visualized as a density plot over a log scaled axis, using “nationality” as an overlaying information: plotAbundanceDensity(tse, layout = &quot;density&quot;, abund_values = &quot;relabundance&quot;, n = 5, colour_by=&quot;nationality&quot;, point_alpha=1/10 ) + scale_x_log10() 5.2 Prevalence Prevalence is a measurement which describes in how many samples certain microbes were detected. Investigating the prevalence of microbes allows you either to focus on changes, which pertain to most of the samples, or to focus on less often found microbes, which are nonetheless abundantly found in a small number of samples. On the raw data, the population prevalence (frequency) at a 1% relative abundance threshold (detection = 1/100 and as_relative = TRUE), can look like this. The low prevalence in this example can be explained by rather different sample types as well as the in-depth nature of the data. head(getPrevalence(se, detection = 1/100, sort = TRUE, as_relative = TRUE)) ## 331820 158660 98605 326977 145149 114821 ## 0.2308 0.2308 0.1923 0.1923 0.1538 0.1538 The detection and as_relative can also be used to access, how many samples do pass a threshold for raw counts. Here the population prevalence (frequency) at the absolute abundance threshold (as_relative = FALSE) at read count 1 (detection = 1) is accessed. head(getPrevalence(se, detection = 1, sort = TRUE, abund_values = &quot;counts&quot;, as_relative = FALSE)) ## 145149 114821 108747 526804 98605 180658 ## 1 1 1 1 1 1 Note that, if the output should be used for subsetting or storing the data in the rowData, set sort = FALSE. 5.2.1 Prevalent microbiota analysis To investigate the microbiome data at a selected taxonomic level, two approaches are available. First the data can be agglomerated to the taxonomic level and getPrevalence be used on the result. altExp(se,&quot;Phylum&quot;) &lt;- agglomerateByRank(se, &quot;Phylum&quot;) head(getPrevalence(altExp(se,&quot;Phylum&quot;), detection = 1/100, sort = TRUE, abund_values = &quot;counts&quot;, as_relative = TRUE)) ## Phylum:Bacteroidetes Phylum:Proteobacteria Phylum:Actinobacteria ## 1.0000 0.9231 0.8462 ## Phylum:Cyanobacteria Phylum:Firmicutes Phylum:Verrucomicrobia ## 0.6154 0.5769 0.4615 Alternatively, the rank argument can be set to perform the agglomeration on the fly. altExp(se,&quot;Phylum&quot;) &lt;- agglomerateByRank(se, &quot;Phylum&quot;) head(getPrevalence(se, rank = &quot;Phylum&quot;, detection = 1/100, sort = TRUE, abund_values = &quot;counts&quot;, as_relative = TRUE)) ## Bacteroidetes Proteobacteria Actinobacteria Cyanobacteria Firmicutes ## 1.0000 0.9231 0.8462 0.6154 0.5769 ## Verrucomicrobia ## 0.4615 The difference in the naming scheme is that, by default, na.rm = TRUE is used for agglomeration in getPrevalence, whereas the default for agglomerateByRank is FALSE to prevent accidental data loss. If you only need the names of the prevalent taxa, getPrevalentTaxa is available. This returns the taxa that exceed the given prevalence and detection thresholds. getPrevalentTaxa(se, detection = 0, prevalence = 50/100) prev &lt;- getPrevalentTaxa(se, detection = 0, prevalence = 50/100, rank = &quot;Phylum&quot;, sort = TRUE) prev Note that the detection and prevalence thresholds are not the same, since detection can be applied to relative counts or absolute counts depending on whether as_relative is set TRUE or FALSE TODO See also related functions for the analysis of rare and variable taxa (rareMembers; rareAbundance; lowAbundance). 5.2.2 Plotting prevalence To plot the prevalence, the data is first added to the rowData. rowData(altExp(se,&quot;Phylum&quot;))$prevalence &lt;- getPrevalence(altExp(se,&quot;Phylum&quot;), detection = 1/100, sort = FALSE, abund_values = &quot;counts&quot;, as_relative = TRUE) Then it can be plotted via the plotting functions from the scater package. library(scater) plotRowData(altExp(se,&quot;Phylum&quot;), &quot;prevalence&quot;, colour_by = &quot;Phylum&quot;) Additionally, the prevalence can be plotted on the taxonomic tree using the miaViz package. altExps(se) &lt;- splitByRanks(se) altExps(se) &lt;- lapply(altExps(se), function(y){ rowData(y)$prevalence &lt;- getPrevalence(y, detection = 1/100, sort = FALSE, abund_values = &quot;counts&quot;, as_relative = TRUE) y }) top_phyla &lt;- getTopTaxa(altExp(se,&quot;Phylum&quot;), method=&quot;prevalence&quot;, top=10L, abund_values=&quot;counts&quot;) top_phyla_mean &lt;- getTopTaxa(altExp(se,&quot;Phylum&quot;), method=&quot;mean&quot;, top=10L, abund_values=&quot;counts&quot;) x &lt;- unsplitByRanks(se, ranks = taxonomyRanks(se)[1:6]) x &lt;- addTaxonomyTree(x) After some preparation the data is assembled and can be plotted via plotRowTree. library(miaViz) plotRowTree(x[rowData(x)$Phylum %in% top_phyla,], edge_colour_by = &quot;Phylum&quot;, tip_colour_by = &quot;prevalence&quot;, node_colour_by = &quot;prevalence&quot;) Figure 5.1: Prevalence of top phyla as judged by prevalence plotRowTree(x[rowData(x)$Phylum %in% top_phyla_mean,], edge_colour_by = &quot;Phylum&quot;, tip_colour_by = &quot;prevalence&quot;, node_colour_by = &quot;prevalence&quot;) Figure 5.2: Prevalence of top phyla as judged by mean abundance 5.3 Quality control library(mia) data(&quot;GlobalPatterns&quot;, package=&quot;mia&quot;) se &lt;- GlobalPatterns 5.3.1 Top taxa The getTopTaxa can be used for identifying top taxa in the data. top_features &lt;- getTopTaxa(se, method=&quot;median&quot;, top=10) tax_data &lt;- rowData(se)[top_features,taxonomyRanks(se)] tax_data ## DataFrame with 10 rows and 7 columns ## Kingdom Phylum Class Order ## &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; ## 549656 Bacteria Cyanobacteria Chloroplast Stramenopiles ## 331820 Bacteria Bacteroidetes Bacteroidia Bacteroidales ## 317182 Bacteria Cyanobacteria Chloroplast Stramenopiles ## 94166 Bacteria Proteobacteria Gammaproteobacteria Pasteurellales ## 279599 Bacteria Cyanobacteria Nostocophycideae Nostocales ## 158660 Bacteria Bacteroidetes Bacteroidia Bacteroidales ## 329744 Bacteria Actinobacteria Actinobacteria Actinomycetales ## 326977 Bacteria Actinobacteria Actinobacteria Bifidobacteriales ## 248140 Bacteria Bacteroidetes Bacteroidia Bacteroidales ## 550960 Bacteria Proteobacteria Gammaproteobacteria Enterobacteriales ## Family Genus Species ## &lt;character&gt; &lt;character&gt; &lt;character&gt; ## 549656 NA NA NA ## 331820 Bacteroidaceae Bacteroides NA ## 317182 NA NA NA ## 94166 Pasteurellaceae Haemophilus Haemophilusparainflu.. ## 279599 Nostocaceae Dolichospermum NA ## 158660 Bacteroidaceae Bacteroides NA ## 329744 ACK-M1 NA NA ## 326977 Bifidobacteriaceae Bifidobacterium Bifidobacteriumadole.. ## 248140 Bacteroidaceae Bacteroides Bacteroidescaccae ## 550960 Enterobacteriaceae Providencia NA 5.3.2 Library size The total counts/sample can be calculated using the perCellQCMetrics/addPerCellQC from the scater package. The former one just calculates the values, whereas the latter one directly adds them to the colData. library(scater) perCellQCMetrics(se) ## DataFrame with 26 rows and 3 columns ## sum detected total ## &lt;numeric&gt; &lt;numeric&gt; &lt;numeric&gt; ## CL3 864077 6964 864077 ## CC1 1135457 7679 1135457 ## SV1 697509 5729 697509 ## M31Fcsw 1543451 2667 1543451 ## M11Fcsw 2076476 2574 2076476 ## ... ... ... ... ## TS28 937466 2679 937466 ## TS29 1211071 2629 1211071 ## Even1 1216137 4213 1216137 ## Even2 971073 3130 971073 ## Even3 1078241 2776 1078241 se &lt;- addPerCellQC(se) colData(se) ## DataFrame with 26 rows and 10 columns ## X.SampleID Primer Final_Barcode Barcode_truncated_plus_T ## &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; &lt;factor&gt; ## CL3 CL3 ILBC_01 AACGCA TGCGTT ## CC1 CC1 ILBC_02 AACTCG CGAGTT ## SV1 SV1 ILBC_03 AACTGT ACAGTT ## M31Fcsw M31Fcsw ILBC_04 AAGAGA TCTCTT ## M11Fcsw M11Fcsw ILBC_05 AAGCTG CAGCTT ## ... ... ... ... ... ## TS28 TS28 ILBC_25 ACCAGA TCTGGT ## TS29 TS29 ILBC_26 ACCAGC GCTGGT ## Even1 Even1 ILBC_27 ACCGCA TGCGGT ## Even2 Even2 ILBC_28 ACCTCG CGAGGT ## Even3 Even3 ILBC_29 ACCTGT ACAGGT ## Barcode_full_length SampleType ## &lt;factor&gt; &lt;factor&gt; ## CL3 CTAGCGTGCGT Soil ## CC1 CATCGACGAGT Soil ## SV1 GTACGCACAGT Soil ## M31Fcsw TCGACATCTCT Feces ## M11Fcsw CGACTGCAGCT Feces ## ... ... ... ## TS28 GCATCGTCTGG Feces ## TS29 CTAGTCGCTGG Feces ## Even1 TGACTCTGCGG Mock ## Even2 TCTGATCGAGG Mock ## Even3 AGAGAGACAGG Mock ## Description sum detected ## &lt;factor&gt; &lt;numeric&gt; &lt;numeric&gt; ## CL3 Calhoun South Carolina Pine soil, pH 4.9 864077 6964 ## CC1 Cedar Creek Minnesota, grassland, pH 6.1 1135457 7679 ## SV1 Sevilleta new Mexico, desert scrub, pH 8.3 697509 5729 ## M31Fcsw M3, Day 1, fecal swab, whole body study 1543451 2667 ## M11Fcsw M1, Day 1, fecal swab, whole body study 2076476 2574 ## ... ... ... ... ## TS28 Twin #1 937466 2679 ## TS29 Twin #2 1211071 2629 ## Even1 Even1 1216137 4213 ## Even2 Even2 971073 3130 ## Even3 Even3 1078241 2776 ## total ## &lt;numeric&gt; ## CL3 864077 ## CC1 1135457 ## SV1 697509 ## M31Fcsw 1543451 ## M11Fcsw 2076476 ## ... ... ## TS28 937466 ## TS29 1211071 ## Even1 1216137 ## Even2 971073 ## Even3 1078241 The distribution of calculated library sizes can be visualized as a histogram (left), or by sorting the samples by library size (right). library(ggplot2) p1 &lt;- ggplot(as.data.frame(colData(se))) + geom_histogram(aes(x = sum), color = &quot;black&quot;, fill = &quot;gray&quot;, bins = 30) + labs(x = &quot;Library size&quot;, y = &quot;Frequency (n)&quot;) + # scale_x_log10(breaks = scales::trans_breaks(&quot;log10&quot;, function(x) 10^x), # labels = scales::trans_format(&quot;log10&quot;, scales::math_format(10^.x))) + theme_bw() + theme(panel.grid.major = element_blank(), # Removes the grid panel.grid.minor = element_blank(), panel.border = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = &quot;black&quot;)) # Adds y-axis library(dplyr) df &lt;- as.data.frame(colData(se)) %&gt;% arrange(sum) %&gt;% mutate(index = 1:n()) p2 &lt;- ggplot(df, aes(y = index, x = sum/1e6)) + geom_point() + labs(x = &quot;Library size (million reads)&quot;, y = &quot;Sample index&quot;) + theme_bw() + theme(panel.grid.major = element_blank(), # Removes the grid panel.grid.minor = element_blank(), panel.border = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = &quot;black&quot;)) # Adds y-axis library(patchwork) p1 + p2 Figure 5.3: Library size distribution. Library sizes - and other variables from colData - can be also visualized by using specified function called plotColData. library(ggplot2) # Sort samples by read count, order the factor levels, and store back to se as DataFrame # TODO: plotColData could include an option for sorting samples based on colData variables colData(se) &lt;- as.data.frame(colData(se)) %&gt;% arrange(X.SampleID) %&gt;% mutate(X.SampleID = factor(X.SampleID, levels=X.SampleID)) %&gt;% DataFrame plotColData(se,&quot;sum&quot;,&quot;X.SampleID&quot;, colour_by = &quot;SampleType&quot;) + theme(axis.text.x = element_text(angle = 45, hjust=1)) + labs(y = &quot;Library size (N)&quot;, x = &quot;Sample ID&quot;) Figure 5.4: Library sizes per sample. plotColData(se,&quot;sum&quot;,&quot;SampleType&quot;, colour_by = &quot;SampleType&quot;) + theme(axis.text.x = element_text(angle = 45, hjust=1)) Figure 5.5: Library sizes per sample type. Session Info View session info R version 4.1.1 (2021-08-10) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.3 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 stats graphics grDevices utils datasets methods [8] base other attached packages: [1] patchwork_1.1.1 dplyr_1.0.7 [3] scater_1.21.8 scuttle_1.3.1 [5] miaViz_1.1.4 ggraph_2.0.5 [7] ggplot2_3.3.5 microbiomeDataSets_1.1.5 [9] MultiAssayExperiment_1.19.16 mia_1.1.19 [11] TreeSummarizedExperiment_2.1.4 Biostrings_2.61.2 [13] XVector_0.33.0 SingleCellExperiment_1.15.2 [15] SummarizedExperiment_1.23.5 Biobase_2.53.0 [17] GenomicRanges_1.45.0 GenomeInfoDb_1.29.8 [19] IRanges_2.27.2 S4Vectors_0.31.5 [21] BiocGenerics_0.39.2 MatrixGenerics_1.5.4 [23] matrixStats_0.61.0-9001 BiocStyle_2.21.4 [25] rebook_1.3.1 loaded via a namespace (and not attached): [1] AnnotationHub_3.1.6 BiocFileCache_2.1.1 [3] igraph_1.2.6 plyr_1.8.6 [5] lazyeval_0.2.2 splines_4.1.1 [7] BiocParallel_1.27.17 digest_0.6.28 [9] yulab.utils_0.0.4 htmltools_0.5.2 [11] viridis_0.6.2 fansi_0.5.0 [13] magrittr_2.0.1 memoise_2.0.0 [15] ScaledMatrix_1.1.0 cluster_2.1.2 [17] DECIPHER_2.21.0 graphlayouts_0.7.1 [19] colorspace_2.0-2 blob_1.2.2 [21] rappdirs_0.3.3 ggrepel_0.9.1 [23] xfun_0.26 crayon_1.4.1 [25] RCurl_1.98-1.5 jsonlite_1.7.2 [27] graph_1.71.2 ape_5.5 [29] glue_1.4.2 polyclip_1.10-0 [31] gtable_0.3.0 zlibbioc_1.39.0 [33] DelayedArray_0.19.4 BiocSingular_1.9.1 [35] scales_1.1.1 DBI_1.1.1 [37] Rcpp_1.0.7 viridisLite_0.4.0 [39] xtable_1.8-4 decontam_1.13.0 [41] gridGraphics_0.5-1 tidytree_0.3.5 [43] bit_4.0.4 rsvd_1.0.5 [45] httr_1.4.2 dir.expiry_1.1.0 [47] ellipsis_0.3.2 farver_2.1.0 [49] pkgconfig_2.0.3 XML_3.99-0.8 [51] CodeDepends_0.6.5 sass_0.4.0 [53] dbplyr_2.1.1 utf8_1.2.2 [55] labeling_0.4.2 ggplotify_0.1.0 [57] tidyselect_1.1.1 rlang_0.4.11 [59] reshape2_1.4.4 later_1.3.0 [61] AnnotationDbi_1.55.1 munsell_0.5.0 [63] BiocVersion_3.14.0 tools_4.1.1 [65] cachem_1.0.6 DirichletMultinomial_1.35.0 [67] generics_0.1.0 RSQLite_2.2.8 [69] ExperimentHub_2.1.4 evaluate_0.14 [71] stringr_1.4.0 fastmap_1.1.0 [73] yaml_2.2.1 ggtree_3.1.5 [75] knitr_1.36 bit64_4.0.5 [77] tidygraph_1.2.0 purrr_0.3.4 [79] KEGGREST_1.33.0 nlme_3.1-153 [81] sparseMatrixStats_1.5.3 mime_0.12 [83] aplot_0.1.1 compiler_4.1.1 [85] beeswarm_0.4.0 filelock_1.0.2 [87] curl_4.3.2 png_0.1-7 [89] interactiveDisplayBase_1.31.2 treeio_1.17.2 [91] tweenr_1.0.2 tibble_3.1.5 [93] bslib_0.3.1 stringi_1.7.5 [95] highr_0.9 lattice_0.20-45 [97] Matrix_1.3-4 vegan_2.5-7 [99] permute_0.9-5 vctrs_0.3.8 [101] pillar_1.6.3 lifecycle_1.0.1 [103] BiocManager_1.30.16 jquerylib_0.1.4 [105] BiocNeighbors_1.11.0 cowplot_1.1.1 [107] bitops_1.0-7 irlba_2.3.3 [109] httpuv_1.6.3 R6_2.5.1 [111] bookdown_0.24 promises_1.2.0.1 [113] gridExtra_2.3 vipor_0.4.5 [115] codetools_0.2-18 MASS_7.3-54 [117] assertthat_0.2.1 withr_2.4.2 [119] GenomeInfoDbData_1.2.7 mgcv_1.8-38 [121] parallel_4.1.1 ggfun_0.0.4 [123] grid_4.1.1 beachmat_2.9.1 [125] tidyr_1.1.4 rmarkdown_2.11 [127] DelayedMatrixStats_1.15.4 ggnewscale_0.4.5 [129] ggforce_0.3.3 shiny_1.7.1 [131] ggbeeswarm_0.6.0 Bibliography "],["taxonomic-information.html", "Chapter 6 Taxonomic Information 6.1 Assigning taxonomic information. 6.2 Functions to access taxonomic information 6.3 Data agglomeration 6.4 Data transformation 6.5 Pick specific Session Info", " Chapter 6 Taxonomic Information .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } library(mia) data(&quot;GlobalPatterns&quot;, package=&quot;mia&quot;) se &lt;- GlobalPatterns Taxonomic information is a key part of analyzing microbiome data and without it, any type of data analysis probably will not make much sense. However, the degree of detail of taxonomic information differs depending on the dataset and annotation data used. Therefore, the mia package expects a loose assembly of taxonomic information and assumes certain key aspects: Taxonomic information is given as character vectors or factors in the rowData of a SummarizedExperiment object. The columns containing the taxonomic information must be named domain, kingdom, phylum, class, order, family, genus, species or with a capital first letter. the columns must be given in the order shown above column can be omited, but the order must remain 6.1 Assigning taxonomic information. There are a number of methods to assign taxonomic information. We like to give a short introduction about the methods available without ranking one over the other. This has to be your choice based on the result for the individual dataset. 6.1.1 dada2 The dada2 package (B. Callahan, McMurdie, and Holmes 2020) implements the assignTaxonomy function, which takes as input the ASV sequences associated with each row of data and a training dataset. For more information visit the dada2 homepage. 6.1.2 DECIPHER The DECIPHER package (Wright 2020) implements the IDTAXA algorithm to assign either taxonomic information or function information. For mia only the first option is of interest for now and more information can be found on the DECIPHER website. 6.2 Functions to access taxonomic information checkTaxonomy checks whether the taxonomic information is usable for mia checkTaxonomy(se) ## [1] TRUE Since the rowData can contain other data, taxonomyRanks will return the columns mia assumes to contain the taxonomic information. taxonomyRanks(se) ## [1] &quot;Kingdom&quot; &quot;Phylum&quot; &quot;Class&quot; &quot;Order&quot; &quot;Family&quot; &quot;Genus&quot; &quot;Species&quot; This can then be used to subset the rowData to columns needed. rowData(se)[,taxonomyRanks(se)] ## DataFrame with 19216 rows and 7 columns ## Kingdom Phylum Class Order Family ## &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; ## 549322 Archaea Crenarchaeota Thermoprotei NA NA ## 522457 Archaea Crenarchaeota Thermoprotei NA NA ## 951 Archaea Crenarchaeota Thermoprotei Sulfolobales Sulfolobaceae ## 244423 Archaea Crenarchaeota Sd-NA NA NA ## 586076 Archaea Crenarchaeota Sd-NA NA NA ## ... ... ... ... ... ... ## 278222 Bacteria SR1 NA NA NA ## 463590 Bacteria SR1 NA NA NA ## 535321 Bacteria SR1 NA NA NA ## 200359 Bacteria SR1 NA NA NA ## 271582 Bacteria SR1 NA NA NA ## Genus Species ## &lt;character&gt; &lt;character&gt; ## 549322 NA NA ## 522457 NA NA ## 951 Sulfolobus Sulfolobusacidocalda.. ## 244423 NA NA ## 586076 NA NA ## ... ... ... ## 278222 NA NA ## 463590 NA NA ## 535321 NA NA ## 200359 NA NA ## 271582 NA NA taxonomyRankEmpty checks for empty values in the given rank and returns a logical vector of length(x). all(!taxonomyRankEmpty(se, rank = &quot;Kingdom&quot;)) ## [1] TRUE table(taxonomyRankEmpty(se, rank = &quot;Genus&quot;)) ## ## FALSE TRUE ## 8008 11208 table(taxonomyRankEmpty(se, rank = &quot;Species&quot;)) ## ## FALSE TRUE ## 1413 17803 getTaxonomyLabels is a multi-purpose function, which turns taxonomic information into a character vector of length(x) head(getTaxonomyLabels(se)) ## [1] &quot;Class:Thermoprotei&quot; &quot;Class:Thermoprotei_1&quot; ## [3] &quot;Species:Sulfolobusacidocaldarius&quot; &quot;Class:Sd-NA&quot; ## [5] &quot;Class:Sd-NA_1&quot; &quot;Class:Sd-NA_2&quot; By default, this will use the lowest non-empty information to construct a string with the following scheme level:value. If all levels are the same, this part is omitted, but can be added by setting with_rank = TRUE. phylum &lt;- !is.na(rowData(se)$Phylum) &amp; vapply(data.frame(apply(rowData(se)[,taxonomyRanks(se)[3:7]],1L,is.na)),all,logical(1)) head(getTaxonomyLabels(se[phylum,])) ## [1] &quot;Crenarchaeota&quot; &quot;Crenarchaeota_1&quot; &quot;Crenarchaeota_2&quot; &quot;Actinobacteria&quot; ## [5] &quot;Actinobacteria_1&quot; &quot;Spirochaetes&quot; head(getTaxonomyLabels(se[phylum,], with_rank = TRUE)) ## [1] &quot;Phylum:Crenarchaeota&quot; &quot;Phylum:Crenarchaeota_1&quot; ## [3] &quot;Phylum:Crenarchaeota_2&quot; &quot;Phylum:Actinobacteria&quot; ## [5] &quot;Phylum:Actinobacteria_1&quot; &quot;Phylum:Spirochaetes&quot; By default the return value of getTaxonomyLabels contains only unique elements by passing it through make.unique. This step can be omitted by setting make_unique = FALSE. head(getTaxonomyLabels(se[phylum,], with_rank = TRUE, make_unique = FALSE)) ## [1] &quot;Phylum:Crenarchaeota&quot; &quot;Phylum:Crenarchaeota&quot; &quot;Phylum:Crenarchaeota&quot; ## [4] &quot;Phylum:Actinobacteria&quot; &quot;Phylum:Actinobacteria&quot; &quot;Phylum:Spirochaetes&quot; To apply the loop resolving function resolveLoop from the TreeSummarizedExperiment package (Huang 2020) within getTaxonomyLabels, set resolve_loops = TRUE. 6.2.1 Generate a taxonomic tree on the fly To create a taxonomic tree, taxonomyTree used the information and returns a phylo object. Duplicate information from the rowData is removed. taxonomyTree(se) ## ## Phylogenetic tree with 1645 tips and 1089 internal nodes. ## ## Tip labels: ## Species:Cenarchaeumsymbiosum, Species:pIVWA5, Species:CandidatusNitrososphaeragargensis, Species:SCA1145, Species:SCA1170, Species:Sulfolobusacidocaldarius, ... ## Node labels: ## root:ALL, Kingdom:Archaea, Phylum:Crenarchaeota, Class:C2, Class:Sd-NA, Class:Thaumarchaeota, ... ## ## Rooted; includes branch lengths. se &lt;- addTaxonomyTree(se) se ## class: TreeSummarizedExperiment ## dim: 19216 26 ## metadata(0): ## assays(1): counts ## rownames(19216): Class:Thermoprotei Class:Thermoprotei ... Phylum:SR1 ## Phylum:SR1 ## rowData names(7): Kingdom Phylum ... Genus Species ## colnames(26): CL3 CC1 ... Even2 Even3 ## colData names(7): X.SampleID Primer ... SampleType Description ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: a LinkDataFrame (19216 rows) ## rowTree: 1 phylo tree(s) (1645 leaves) ## colLinks: NULL ## colTree: NULL The implementation is based on the toTree function from the TreeSummarizedExperiment package (Huang 2020). 6.3 Data agglomeration One of the main applications of taxonomic information in regards to count data is to agglomerate count data on taxonomic levels and track the influence of changing conditions through these levels. For this mia contains the agglomerateByRank function. The ideal location to store the agglomerated data is as an alternative experiment. se &lt;- relAbundanceCounts(se) altExp(se, &quot;Family&quot;) &lt;- agglomerateByRank(se, rank = &quot;Family&quot;, agglomerateTree = TRUE) altExp(se, &quot;Family&quot;) ## class: TreeSummarizedExperiment ## dim: 603 26 ## metadata(0): ## assays(2): counts relabundance ## rownames(603): Class:Thermoprotei Family:Sulfolobaceae ... ## Family:Thermodesulfobiaceae Phylum:SR1 ## rowData names(7): Kingdom Phylum ... Genus Species ## colnames(26): CL3 CC1 ... Even2 Even3 ## colData names(7): X.SampleID Primer ... SampleType Description ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: a LinkDataFrame (603 rows) ## rowTree: 1 phylo tree(s) (496 leaves) ## colLinks: NULL ## colTree: NULL If multiple assays (counts and relabundance) exist, both will be agglomerated. assayNames(se) ## [1] &quot;counts&quot; &quot;relabundance&quot; assayNames(altExp(se, &quot;Family&quot;)) ## [1] &quot;counts&quot; &quot;relabundance&quot; assay(altExp(se, &quot;Family&quot;), &quot;relabundance&quot;)[1:5,1:7] ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr M11Plmr ## Class:Thermoprotei 0.0000000 0.000e+00 0 0 0 0 0.000e+00 ## Family:Sulfolobaceae 0.0000000 0.000e+00 0 0 0 0 2.305e-06 ## Class:Sd-NA 0.0000000 0.000e+00 0 0 0 0 0.000e+00 ## Order:NRP-J 0.0001991 2.070e-04 0 0 0 0 6.914e-06 ## Family:SAGMA-X 0.0000000 6.165e-06 0 0 0 0 0.000e+00 assay(altExp(se, &quot;Family&quot;), &quot;counts&quot;)[1:5,1:7] ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr M11Plmr ## Class:Thermoprotei 0 0 0 0 0 0 0 ## Family:Sulfolobaceae 0 0 0 0 0 0 1 ## Class:Sd-NA 0 0 0 0 0 0 0 ## Order:NRP-J 172 235 0 0 0 0 3 ## Family:SAGMA-X 0 7 0 0 0 0 0 altExpNames now consists of Family level data. This can be extended to use any level present in Kingdom, Phylum, Class, Order, Family, Genus, Species. 6.4 Data transformation Data transformation is a very common procedure in microbiome analysis. In transformation, each data point is replaced with transformed value that is calculated by applying transformation formula to the data point. Transformation can be used, for example, to normalize skewed data, or to reduce weight of bigger values compared to smaller values. In mia package, transformations are applied to abundance data. The transformed abundance table is stored back to ‘assays.’ mia includes transformation functions for sample-wise or column-wise transformation (‘transformSamples()’), and for feature-wise or row-wise transformation (‘transformFeatures()’). For complete list of available transformations and parameters, see function help. se &lt;- transformSamples(x = se, abund_values = &quot;counts&quot;, method = &quot;clr&quot;, pseudocount = 1, name = &quot;clr_transformation&quot;) head(assay(se, &quot;clr_transformation&quot;)) ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr ## Class:Thermoprotei -0.9552 -1.124 -0.7435 -0.2916 -0.2652 -0.356 ## Class:Thermoprotei -0.9552 -1.124 -0.7435 -0.2916 -0.2652 -0.356 ## Species:Sulfolobusacidocaldarius -0.9552 -1.124 -0.7435 -0.2916 -0.2652 -0.356 ## Class:Sd-NA -0.9552 -1.124 -0.7435 -0.2916 -0.2652 -0.356 ## Class:Sd-NA -0.9552 -1.124 -0.7435 -0.2916 -0.2652 -0.356 ## Class:Sd-NA -0.9552 -1.124 -0.7435 -0.2916 -0.2652 -0.356 ## M11Plmr F21Plmr M31Tong M11Tong LMEpi24M ## Class:Thermoprotei -0.4713 -0.2645 -0.2547 -0.1572 -0.359 ## Class:Thermoprotei -0.4713 -0.2645 -0.2547 -0.1572 -0.359 ## Species:Sulfolobusacidocaldarius 0.2219 -0.2645 -0.2547 -0.1572 -0.359 ## Class:Sd-NA -0.4713 -0.2645 -0.2547 -0.1572 -0.359 ## Class:Sd-NA -0.4713 -0.2645 -0.2547 -0.1572 -0.359 ## Class:Sd-NA -0.4713 -0.2645 -0.2547 -0.1572 -0.359 ## SLEpi20M AQC1cm AQC4cm AQC7cm NP2 ## Class:Thermoprotei 0.3704 2.6250 3.7862 4.0751 0.4502 ## Class:Thermoprotei -0.3228 -0.7072 0.2697 1.1459 -0.2429 ## Species:Sulfolobusacidocaldarius -0.3228 -0.7072 -0.8289 -0.8001 -0.2429 ## Class:Sd-NA -0.3228 -0.7072 2.3066 2.6011 -0.2429 ## Class:Sd-NA -0.3228 -0.7072 0.2697 -0.1069 -0.2429 ## Class:Sd-NA -0.3228 -0.7072 -0.1357 0.5862 -0.2429 ## NP3 NP5 TRRsed1 TRRsed2 TRRsed3 TS28 ## Class:Thermoprotei -0.433 -0.3606 -0.2677 -0.4828 -0.4384 -0.2691 ## Class:Thermoprotei -0.433 -0.3606 -0.2677 -0.4828 -0.4384 -0.2691 ## Species:Sulfolobusacidocaldarius -0.433 -0.3606 -0.2677 -0.4828 -0.4384 -0.2691 ## Class:Sd-NA -0.433 -0.3606 -0.2677 -0.4828 -0.4384 -0.2691 ## Class:Sd-NA -0.433 -0.3606 -0.2677 -0.4828 -0.4384 -0.2691 ## Class:Sd-NA -0.433 -0.3606 -0.2677 -0.4828 -0.4384 -0.2691 ## TS29 Even1 Even2 Even3 ## Class:Thermoprotei -0.2569 -0.3481 -0.2534 -0.2382 ## Class:Thermoprotei -0.2569 -0.3481 -0.2534 -0.2382 ## Species:Sulfolobusacidocaldarius -0.2569 -0.3481 -0.2534 -0.2382 ## Class:Sd-NA -0.2569 -0.3481 -0.2534 -0.2382 ## Class:Sd-NA -0.2569 -0.3481 -0.2534 -0.2382 ## Class:Sd-NA -0.2569 -0.3481 -0.2534 -0.2382 In ‘pa’ transformation, ‘threshold’ specifies the value that divides observations to be absent or present. By default, it is 0. se &lt;- transformFeatures(se, method = &quot;pa&quot;, threshold = 10) head(assay(se, &quot;pa&quot;)) ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr M11Plmr ## Class:Thermoprotei 0 0 0 0 0 0 0 ## Class:Thermoprotei 0 0 0 0 0 0 0 ## Species:Sulfolobusacidocaldarius 0 0 0 0 0 0 0 ## Class:Sd-NA 0 0 0 0 0 0 0 ## Class:Sd-NA 0 0 0 0 0 0 0 ## Class:Sd-NA 0 0 0 0 0 0 0 ## F21Plmr M31Tong M11Tong LMEpi24M SLEpi20M ## Class:Thermoprotei 0 0 0 0 0 ## Class:Thermoprotei 0 0 0 0 0 ## Species:Sulfolobusacidocaldarius 0 0 0 0 0 ## Class:Sd-NA 0 0 0 0 0 ## Class:Sd-NA 0 0 0 0 0 ## Class:Sd-NA 0 0 0 0 0 ## AQC1cm AQC4cm AQC7cm NP2 NP3 NP5 TRRsed1 ## Class:Thermoprotei 1 1 1 0 0 0 0 ## Class:Thermoprotei 0 0 0 0 0 0 0 ## Species:Sulfolobusacidocaldarius 0 0 0 0 0 0 0 ## Class:Sd-NA 0 1 1 0 0 0 0 ## Class:Sd-NA 0 0 0 0 0 0 0 ## Class:Sd-NA 0 0 0 0 0 0 0 ## TRRsed2 TRRsed3 TS28 TS29 Even1 Even2 Even3 ## Class:Thermoprotei 0 0 0 0 0 0 0 ## Class:Thermoprotei 0 0 0 0 0 0 0 ## Species:Sulfolobusacidocaldarius 0 0 0 0 0 0 0 ## Class:Sd-NA 0 0 0 0 0 0 0 ## Class:Sd-NA 0 0 0 0 0 0 0 ## Class:Sd-NA 0 0 0 0 0 0 0 # list of abundance tables that assays slot contains assays(se) ## List of length 4 ## names(4): counts relabundance clr_transformation pa 6.5 Pick specific Retrieving of specific elements that are required for specific analysis. For instance, extracting abundances for a specific taxa in all samples or all taxa in one sample. 6.5.1 Abundances of all taxa in specific sample taxa.abund.cc1 &lt;- getAbundanceSample(se, sample_id = &quot;CC1&quot;, abund_values = &quot;counts&quot;) taxa.abund.cc1[1:10] ## Class:Thermoprotei Class:Thermoprotei ## 0 0 ## Species:Sulfolobusacidocaldarius Class:Sd-NA ## 0 0 ## Class:Sd-NA Class:Sd-NA ## 0 0 ## Order:NRP-J Order:NRP-J ## 1 0 ## Order:NRP-J Order:NRP-J ## 194 5 6.5.2 Abundances of specific taxa in all samples taxa.abundances &lt;- getAbundanceFeature(se, feature_id = &quot;Phylum:Bacteroidetes&quot;, abund_values = &quot;counts&quot;) taxa.abundances[1:10] ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr M11Plmr F21Plmr M31Tong M11Tong ## 2 18 2 0 0 0 0 1 0 0 Session Info View session info R version 4.1.1 (2021-08-10) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.3 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 stats graphics grDevices utils datasets methods [8] base other attached packages: [1] mia_1.1.19 TreeSummarizedExperiment_2.1.4 [3] Biostrings_2.61.2 XVector_0.33.0 [5] SingleCellExperiment_1.15.2 SummarizedExperiment_1.23.5 [7] Biobase_2.53.0 GenomicRanges_1.45.0 [9] GenomeInfoDb_1.29.8 IRanges_2.27.2 [11] S4Vectors_0.31.5 BiocGenerics_0.39.2 [13] MatrixGenerics_1.5.4 matrixStats_0.61.0-9001 [15] BiocStyle_2.21.4 rebook_1.3.1 loaded via a namespace (and not attached): [1] ggbeeswarm_0.6.0 colorspace_2.0-2 [3] ellipsis_0.3.2 scuttle_1.3.1 [5] BiocNeighbors_1.11.0 ggrepel_0.9.1 [7] bit64_4.0.5 fansi_0.5.0 [9] decontam_1.13.0 splines_4.1.1 [11] codetools_0.2-18 sparseMatrixStats_1.5.3 [13] cachem_1.0.6 knitr_1.36 [15] scater_1.21.8 jsonlite_1.7.2 [17] cluster_2.1.2 graph_1.71.2 [19] BiocManager_1.30.16 compiler_4.1.1 [21] assertthat_0.2.1 Matrix_1.3-4 [23] fastmap_1.1.0 lazyeval_0.2.2 [25] BiocSingular_1.9.1 htmltools_0.5.2 [27] tools_4.1.1 rsvd_1.0.5 [29] gtable_0.3.0 glue_1.4.2 [31] GenomeInfoDbData_1.2.7 reshape2_1.4.4 [33] dplyr_1.0.7 Rcpp_1.0.7 [35] jquerylib_0.1.4 vctrs_0.3.8 [37] ape_5.5 nlme_3.1-153 [39] DECIPHER_2.21.0 DelayedMatrixStats_1.15.4 [41] xfun_0.26 stringr_1.4.0 [43] beachmat_2.9.1 lifecycle_1.0.1 [45] irlba_2.3.3 XML_3.99-0.8 [47] zlibbioc_1.39.0 MASS_7.3-54 [49] scales_1.1.1 parallel_4.1.1 [51] yaml_2.2.1 memoise_2.0.0 [53] gridExtra_2.3 ggplot2_3.3.5 [55] sass_0.4.0 stringi_1.7.5 [57] RSQLite_2.2.8 ScaledMatrix_1.1.0 [59] tidytree_0.3.5 permute_0.9-5 [61] filelock_1.0.2 BiocParallel_1.27.17 [63] rlang_0.4.11 pkgconfig_2.0.3 [65] bitops_1.0-7 evaluate_0.14 [67] lattice_0.20-45 purrr_0.3.4 [69] treeio_1.17.2 CodeDepends_0.6.5 [71] bit_4.0.4 tidyselect_1.1.1 [73] plyr_1.8.6 magrittr_2.0.1 [75] bookdown_0.24 R6_2.5.1 [77] generics_0.1.0 DelayedArray_0.19.4 [79] DBI_1.1.1 mgcv_1.8-38 [81] pillar_1.6.3 RCurl_1.98-1.5 [83] tibble_3.1.5 dir.expiry_1.1.0 [85] crayon_1.4.1 utf8_1.2.2 [87] rmarkdown_2.11 viridis_0.6.2 [89] grid_4.1.1 blob_1.2.2 [91] vegan_2.5-7 digest_0.6.28 [93] tidyr_1.1.4 munsell_0.5.0 [95] DirichletMultinomial_1.35.0 beeswarm_0.4.0 [97] viridisLite_0.4.0 vipor_0.4.5 [99] bslib_0.3.1 Bibliography "],["community-diversity.html", "Chapter 7 Community diversity 7.1 Estimation 7.2 Visualization Session Info", " Chapter 7 Community diversity .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } Diversity estimates are a central topic in microbiome data analysis. There are three commonly employed levels of diversity measurements, which are trying to put a number on different aspects of the questions associated with diversity (Whittaker 1960). Many different ways for estimating such diversity measurements have been described in the literature. Which measurement is best or applicable for your samples, is not the aim of the following sections. library(mia) data(&quot;GlobalPatterns&quot;, package=&quot;mia&quot;) se &lt;- GlobalPatterns Alpha diversity, also sometimes interchangeably used with the term species diversity, summarizes the distribution of species abundances in a given sample into a single number that depends on species richness and evenness. Diversity indices measure the overall community heterogeneity. A number of ecological diversity measures are available. The Hill coefficient combines many standard indices into a single equation that provides observed richness, inverse Simpson, and Shannon diversity, and generalized diversity as special cases. In general, diversity increases together with increasing richness and evenness. Sometimes richness, phylogenetic diversity, evenness, dominance, and rarity are considered to be variants of alpha diversity. Richness refers to the total number of species in a community (sample). The simplest richness index is the number of observed species (observed richness). Assuming limited sampling from the community, however, this may underestimate the true species richness. Several estimators are available, including for instance ACE (A and SM 1992) and Chao1 (A 1984). Richness estimates are unaffected by species abundances. Phylogenetic diversity was first proposed by (Faith 1992). Unlike the diversity measures mentioned above, Phylogenetic diversity (PD) measure incorporates information from phylogenetic relationships stored in phylo tree between species in a community (sample). The Faith’s PD is calculated as the sum of branch length of all species in a community (sample). Evenness focuses on species abundances, and can thus complement the number of species. A typical evenness index is the Pielou’s evenness, which is Shannon diversity normalized by the observed richness. Dominance indices are in general negatively correlated with diversity, and sometimes used in ecological literature. High dominance is obtained when one or few species have a high share of the total species abundance in the community. Rarity indices characterize the concentration of taxa at low abundance. Prevalence and detection thresholds determine rare taxa whose total concentration is represented as a rarity index. 7.1 Estimation Alpha diversity can be estimated with wrapper functions that interact with other packages implementing the calculation, such as vegan (Oksanen et al. 2020). 7.1.1 Richness Richness gives the number of features present within a community and can be calculated with estimateRichness. Each of the estimate diversity/richness/evenness/dominance functions adds the calculated measure(s) to the colData of the SummarizedExperiment under the given column name. Here, we calculate observed features as a measure of richness. se &lt;- mia::estimateRichness(se, abund_values = &quot;counts&quot;, index = &quot;observed&quot;, name=&quot;observed&quot;) head(colData(se)$observed) ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr ## 6964 7679 5729 2667 2574 3214 This allows access to the values to be analyzed directly from the colData, for example by plotting them using plotColData from the scater package (McCarthy et al. 2020). library(scater) plotColData(se, &quot;observed&quot;, &quot;SampleType&quot;, colour_by = &quot;SampleType&quot;) + theme(axis.text.x = element_text(angle=45,hjust=1)) + ylab(expression(Richness[Observed])) Figure 7.1: Shannon diversity estimates plotted grouped by sample type. 7.1.2 Diversity Non-Phylogenetic measures The main function, estimateDiversity, calculates the selected diversity index based on the selected assay data. se &lt;- mia::estimateDiversity(se, abund_values = &quot;counts&quot;, index = &quot;shannon&quot;, name = &quot;shannon&quot;) head(colData(se)$shannon) ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr ## 6.577 6.777 6.498 3.828 3.288 4.289 Alpha diversities can be visualized with boxplot. Here, Shannon index is compared between different sample type groups. Individual data points are visualized by plotting them as points with geom_jitter. geom_signif is used to test whether these differences are statistically significant. It adds p-values to plot. if( !require(ggsignif) ){ install.packages(ggsignif) } library(ggplot2) library(ggsignif) # Subsets the data. Takes only those samples that are from feces, skin, or tongue, # and creates data frame from the collected data df &lt;- as.data.frame(colData(se)[colData(se)$SampleType %in% c(&quot;Feces&quot;, &quot;Skin&quot;, &quot;Tongue&quot;), ]) # Changes old levels with new levels df$SampleType &lt;- factor(df$SampleType) # For significance testing, all different combinations are determined comb &lt;- split(t(combn(levels(df$SampleType), 2)), seq(nrow(t(combn(levels(df$SampleType), 2))))) ggplot(df, aes(x = SampleType, y = shannon)) + # Outliers are removed, because otherwise each data point would be plotted twice; # as an outlier of boxplot and as a point of dotplot. geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) + geom_signif(comparisons = comb, map_signif_level = FALSE) + theme(text = element_text(size = 10)) Phylogenetic diversity The phylogenetic diversity is calculated by mia::estimateDiversity. This is a faster re-implementation of the widely used function in picante W et al. (2010). Load picante R package and get the phylo stored in rowTree. se &lt;- mia::estimateDiversity(se, abund_values = &quot;counts&quot;, index = &quot;faith&quot;, name = &quot;faith&quot;) head(colData(se)$faith) ## [1] 250.5 262.3 208.5 117.9 119.8 135.8 7.1.3 Evenness Evenness can be calculated with estimateEvenness. se &lt;- estimateEvenness(se, abund_values = &quot;counts&quot;, index=&quot;simpson&quot;) head(colData(se)$simpson) ## [1] 0.026871 0.027197 0.047049 0.005179 0.004304 0.005011 7.1.4 Dominance Dominance can be calculated with estimateDominance. Here, the Relative index is calculated which is the relative abundance of the most dominant species in the sample. se &lt;- estimateDominance(se, abund_values = &quot;counts&quot;, index=&quot;relative&quot;) head(colData(se)$relative) ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr ## 0.03910 0.03226 0.01690 0.22981 0.21778 0.22329 7.1.5 Rarity mia package provides one rarity index called log-modulo skewness. It can be calculated with estimateDiversity. se &lt;- mia::estimateDiversity(se, abund_values = &quot;counts&quot;, index = &quot;log_modulo_skewness&quot;) head(colData(se)$log_modulo_skewness) ## [1] 2.061 2.061 2.061 2.061 2.061 2.061 7.2 Visualization A plot comparing all the diversity measures calculated above and stored in colData can then be constructed directly. plots &lt;- lapply(c(&quot;observed&quot;, &quot;shannon&quot;,&quot;simpson&quot;, &quot;relative&quot;, &quot;faith&quot;,&quot;log_modulo_skewness&quot;), plotColData, object = se, x = &quot;SampleType&quot;, colour_by = &quot;SampleType&quot;) plots &lt;- lapply(plots,&quot;+&quot;, theme(axis.text.x = element_text(angle=45,hjust=1))) ggpubr::ggarrange(plotlist = plots, nrow = 2, ncol = 3, common.legend = TRUE, legend = &quot;right&quot;) Session Info View session info R version 4.1.1 (2021-08-10) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.3 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 stats graphics grDevices utils datasets methods [8] base other attached packages: [1] ggsignif_0.6.3 scater_1.21.8 [3] ggplot2_3.3.5 scuttle_1.3.1 [5] mia_1.1.19 TreeSummarizedExperiment_2.1.4 [7] Biostrings_2.61.2 XVector_0.33.0 [9] SingleCellExperiment_1.15.2 SummarizedExperiment_1.23.5 [11] Biobase_2.53.0 GenomicRanges_1.45.0 [13] GenomeInfoDb_1.29.8 IRanges_2.27.2 [15] S4Vectors_0.31.5 BiocGenerics_0.39.2 [17] MatrixGenerics_1.5.4 matrixStats_0.61.0-9001 [19] BiocStyle_2.21.4 rebook_1.3.1 loaded via a namespace (and not attached): [1] readxl_1.3.1 backports_1.2.1 [3] plyr_1.8.6 lazyeval_0.2.2 [5] splines_4.1.1 BiocParallel_1.27.17 [7] digest_0.6.28 htmltools_0.5.2 [9] viridis_0.6.2 fansi_0.5.0 [11] magrittr_2.0.1 memoise_2.0.0 [13] ScaledMatrix_1.1.0 cluster_2.1.2 [15] DECIPHER_2.21.0 openxlsx_4.2.4 [17] colorspace_2.0-2 blob_1.2.2 [19] ggrepel_0.9.1 haven_2.4.3 [21] xfun_0.26 dplyr_1.0.7 [23] crayon_1.4.1 RCurl_1.98-1.5 [25] jsonlite_1.7.2 graph_1.71.2 [27] ape_5.5 glue_1.4.2 [29] gtable_0.3.0 zlibbioc_1.39.0 [31] DelayedArray_0.19.4 car_3.0-11 [33] BiocSingular_1.9.1 abind_1.4-5 [35] scales_1.1.1 DBI_1.1.1 [37] rstatix_0.7.0 Rcpp_1.0.7 [39] viridisLite_0.4.0 decontam_1.13.0 [41] tidytree_0.3.5 foreign_0.8-81 [43] bit_4.0.4 rsvd_1.0.5 [45] dir.expiry_1.1.0 ellipsis_0.3.2 [47] pkgconfig_2.0.3 XML_3.99-0.8 [49] farver_2.1.0 CodeDepends_0.6.5 [51] sass_0.4.0 utf8_1.2.2 [53] tidyselect_1.1.1 labeling_0.4.2 [55] rlang_0.4.11 reshape2_1.4.4 [57] cellranger_1.1.0 munsell_0.5.0 [59] tools_4.1.1 cachem_1.0.6 [61] DirichletMultinomial_1.35.0 generics_0.1.0 [63] RSQLite_2.2.8 broom_0.7.9 [65] evaluate_0.14 stringr_1.4.0 [67] fastmap_1.1.0 yaml_2.2.1 [69] knitr_1.36 bit64_4.0.5 [71] zip_2.2.0 purrr_0.3.4 [73] nlme_3.1-153 sparseMatrixStats_1.5.3 [75] compiler_4.1.1 beeswarm_0.4.0 [77] filelock_1.0.2 curl_4.3.2 [79] treeio_1.17.2 tibble_3.1.5 [81] bslib_0.3.1 stringi_1.7.5 [83] highr_0.9 forcats_0.5.1 [85] lattice_0.20-45 Matrix_1.3-4 [87] vegan_2.5-7 permute_0.9-5 [89] vctrs_0.3.8 pillar_1.6.3 [91] lifecycle_1.0.1 BiocManager_1.30.16 [93] jquerylib_0.1.4 BiocNeighbors_1.11.0 [95] data.table_1.14.2 cowplot_1.1.1 [97] bitops_1.0-7 irlba_2.3.3 [99] R6_2.5.1 bookdown_0.24 [101] gridExtra_2.3 rio_0.5.27 [103] vipor_0.4.5 codetools_0.2-18 [105] MASS_7.3-54 assertthat_0.2.1 [107] withr_2.4.2 GenomeInfoDbData_1.2.7 [109] mgcv_1.8-38 parallel_4.1.1 [111] hms_1.1.1 grid_4.1.1 [113] beachmat_2.9.1 tidyr_1.1.4 [115] rmarkdown_2.11 DelayedMatrixStats_1.15.4 [117] carData_3.0-4 ggpubr_0.4.0 [119] ggbeeswarm_0.6.0 .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } Bibliography "],["community-similarity.html", "Chapter 8 Community similarity 8.1 Explained variance 8.2 Estimating beta diversity 8.3 Other ordination methods 8.4 Visualizing the most dominant genus on PCoA 8.5 Community comparisons [TODO combine with the material above for simplicity?] 8.6 Further reading Session Info", " Chapter 8 Community similarity Where alpha diversity focuses on community variation within a community (sample), beta diversity quantifies (dis-)similarites between communities (samples). Some of the most popular beta diversity measures in microbiome research include Bray-Curtis index (for compositional data), Jaccard index (for presence / absence data, ignoring abundance information), Aitchison distance (Euclidean distance for clr transformed abundances, aiming to avoid the compositionality bias), and the Unifrac distances (that take into account the phylogenetic tree information). Only some of the commonly used beta diversity measures are actual distances; this is a mathematically well-defined concept and many ecological beta diversity measures, such as Bray-Curtis index, are not proper distances. Therefore, the term dissimilarity or beta diversity is commonly used. Technically, beta diversities are usually represented as dist objects, which contain triangular data describing the distance between each pair of samples. These distances can be further subjected to ordination. Ordination is a common concept in ecology that aims to reduce the dimensionality of the data for further evaluation or visualization. Ordination techniques aim to capture as much of essential information in the data as possible in a lower dimensional representation. Dimension reduction is bound to loose information but the common ordination techniques aim to preserve relevant information of sample similarities in an optimal way, which is defined in different ways by different methods. [TODO add references and/or link to ordination chapter instead?] Some of the most common ordination methods in microbiome research include Principal Component Analysis (PCA), metric and non-metric multi-dimensional scaling (MDS, NMDS), The MDS methods are also known as Principal Coordinates Analysis (PCoA). Other recently popular techniques include t-SNE and UMAP. 8.1 Explained variance The percentage of explained variance is typically shown for PCA ordination plots. This quantifies the proportion of overall variance in the data that is captured by the PCA axes, or how well the ordination axes reflect the original distances. Sometimes a similar measure is shown for MDS/PCoA. The interpretation is generally different, however, and hence we do not recommend using it. PCA is a special case of PCoA with Euclidean distances. With non-Euclidean dissimilarities PCoA uses a trick where the pointwise dissimilarities are first cast into similarities in a Euclidean space (with some information loss i.e. stress) and then projected to the maximal variance axes. In this case, the maximal variance axes do not directly reflect the correspondence of the projected distances and original distances, as they do for PCA. In typical use cases, we would like to know how well the ordination reflects the original similarity structures; then the quantity of interest is the so-called “stress” function, which measures the difference in pairwise similarities between the data points in the original (high-dimensional) vs. projected (low-dimensional) space. Hence, we propose that for PCoA and other ordination methods, users would report relative stress (varies in the unit interval; the smaller the better). This can be calculated as shown below. For further examples, check the note from Huber lab. # Example data library(mia) data(GlobalPatterns, package=&quot;mia&quot;) # Data matrix (features x samples) x &lt;- GlobalPatterns x &lt;- transformCounts(x, method = &quot;relabundance&quot;) x &lt;- assay(x, &quot;relabundance&quot;) # Quantify dissimilarities in the original feature space library(vegan) d0 &lt;- as.matrix(vegdist(t(x), &quot;bray&quot;)) # PCoA Ordination pcoa &lt;- as.data.frame(cmdscale(d0, k = 2)) names(pcoa) &lt;- c(&quot;PCoA1&quot;, &quot;PCoA2&quot;) # Quantify dissimilarities in the ordination space dp &lt;- as.matrix(dist(pcoa)) # Calculate stress i.e. relative difference in the original and # projected dissimilarities stress &lt;- sum((dp - d0)^2)/sum(d0^2) Shepard plot visualizes the original versus projected (ordination) dissimilarities between the data points: ord &lt;- order(as.vector(d0)) df &lt;- data.frame(d0 = as.vector(d0)[ord], dmds = as.vector(dp)[ord]) library(ggplot2) ggplot(aes(x = d0, y = dmds), data=df) + geom_smooth() + geom_point() + labs(title = &quot;Shepard plot&quot;, x = &quot;Original distance&quot;, y = &quot;MDS distance&quot;, subtitle = paste(&quot;Stress:&quot;, round(stress, 2))) + theme_bw() 8.2 Estimating beta diversity In the following examples dissimilarities are calculated by functions supplied to the FUN argument. This function can be defined by the user. It must return a dist function, which can then be used to calculate reduced dimensions either via ordination methods (such as MDS or NMDS), and the results can be stored in the reducedDim. This entire process is wrapped in the runMDS and runNMDS functions. library(scater) se &lt;- GlobalPatterns se &lt;- runMDS(se, FUN = vegan::vegdist, name = &quot;MDS_BC&quot;, exprs_values = &quot;counts&quot;) Sample similarities can be visualized on a lower-dimensional display (typically 2D) using the plotReducedDim function in the scater package. This provides also further tools to incorporate additional information using variations in color, shape or size. # Create ggplot object p &lt;- plotReducedDim(se, &quot;MDS_BC&quot;, colour_by = &quot;SampleType&quot;) # Add explained variance for each axis e &lt;- attr(reducedDim(se, &quot;MDS_BC&quot;), &quot;eig&quot;); rel_eig &lt;- e/sum(e[e&gt;0]) p &lt;- p + labs(x = paste(&quot;PCoA 1 (&quot;, round(100 * rel_eig[[1]],1), &quot;%&quot;, &quot;)&quot;, sep = &quot;&quot;), y = paste(&quot;PCoA 2 (&quot;, round(100 * rel_eig[[2]],1), &quot;%&quot;, &quot;)&quot;, sep = &quot;&quot;)) print(p) Figure 8.1: MDS plot based on the Bray-Curtis distances on the GlobalPattern dataset. With additional tools from the ggplot2 universe, comparisons can be performed informing on the applicability to visualize sample similarities in a meaningful way. se &lt;- runMDS(se, FUN = vegan::vegdist, name = &quot;MDS_euclidean&quot;, method = &quot;euclidean&quot;, exprs_values = &quot;counts&quot;) se &lt;- runNMDS(se, FUN = vegan::vegdist, name = &quot;NMDS_BC&quot;) ## initial value 47.733208 ## iter 5 value 33.853364 ## iter 10 value 32.891200 ## final value 32.823570 ## converged se &lt;- runNMDS(se, FUN = vegan::vegdist, name = &quot;NMDS_euclidean&quot;, method = &quot;euclidean&quot;) ## initial value 31.882673 ## final value 31.882673 ## converged plots &lt;- lapply(c(&quot;MDS_BC&quot;,&quot;MDS_euclidean&quot;,&quot;NMDS_BC&quot;,&quot;NMDS_euclidean&quot;), plotReducedDim, object = se, colour_by = &quot;SampleType&quot;) ggpubr::ggarrange(plotlist = plots, nrow = 2, ncol = 2, common.legend = TRUE, legend = &quot;right&quot;) Figure 8.2: Comparison of MDS and NMDS plots based on the Bray-Curtis or euclidean distances on the GlobalPattern dataset. The UniFrac method is a special case, as it requires data on the relationship of features in form on a phylo tree. calculateUniFrac performs the calculation to return a dist object, which can again be used within runMDS. se &lt;- runMDS(se, FUN = calculateUniFrac, name = &quot;UniFrac&quot;, tree = rowTree(se), ntop = nrow(se), exprs_values = &quot;counts&quot;) plotReducedDim(se, &quot;UniFrac&quot;, colour_by = &quot;SampleType&quot;) Figure 8.3: UniFrac distances scaled by MDS of the GlobalPattern dataset. 8.3 Other ordination methods Other dimension reduction methods, such as PCA, t-SNE and UMAP are inherited directly from the scater package. se &lt;- runPCA(se, name = &quot;PCA&quot;, exprs_values = &quot;counts&quot;, ncomponents = 10) plotReducedDim(se, &quot;PCA&quot;, colour_by = &quot;SampleType&quot;) Figure 8.4: PCA plot on the GlobalPatterns data set containing sample from different sources. As mentioned before, applicability of the different methods depends on your sample set. FIXME: let us switch to UMAP for the examples? se &lt;- runTSNE(se, name = &quot;TSNE&quot;, exprs_values = &quot;counts&quot;, ncomponents = 3) plotReducedDim(se, &quot;TSNE&quot;, colour_by = &quot;SampleType&quot;, ncomponents = c(1:3)) Figure 8.5: t-SNE plot on the GlobalPatterns data set containing sample from different sources. 8.4 Visualizing the most dominant genus on PCoA In this section we visualize most dominant genus in the alcohol study dataset from curatedMetagenomicData on PCoA. A similar visualization has been used in Taxonomic signatures of cause-specific mortality risk in human gut microbiome, Salosensaari et al. (2021). # Installing the package if (!require(curatedMetagenomicData)){ BiocManager::install(&quot;curatedMetagenomicData&quot;) } Retrieving data as a TreeSummarizedExperiment object. library(curatedMetagenomicData) library(dplyr) library(DT) # Querying the data tse &lt;- sampleMetadata %&gt;% filter(age &gt;= 18) %&gt;% # taking only data of age 18 or above filter(!is.na(alcohol)) %&gt;% # excluding missing values returnSamples(&quot;relative_abundance&quot;) tse ## class: TreeSummarizedExperiment ## dim: 1057 780 ## metadata(0): ## assays(1): relative_abundance ## rownames(1057): ## k__Bacteria|p__Actinobacteria|c__Actinobacteria|o__Propionibacteriales|f__Propionibacteriaceae|g__Cutibacterium|s__Cutibacterium_acnes ## k__Bacteria|p__Proteobacteria|c__Gammaproteobacteria|o__Enterobacterales|f__Enterobacteriaceae|g__Klebsiella|s__Klebsiella_pneumoniae ## ... ## k__Bacteria|p__Firmicutes|c__Clostridia|o__Clostridiales|f__Lachnospiraceae|g__Anaerostipes|s__Anaerostipes_sp_494a ## k__Bacteria|p__Bacteroidetes|c__Bacteroidia|o__Bacteroidales|f__Barnesiellaceae|g__Barnesiella|s__Barnesiella_viscericola ## rowData names(7): Kingdom Phylum ... Genus Species ## colnames(780): WBE003 WBE004 ... YSZC12003_37879 YSZC12003_37880 ## colData names(129): study_name subject_id ... ALT eGFR ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: a LinkDataFrame (1057 rows) ## rowTree: 1 phylo tree(s) (10430 leaves) ## colLinks: NULL ## colTree: NULL Agglomerating the data at a Genus level and getting the dominant taxa per sample. tse_Genus &lt;- agglomerateByRank(tse, rank=&quot;Genus&quot;) tse_Genus &lt;- addPerSampleDominantTaxa(tse_Genus,abund_values=&quot;relative_abundance&quot;, name = &quot;dominant_taxa&quot;) Performing PCoA with Bray-Curtis dissimilarity. tse_Genus &lt;- runMDS(tse_Genus, FUN = vegan::vegdist, name = &quot;PCoA_BC&quot;, exprs_values = &quot;relative_abundance&quot;) Getting top taxa and visualizing the abundance on PCoA. # Getting the top taxa top_taxa &lt;- getTopTaxa(tse_Genus,top = 6, abund_values = &quot;relative_abundance&quot;) # Naming all the rest of non top-taxa as &quot;Other&quot; most_abundant &lt;- lapply(colData(tse_Genus)$dominant_taxa, function(x){if (x %in% top_taxa) {x} else {&quot;Other&quot;}}) # Storing the previous results as a new column within colData colData(tse_Genus)$most_abundant &lt;- as.character(most_abundant) # Calculating percentage of the most abundant most_abundant_freq &lt;- table(as.character(most_abundant)) most_abundant_percent &lt;- round(most_abundant_freq/sum(most_abundant_freq)*100, 1) # Retrieving the explained variance e &lt;- attr(reducedDim(tse_Genus, &quot;PCoA_BC&quot;), &quot;eig&quot;); var_explained &lt;- e/sum(e[e&gt;0])*100 # Visualization plot &lt;-plotReducedDim(tse_Genus,&quot;PCoA_BC&quot;, colour_by = &quot;most_abundant&quot;) + scale_colour_manual(values = c(&quot;black&quot;, &quot;blue&quot;, &quot;lightblue&quot;, &quot;darkgray&quot;, &quot;magenta&quot;, &quot;darkgreen&quot;, &quot;red&quot;), labels=paste0(names(most_abundant_percent),&quot;(&quot;,most_abundant_percent,&quot;%)&quot;))+ labs(x=paste(&quot;PC 1 (&quot;,round(var_explained[1],1),&quot;%)&quot;), y=paste(&quot;PC 2 (&quot;,round(var_explained[2],1),&quot;%)&quot;), color=&quot;&quot;) plot Note: A 3D interactive version of the earlier plot can be found from here. Similarly let’s visualize and compare the alcohol sub-polulation. # Calculating the frequencies and percentages for both categories freq_yes &lt;- table(as.character(most_abundant[colData(tse_Genus)$alcohol==&quot;yes&quot;])) freq_no &lt;- table(as.character(most_abundant[colData(tse_Genus)$alcohol==&quot;no&quot;])) percent_yes &lt;- round(freq_yes/sum(freq_yes)*100, 1) percent_no &lt;- round(freq_no/sum(freq_no)*100, 1) # Visualization plotReducedDim(tse_Genus[,colData(tse_Genus)$alcohol==&quot;yes&quot;], &quot;PCoA_BC&quot;, colour_by = &quot;most_abundant&quot;) + scale_colour_manual(values = c(&quot;black&quot;, &quot;blue&quot;, &quot;lightblue&quot;, &quot;darkgray&quot;, &quot;magenta&quot;, &quot;darkgreen&quot;, &quot;red&quot;), labels=paste0(names(percent_yes),&quot;(&quot;,percent_yes,&quot;%)&quot;))+ labs(x=paste(&quot;PC 1 (&quot;,round(var_explained[1],1),&quot;%)&quot;), y=paste(&quot;PC 2 (&quot;,round(var_explained[2],1),&quot;%)&quot;), title = &quot;alcohol = yes&quot;, color=&quot;&quot;) plotReducedDim(tse_Genus[,colData(tse_Genus)$alcohol==&quot;no&quot;], &quot;PCoA_BC&quot;, colour_by = &quot;most_abundant&quot;) + scale_colour_manual(values = c(&quot;black&quot;, &quot;blue&quot;, &quot;lightblue&quot;, &quot;darkgray&quot;, &quot;magenta&quot;, &quot;darkgreen&quot;, &quot;red&quot;), labels=paste0(names(percent_no),&quot;(&quot;,percent_no,&quot;%)&quot;))+ labs(x=paste(&quot;PC 1 (&quot;,round(var_explained[1],1),&quot;%)&quot;), y=paste(&quot;PC 2 (&quot;,round(var_explained[2],1),&quot;%)&quot;), title = &quot;alcohol = no&quot;, color=&quot;&quot;) 8.5 Community comparisons [TODO combine with the material above for simplicity?] A typical comparison of community composition starts with a visual comparison of the groups on a 2D ordination. Let us load an example data set: library(microbiomeDataSets) se.lahti &lt;- LahtiMData() Then we estimate relative abundances and MDS ordination based on Bray-Curtis (BC) dissimilarity between the groups, and visualize the results. se.lahti &lt;- relAbundanceCounts(se.lahti) se.lahti &lt;- runNMDS(se.lahti, FUN = vegan::vegdist, name = &quot;BC&quot;, nmdsFUN = &quot;monoMDS&quot;, exprs_values = &quot;relabundance&quot;, keep_dist = TRUE) plotReducedDim(se.lahti, &quot;BC&quot;, colour_by = &quot;group&quot;) No clear difference between the groups can be visually observed. 8.5.1 Testing differences in community composition between sample groups The permutational analysis of variance (PERMANOVA) (Anderson 2001) is a widely used non-parametric multivariate method that can be used to estimate the actual statistical significance of differences in the observed community composition between two groups of samples. PERMANOVA evaluates the hypothesis that the centroids and dispersion of the community are equivalent between the compared groups. A small p-value indicates that the compared groups have, on average, a different community composition. This method is implemented in the vegan package (function adonis). library(vegan) permanova &lt;- vegan::adonis(t(assay(se.lahti,&quot;relabundance&quot;)) ~ group, data = colData(se.lahti), permutations = 9999) # P-value print(as.data.frame(permanova$aov.tab)[&quot;group&quot;, &quot;Pr(&gt;F)&quot;]) ## [1] 0.2685 In this case, the community composition is not significantly different between the groups. Let us visualize the model coefficients for species that exhibit the largest differences between the groups. This gives some insights into how the groups tend to differ from each other in terms of community composition. coef &lt;- coefficients(permanova)[&quot;group1&quot;,] top.coef &lt;- sort(head(coef[rev(order(abs(coef)))],20)) ggplot(data.frame(x = top.coef, y = factor(names(top.coef), unique(names(top.coef)))), aes(x = x, y = y)) + geom_bar(stat=&quot;identity&quot;) + labs(x=&quot;&quot;,y=&quot;&quot;,title=&quot;Top Taxa&quot;) + theme_bw() In the above example, the largest differences between the two groups can be attributed to Bacteroides intestinalis (elevated in the first group) and Faecalibacterium prausnitzii (elevated in the second group), and many other co-varying species. 8.5.2 Checking the homogeneity condition It is important to note that the application of PERMANOVA assumes homogeneous group dispersions (variances). This can be tested with the PERMDISP2 method (Anderson 2006). anova(vegan::betadisper(attr(reducedDim(se.lahti,&quot;BC&quot;),&quot;dist&quot;), colData(se.lahti)$group)) ## Analysis of Variance Table ## ## Response: Distances ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Groups 1 0.000 0.00002 0 0.95 ## Residuals 42 0.158 0.00376 In our example, the groups have similar dispersion, and PERMANOVA is an appropriate choice for comparing community compositions. 8.6 Further reading In certain settings, beta diversities might be used to group samples without prior knowledge. For this we want to point to excellent resources on how to extract information from the clusters. See also community typing. Session Info View session info R version 4.1.1 (2021-08-10) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.3 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 stats graphics grDevices utils datasets methods [8] base other attached packages: [1] microbiomeDataSets_1.1.5 MultiAssayExperiment_1.19.16 [3] DT_0.19 dplyr_1.0.7 [5] curatedMetagenomicData_3.1.10 scater_1.21.8 [7] scuttle_1.3.1 ggplot2_3.3.5 [9] vegan_2.5-7 lattice_0.20-45 [11] permute_0.9-5 mia_1.1.19 [13] TreeSummarizedExperiment_2.1.4 Biostrings_2.61.2 [15] XVector_0.33.0 SingleCellExperiment_1.15.2 [17] SummarizedExperiment_1.23.5 Biobase_2.53.0 [19] GenomicRanges_1.45.0 GenomeInfoDb_1.29.8 [21] IRanges_2.27.2 S4Vectors_0.31.5 [23] BiocGenerics_0.39.2 MatrixGenerics_1.5.4 [25] matrixStats_0.61.0-9001 BiocStyle_2.21.4 [27] rebook_1.3.1 loaded via a namespace (and not attached): [1] readxl_1.3.1 backports_1.2.1 [3] AnnotationHub_3.1.6 BiocFileCache_2.1.1 [5] plyr_1.8.6 lazyeval_0.2.2 [7] splines_4.1.1 BiocParallel_1.27.17 [9] digest_0.6.28 htmltools_0.5.2 [11] viridis_0.6.2 fansi_0.5.0 [13] magrittr_2.0.1 memoise_2.0.0 [15] ScaledMatrix_1.1.0 cluster_2.1.2 [17] DECIPHER_2.21.0 openxlsx_4.2.4 [19] colorspace_2.0-2 rappdirs_0.3.3 [21] blob_1.2.2 ggrepel_0.9.1 [23] haven_2.4.3 xfun_0.26 [25] crayon_1.4.1 RCurl_1.98-1.5 [27] jsonlite_1.7.2 graph_1.71.2 [29] ape_5.5 glue_1.4.2 [31] gtable_0.3.0 zlibbioc_1.39.0 [33] DelayedArray_0.19.4 car_3.0-11 [35] BiocSingular_1.9.1 abind_1.4-5 [37] scales_1.1.1 DBI_1.1.1 [39] rstatix_0.7.0 Rcpp_1.0.7 [41] xtable_1.8-4 viridisLite_0.4.0 [43] decontam_1.13.0 tidytree_0.3.5 [45] foreign_0.8-81 bit_4.0.4 [47] rsvd_1.0.5 htmlwidgets_1.5.4 [49] httr_1.4.2 dir.expiry_1.1.0 [51] ellipsis_0.3.2 pkgconfig_2.0.3 [53] XML_3.99-0.8 farver_2.1.0 [55] dbplyr_2.1.1 CodeDepends_0.6.5 [57] sass_0.4.0 utf8_1.2.2 [59] AnnotationDbi_1.55.1 later_1.3.0 [61] tidyselect_1.1.1 labeling_0.4.2 [63] rlang_0.4.11 reshape2_1.4.4 [65] BiocVersion_3.14.0 cellranger_1.1.0 [67] munsell_0.5.0 tools_4.1.1 [69] cachem_1.0.6 ExperimentHub_2.1.4 [71] DirichletMultinomial_1.35.0 generics_0.1.0 [73] RSQLite_2.2.8 broom_0.7.9 [75] evaluate_0.14 stringr_1.4.0 [77] fastmap_1.1.0 yaml_2.2.1 [79] knitr_1.36 bit64_4.0.5 [81] zip_2.2.0 purrr_0.3.4 [83] KEGGREST_1.33.0 nlme_3.1-153 [85] sparseMatrixStats_1.5.3 mime_0.12 [87] compiler_4.1.1 png_0.1-7 [89] interactiveDisplayBase_1.31.2 beeswarm_0.4.0 [91] filelock_1.0.2 curl_4.3.2 [93] ggsignif_0.6.3 treeio_1.17.2 [95] tibble_3.1.5 bslib_0.3.1 [97] stringi_1.7.5 highr_0.9 [99] forcats_0.5.1 Matrix_1.3-4 [101] vctrs_0.3.8 pillar_1.6.3 [103] lifecycle_1.0.1 BiocManager_1.30.16 [105] jquerylib_0.1.4 BiocNeighbors_1.11.0 [107] data.table_1.14.2 cowplot_1.1.1 [109] bitops_1.0-7 irlba_2.3.3 [111] httpuv_1.6.3 R6_2.5.1 [113] promises_1.2.0.1 bookdown_0.24 [115] gridExtra_2.3 rio_0.5.27 [117] vipor_0.4.5 codetools_0.2-18 [119] MASS_7.3-54 assertthat_0.2.1 [121] withr_2.4.2 GenomeInfoDbData_1.2.7 [123] mgcv_1.8-38 parallel_4.1.1 [125] hms_1.1.1 grid_4.1.1 [127] beachmat_2.9.1 tidyr_1.1.4 [129] rmarkdown_2.11 DelayedMatrixStats_1.15.4 [131] carData_3.0-4 Rtsne_0.15 [133] ggpubr_0.4.0 shiny_1.7.1 [135] ggbeeswarm_0.6.0 Bibliography "],["microbiome-community.html", "Chapter 9 Community composition 9.1 Visualizing taxonomic composition", " Chapter 9 Community composition .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } ## Loading required package: ecodist library(mia) data(&quot;GlobalPatterns&quot;, package=&quot;mia&quot;) tse &lt;- GlobalPatterns 9.1 Visualizing taxonomic composition 9.1.1 Composition barplot A typical way to visualize microbiome composition is by using composition barplot. In the following, relative abundance is calculated and top taxa are retrieved for the Phylum rank. Thereafter, the barplot is visualized ordering rank by abundance values and samples by “Bacteroidetes”: library(miaViz) # Computing relative abundance tse &lt;- relAbundanceCounts(tse) # Getting top taxa on a Phylum level tse_phylum &lt;- agglomerateByRank(tse, rank =&quot;Phylum&quot;, onRankOnly=TRUE) top_taxa &lt;- getTopTaxa(tse_phylum,top = 5, abund_values = &quot;relabundance&quot;) # Renaming the &quot;Phylum&quot; rank to keep only top taxa and the rest to &quot;Other&quot; phylum_renamed &lt;- lapply(rowData(tse)$Phylum, function(x){if (x %in% top_taxa) {x} else {&quot;Other&quot;}}) rowData(tse)$Phylum &lt;- as.character(phylum_renamed) # Visualizing the composition barplot, with samples order by &quot;Bacteroidetes&quot; plotAbundance(tse, abund_values=&quot;relabundance&quot;, rank = &quot;Phylum&quot;, order_rank_by=&quot;abund&quot;, order_sample_by = &quot;Bacteroidetes&quot;) 9.1.2 Composition heatmap Community composition can be visualized with heatmap, where the horizontal axis represents samples and the vertical axis the taxa. Color of each intersection point represents abundance of a taxon in a specific sample. Here, abundances are first CLR (centered log-ratio) transformed to remove compositionality bias. Then Z transformation is applied to CLR-transformed data. This shifts all taxa to zero mean and unit variance, allowing visual comparison between taxa that have different absolute abundance levels. After these rough visual exploration techniques, we can visualize the abundances at Phylum level. library(ggplot2) # Add clr-transformation on samples tse_phylum &lt;- transformSamples(tse_phylum, method = &quot;clr&quot;, pseudocount = 1) # Add z-transformation on features (taxa) tse_phylum &lt;- transformFeatures(tse_phylum, abund_values = &quot;clr&quot;, method = &quot;z&quot;, name = &quot;clr_z&quot;) # Melts the assay df &lt;- meltAssay(tse_phylum, abund_values = &quot;clr_z&quot;) # Determines the scaling of colours maxval &lt;- round(max(abs(df$clr_z))) limits &lt;- c(-maxval, maxval) breaks &lt;- seq(from = min(limits), to = max(limits), by = 0.5) colours &lt;- c(&quot;darkblue&quot;, &quot;blue&quot;, &quot;white&quot;, &quot;red&quot;, &quot;darkred&quot;) # Creates a ggplot object ggplot(df, aes(x = SampleID, y = FeatureID, fill = clr_z)) + geom_tile() + scale_fill_gradientn(name = &quot;CLR + Z transform&quot;, breaks = breaks, limits = limits, colours = colours) + theme(text = element_text(size=10), axis.text.x = element_text(angle=45, hjust=1), legend.key.size = unit(1, &quot;cm&quot;)) + labs(x = &quot;Samples&quot;, y = &quot;Taxa&quot;) pheatmap is a package that provides methods to plot clustered heatmaps. if(!require(pheatmap)){ install.packages(&quot;pheatmap&quot;) } library(pheatmap) # Takes subset: only samples from feces, skin, or tongue tse_phylum_subset &lt;- tse_phylum[ , colData(tse_phylum)$SampleType %in% c(&quot;Feces&quot;, &quot;Skin&quot;, &quot;Tongue&quot;) ] # Does clr-transformation tse_phylum_subset &lt;- transformSamples(tse_phylum_subset, method = &quot;clr&quot;, pseudocount = 1) # Does z-transformation tse_phylum_subset &lt;- transformFeatures(tse_phylum_subset, abund_values = &quot;clr&quot;, method = &quot;z&quot;, name = &quot;clr_z&quot;) # Get n most abundant taxa, and subsets the data by them top_taxa &lt;- getTopTaxa(tse_phylum_subset, top = 20) tse_phylum_subset &lt;- tse_phylum_subset[top_taxa, ] # Gets the assay table mat &lt;- assay(tse_phylum_subset, &quot;clr_z&quot;) # Creates the heatmap pheatmap(mat) We can create clusters by hierarchical clustering and visualize them with dendrogram. # Package for creating dendrograms if(!require(dendextend)){ install.packages(&quot;dendextend&quot;) } library(dendextend) # Hierarchical clustering taxa_clusters &lt;- hclust(dist(mat), method = &quot;complete&quot;) # Creates a dendrogram taxa_dendrogram &lt;- as.dendrogram(taxa_clusters) # Plots it plot(taxa_dendrogram) Based on dendrogram, we decide to create three clusters. # Creates clusters taxa_clusters &lt;- cutree(tree = taxa_dendrogram, k = 3) # Prints taxa and their clusters taxa_clusters ## Firmicutes Bacteroidetes Proteobacteria Actinobacteria ## 1 1 2 3 ## Cyanobacteria Fusobacteria Tenericutes Verrucomicrobia ## 2 2 1 1 ## Lentisphaerae Euryarchaeota Acidobacteria Spirochaetes ## 1 1 3 2 ## Planctomycetes Thermi Chloroflexi SR1 ## 3 3 3 2 ## Synergistetes Crenarchaeota Gemmatimonadetes SAR406 ## 2 3 3 1 # Creates clusters, and adds information to rowData rowData(tse_phylum_subset)$clusters &lt;- cutree(tree = taxa_dendrogram, k = 3) # Prints taxa and their clusters rowData(tse_phylum_subset)$clusters ## Firmicutes Bacteroidetes Proteobacteria Actinobacteria ## 1 1 2 3 ## Cyanobacteria Fusobacteria Tenericutes Verrucomicrobia ## 2 2 1 1 ## Lentisphaerae Euryarchaeota Acidobacteria Spirochaetes ## 1 1 3 2 ## Planctomycetes Thermi Chloroflexi SR1 ## 3 3 3 2 ## Synergistetes Crenarchaeota Gemmatimonadetes SAR406 ## 2 3 3 1 Now we can create heatmap with additional annotations. # Creates data frame that includes cluster data taxa_clusters &lt;- rowData(tse_phylum_subset)$clusters taxa_clusters &lt;- as.character(taxa_clusters) taxa_clusters &lt;- data.frame(cluster = taxa_clusters) row.names(taxa_clusters) &lt;- rownames(tse_phylum_subset) # Creates data frame that includes data on sample type sample_types &lt;- unfactor(colData(tse_phylum_subset)$SampleType) sample_types &lt;- data.frame(sample_types = sample_types) row.names(sample_types) &lt;- colnames(tse_phylum_subset) pheatmap(mat, annotation_row = taxa_clusters, annotation_col = sample_types) In addition to pheatmap package, there are also other packages that provide functions for more complex heatmaps, such as iheatmapr. "],["community-typing.html", "Chapter 10 Community typing 10.1 Community Detection 10.2 Additional Community Typing Session Info", " Chapter 10 Community typing 10.0.1 Dirichlet Multinomial Mixtures (DMM) This section focus on DMM analysis. One technique that allows to search for groups of samples that are similar to each other is the Dirichlet-Multinomial Mixture Model. In DMM, we first determine the number of clusters (k) that best fit the data (model evidence) using Laplace approximation. After fitting the model with k clusters, we obtain for each sample k probabilities that reflect the probability that a sample belongs to the given cluster. Let’s cluster the data with DMM clustering. # Runs model and calculates the most likely number of clusters from 1 to 7. # Since this is a large dataset it takes long computational time. # For this reason we use only a subset of the data; agglomerated by Phylum as a rank. tse &lt;- GlobalPatterns tse &lt;- agglomerateByRank(tse, rank = &quot;Phylum&quot;, agglomerateTree=TRUE) tse_dmn &lt;- runDMN(tse, name = &quot;DMN&quot;, k = 1:7) # It is stored in metadata tse_dmn ## class: TreeSummarizedExperiment ## dim: 67 26 ## metadata(1): DMN ## assays(1): counts ## rownames(67): Phylum:Crenarchaeota Phylum:Euryarchaeota ... ## Phylum:Synergistetes Phylum:SR1 ## rowData names(7): Kingdom Phylum ... Genus Species ## colnames(26): CL3 CC1 ... Even2 Even3 ## colData names(7): X.SampleID Primer ... SampleType Description ## reducedDimNames(0): ## mainExpName: NULL ## altExpNames(0): ## rowLinks: a LinkDataFrame (67 rows) ## rowTree: 1 phylo tree(s) (66 leaves) ## colLinks: NULL ## colTree: NULL Return information on metadata that the object contains. names(metadata(tse_dmn)) ## [1] &quot;DMN&quot; This returns a list of DMN objects for a closer investigation. getDMN(tse_dmn) ## [[1]] ## class: DMN ## k: 1 ## samples x taxa: 26 x 67 ## Laplace: 7715 BIC: 7802 AIC: 7760 ## ## [[2]] ## class: DMN ## k: 2 ## samples x taxa: 26 x 67 ## Laplace: 7673 BIC: 7927 AIC: 7842 ## ## [[3]] ## class: DMN ## k: 3 ## samples x taxa: 26 x 67 ## Laplace: 7690 BIC: 8076 AIC: 7948 ## ## [[4]] ## class: DMN ## k: 4 ## samples x taxa: 26 x 67 ## Laplace: 7751 BIC: 8274 AIC: 8103 ## ## [[5]] ## class: DMN ## k: 5 ## samples x taxa: 26 x 67 ## Laplace: 7857 BIC: 8578 AIC: 8364 ## ## [[6]] ## class: DMN ## k: 6 ## samples x taxa: 26 x 67 ## Laplace: 7952 BIC: 8850 AIC: 8594 ## ## [[7]] ## class: DMN ## k: 7 ## samples x taxa: 26 x 67 ## Laplace: 7991 BIC: 9021 AIC: 8722 Show Laplace approximation (model evidence) for each model of the k models. library(miaViz) plotDMNFit(tse_dmn, type = &quot;laplace&quot;) Return the model that has the best fit. getBestDMNFit(tse_dmn, type = &quot;laplace&quot;) ## class: DMN ## k: 2 ## samples x taxa: 26 x 67 ## Laplace: 7673 BIC: 7927 AIC: 7842 10.0.2 PCoA for ASV-level data with Bray-Curtis; with DMM clusters shown with colors Group samples and return DMNGroup object that contains a summary. Patient status is used for grouping. dmn_group &lt;- calculateDMNgroup(tse_dmn, variable = &quot;SampleType&quot;, exprs_values = &quot;counts&quot;, k = 2, seed=.Machine$integer.max) dmn_group ## class: DMNGroup ## summary: ## k samples taxa NLE LogDet Laplace BIC AIC ## Feces 2 4 67 1078.3 -106.19 901.1 1171.9 1213 ## Freshwater 2 2 67 889.6 -97.28 716.9 936.4 1025 ## Freshwater (creek) 2 3 67 1600.3 860.08 1906.3 1674.5 1735 ## Mock 2 3 67 1008.4 -55.37 856.6 1082.5 1143 ## Ocean 2 3 67 1096.7 -56.21 944.6 1170.9 1232 ## Sediment (estuary) 2 3 67 1195.5 18.63 1080.8 1269.7 1331 ## Skin 2 3 67 992.6 -84.81 826.2 1066.8 1128 ## Soil 2 3 67 1380.3 11.21 1261.8 1454.5 1515 ## Tongue 2 2 67 783.0 -107.74 605.1 829.8 918 Mixture weights (rough measure of the cluster size). DirichletMultinomial::mixturewt(getBestDMNFit(tse_dmn)) ## pi theta ## 1 0.5385 20.65 ## 2 0.4615 15.28 Samples-cluster assignment probabilities / how probable it is that sample belongs to each cluster head(DirichletMultinomial::mixture(getBestDMNFit(tse_dmn))) ## [,1] [,2] ## CL3 1.000e+00 4.726e-17 ## CC1 1.000e+00 3.588e-22 ## SV1 1.000e+00 2.026e-12 ## M31Fcsw 6.020e-26 1.000e+00 ## M11Fcsw 8.797e-17 1.000e+00 ## M31Plmr 8.830e-14 1.000e+00 Contribution of each taxa to each component head(DirichletMultinomial::fitted(getBestDMNFit(tse_dmn))) ## [,1] [,2] ## Phylum:Crenarchaeota 0.30556 0.1354689 ## Phylum:Euryarchaeota 0.23192 0.1468652 ## Phylum:Actinobacteria 1.20868 1.0599611 ## Phylum:Spirochaetes 0.21449 0.1318461 ## Phylum:MVP-15 0.03001 0.0007652 ## Phylum:Proteobacteria 6.87329 1.8152304 Get the assignment probabilities prob &lt;- DirichletMultinomial::mixture(getBestDMNFit(tse_dmn)) # Add column names colnames(prob) &lt;- c(&quot;comp1&quot;, &quot;comp2&quot;) # For each row, finds column that has the highest value. Then extract the column # names of highest values. vec &lt;- colnames(prob)[max.col(prob,ties.method = &quot;first&quot;)] Computing the euclidean PCoA and storing it as a data frame # Does clr transformation. Pseudocount is added, because data contains zeros. tse &lt;- transformCounts(tse, method = &quot;clr&quot;, pseudocount = 1) # Gets clr table clr_assay &lt;- assays(tse)$clr # Transposes it to get taxa to columns clr_assay &lt;- t(clr_assay) # Calculates Euclidean distances between samples. Because taxa is in columns, # it is used to compare different samples. euclidean_dist &lt;- vegan::vegdist(clr_assay, method = &quot;euclidean&quot;) # Does principal coordinate analysis euclidean_pcoa &lt;- ecodist::pco(euclidean_dist) # Creates a data frame from principal coordinates euclidean_pcoa_df &lt;- data.frame(pcoa1 = euclidean_pcoa$vectors[,1], pcoa2 = euclidean_pcoa$vectors[,2]) # Creates a data frame that contains principal coordinates and DMM information euclidean_dmm_pcoa_df &lt;- cbind(euclidean_pcoa_df, dmm_component = vec) # Creates a plot euclidean_dmm_plot &lt;- ggplot(data = euclidean_dmm_pcoa_df, aes(x=pcoa1, y=pcoa2, color = dmm_component)) + geom_point() + labs(x = &quot;Coordinate 1&quot;, y = &quot;Coordinate 2&quot;, title = &quot;PCoA with Aitchison distances&quot;) + theme(title = element_text(size = 12)) # makes titles smaller euclidean_dmm_plot 10.1 Community Detection Another approach for discovering communities within the samples of the data, is to run community detection algorithms after building a graph. The following demonstration builds a graph based on the k nearest-neighbors and performs the community detection on the fly. bluster (Lun 2021) package offers several clustering methods, among which graph-based are present, enabling the community detection task. Installing package: if(!require(bluster)){ BiocManager::install(&quot;bluster&quot;) } The algorithm used is “short random walks” (Pons and Latapy 2006). Graph is constructed using different k values (the number of nearest neighbors to consider during graph construction) using the robust centered log ratio (rclr) assay data. Then plotting the communities using UMAP (McInnes, Healy, and Melville 2018) ordination as a visual exploration aid. In the following demonstration we use the enterotype dataset from the (Ernst, Shetty, and Lahti 2020) package. library(bluster) library(patchwork) # For arranging several plots as a grid library(scater) data(&quot;enterotype&quot;, package=&quot;mia&quot;) tse &lt;- enterotype tse &lt;- transformCounts(tse, method = &quot;rclr&quot;) # Performing and storing UMAP tse &lt;- runUMAP(tse, name=&quot;UMAP&quot;, exprs_values=&quot;rclr&quot;) k &lt;- c(2,3,5,10) ClustAndPlot &lt;- function(x) { # Creating the graph and running the short random walks algorithm graph_clusters &lt;- clusterRows(t(assays(tse)$rclr), NNGraphParam(k=x)) # Results of the clustering as a color for each sample plotUMAP(tse, colour_by = I(graph_clusters)) + labs(title = paste0(&quot;k = &quot;, x)) } # Applying the function for different k values plots &lt;- lapply(k,ClustAndPlot) # Displaying plots in a grid (plots[[1]] + plots[[2]]) / (plots[[3]] + plots[[4]]) Similarly, the bluster (Lun 2021) package offers clustering diagnostics that can be used for judging the clustering quality (see Assorted clustering diagnostics). In the following, Silhouette width as a diagnostic tool is computed and results are visualized for each case presented earlier. For more about Silhouettes read (Rousseeuw 1987). ClustDiagPlot &lt;- function(x) { # Getting the clustering results graph_clusters &lt;- clusterRows(t(assays(tse)$rclr), NNGraphParam(k=x)) # Computing the diagnostic info sil &lt;- approxSilhouette(t(assays(tse)$rclr), graph_clusters) # Plotting as a boxlpot to observe cluster separation boxplot(split(sil$width, graph_clusters), main=paste0(&quot;k = &quot;, x)) } # Applying the function for different k values res &lt;- lapply(k,ClustDiagPlot) 10.2 Additional Community Typing For more community typing techniques applied to the ‘SprockettTHData’ data set, see the attached .Rmd file. Link: Rmd Session Info View session info R version 4.1.1 (2021-08-10) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.3 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 stats graphics grDevices utils datasets methods [8] base other attached packages: [1] scater_1.21.8 scuttle_1.3.1 [3] patchwork_1.1.1 bluster_1.3.2 [5] dendextend_1.15.1 pheatmap_1.0.12 [7] miaViz_1.1.4 ggraph_2.0.5 [9] ggplot2_3.3.5 mia_1.1.19 [11] TreeSummarizedExperiment_2.1.4 Biostrings_2.61.2 [13] XVector_0.33.0 SingleCellExperiment_1.15.2 [15] SummarizedExperiment_1.23.5 Biobase_2.53.0 [17] GenomicRanges_1.45.0 GenomeInfoDb_1.29.8 [19] IRanges_2.27.2 S4Vectors_0.31.5 [21] BiocGenerics_0.39.2 MatrixGenerics_1.5.4 [23] matrixStats_0.61.0-9001 ecodist_2.0.7 [25] BiocStyle_2.21.4 rebook_1.3.1 loaded via a namespace (and not attached): [1] plyr_1.8.6 igraph_1.2.6 [3] lazyeval_0.2.2 splines_4.1.1 [5] BiocParallel_1.27.17 digest_0.6.28 [7] yulab.utils_0.0.4 htmltools_0.5.2 [9] viridis_0.6.2 fansi_0.5.0 [11] magrittr_2.0.1 memoise_2.0.0 [13] ScaledMatrix_1.1.0 cluster_2.1.2 [15] DECIPHER_2.21.0 graphlayouts_0.7.1 [17] colorspace_2.0-2 blob_1.2.2 [19] ggrepel_0.9.1 xfun_0.26 [21] dplyr_1.0.7 crayon_1.4.1 [23] RCurl_1.98-1.5 jsonlite_1.7.2 [25] graph_1.71.2 ape_5.5 [27] glue_1.4.2 polyclip_1.10-0 [29] gtable_0.3.0 zlibbioc_1.39.0 [31] DelayedArray_0.19.4 BiocSingular_1.9.1 [33] scales_1.1.1 DBI_1.1.1 [35] Rcpp_1.0.7 viridisLite_0.4.0 [37] decontam_1.13.0 gridGraphics_0.5-1 [39] tidytree_0.3.5 bit_4.0.4 [41] rsvd_1.0.5 FNN_1.1.3 [43] RColorBrewer_1.1-2 dir.expiry_1.1.0 [45] ellipsis_0.3.2 pkgconfig_2.0.3 [47] XML_3.99-0.8 farver_2.1.0 [49] uwot_0.1.10 CodeDepends_0.6.5 [51] sass_0.4.0 utf8_1.2.2 [53] ggplotify_0.1.0 tidyselect_1.1.1 [55] labeling_0.4.2 rlang_0.4.11 [57] reshape2_1.4.4 munsell_0.5.0 [59] tools_4.1.1 cachem_1.0.6 [61] DirichletMultinomial_1.35.0 generics_0.1.0 [63] RSQLite_2.2.8 evaluate_0.14 [65] stringr_1.4.0 fastmap_1.1.0 [67] yaml_2.2.1 ggtree_3.1.5 [69] knitr_1.36 bit64_4.0.5 [71] tidygraph_1.2.0 purrr_0.3.4 [73] nlme_3.1-153 sparseMatrixStats_1.5.3 [75] aplot_0.1.1 compiler_4.1.1 [77] beeswarm_0.4.0 filelock_1.0.2 [79] treeio_1.17.2 tibble_3.1.5 [81] tweenr_1.0.2 bslib_0.3.1 [83] stringi_1.7.5 highr_0.9 [85] lattice_0.20-45 Matrix_1.3-4 [87] vegan_2.5-7 permute_0.9-5 [89] vctrs_0.3.8 pillar_1.6.3 [91] lifecycle_1.0.1 BiocManager_1.30.16 [93] jquerylib_0.1.4 BiocNeighbors_1.11.0 [95] cowplot_1.1.1 bitops_1.0-7 [97] irlba_2.3.3 R6_2.5.1 [99] bookdown_0.24 gridExtra_2.3 [101] vipor_0.4.5 codetools_0.2-18 [103] MASS_7.3-54 assertthat_0.2.1 [105] withr_2.4.2 GenomeInfoDbData_1.2.7 [107] mgcv_1.8-38 parallel_4.1.1 [109] grid_4.1.1 ggfun_0.0.4 [111] beachmat_2.9.1 tidyr_1.1.4 [113] rmarkdown_2.11 DelayedMatrixStats_1.15.4 [115] ggnewscale_0.4.5 ggforce_0.3.3 [117] ggbeeswarm_0.6.0 Bibliography "],["differential-abundance.html", "Chapter 11 Differential abundance 11.1 Differential abundance analysis 11.2 Tree-based methods Session Info", " Chapter 11 Differential abundance .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 11.1 Differential abundance analysis This section provides an overview and examples of differential abundance analysis (DAA) based on one of the openly available datasets in mia to illustrate how to perform differential abundance analysis (DAA). DAA identifies differences in the abundances of individual taxonomic groups between two or more groups (e.g. treatment vs control). This can be performed at any phylogenetic level. We perform DAA to identify biomarkers and/or gain understanding of a complex system by looking at its isolated components. For example, identifying that a bacterial taxon is different between e.g. a patient group with disease X vs a healthy control group might lead to important insights into the pathophysiology. Changes in the microbiota might be causal or a consequence of the disease. Either way, it can help to understand the system as a whole. Be aware that this approach has also been criticized recently. 11.1.1 Examples and tools There are many tools to perform DAA. The most popular tools, without going into evaluating whether or not they perform well for this task, are: - ALDEx2 - ANCOM-BC - corncob - DESeq2 - edgeR - LEFse - MaAsLin2 - metagenomeSeq - limma voom - t-test - Wilcoxon test We recommend to have a look at Nearing et al. (2021) who compared all these listed methods across 38 different datasets. Because different methods have different approaches (parametric vs non-parametric, different normalization techiniques etc.) to perform the same task (test differential abundance), results can differ between methods. Unfortunately, as Nearing et al. (2021) point out, they differ disturbingly much. Therefore, it is highly recommended to pick several methods to get an idea about how robust and potentially reproducible your findings are depending on the method. In this section we demonstrate 3 methods that can be recommended based on this recent review (ANCOM-BC, ALDEx2 and Maaslin2) and we will compare the results between them. Note that the purpose of this section is to show how to perform DAA in R, not how to correctly do causal inference. E.g. there might be confounding factors that might drive (the absence of) differences between the shown groups that we ignore for simplicity. However, we will show how you could include covariates in those models. Furthermore, we picked a dataset that merely has microbial abundances in a TSE object as well as a grouping variable in the sample data. We simplify the analysis by only including 2 of the 3 groups. library(mia) library(patchwork) library(tidySummarizedExperiment) library(ANCOMBC) library(ALDEx2) library(Maaslin2) library(knitr) library(tidyverse) # we use the dmn_se dataset and restrict it to # obese vs lean for easy illustration data(dmn_se) tse &lt;- dmn_se tse &lt;- tse[ ,colData(tse)$pheno != &quot;Overwt&quot;] colData(tse)$pheno &lt;- fct_drop(colData(tse)$pheno, &quot;Overwt&quot;) # how many observations do we have per group? count(as.data.frame(colData(tse)), pheno) %&gt;% kable() pheno n Lean 61 Obese 193 # set a seed because some tools can randomly vary and then produce # different results: set.seed(1) 11.1.2 Prevalence Filtering Before we jump to our analyses, we may want to perform prevalence filtering. Nearing et al. (2021) found that applying a 10% threshold for the prevalence of the taxa generally resulted in more robust results. Some tools have builtin arguments for that. By applying the threshold to our input data, we can make sure it is applied for all tools. Below we show how to do this in mia: tse &lt;- subsetByPrevalentTaxa(tse, detection = 0, prevalence = 0.1) 11.1.3 ALDEx2 In this section, we will show how to perform a simple ALDEx2 analysis. If you would choose to pick a single method, this method could be recommended to use. According to the developers experience, it tends to identify the common features identified by other methods. This statement is in line with a recent independent evaluation by Nearing et al. (2021). Please also have a look at the more extensive vignette that covers this flexible tool in more depth. ALDEx2 estimates technical variation within each sample per taxon by utilizing the Dirichlet distribution. It furthermore applies the centered-log-ratio transformation (or closely related log-ratio transforms). Depending on the experimental setup, it will perform a two sample Welch’s T-test and Wilcoxon-test or a one-way ANOVA and Kruskal-Wallis-test. For more complex study designs, there is a possibility to utilize the glm functionality within ALDEx2. The Benjamini-Hochberg procedure is applied in any case to correct for multiple testing. Below we show a simple example that illustrates the workflow. # Generate Monte Carlo samples of the Dirichlet distribution for each sample. # Convert each instance using the centred log-ratio transform. # This is the input for all further analyses. x &lt;- aldex.clr( reads = assay(tse), conds = colData(tse)$pheno, # 128 recommened for ttest, 1000 for rigorous effect size calculation mc.samples = 128, denom = &quot;all&quot;, verbose = FALSE ) # calculates expected values of the Welch&#39;s t-test and Wilcoxon rank test on # the data returned by aldex.clr x_tt &lt;- aldex.ttest( x, paired.test = FALSE, verbose = FALSE) # determines the median clr abundance of the feature in all samples and in # groups, the median difference between the two groups, the median variation # within each group and the effect size, which is the median of the ratio # of the between group difference and the larger of the variance within groups x_effect &lt;- aldex.effect(x, CI = TRUE, verbose = FALSE) # combine all outputs aldex_out &lt;- data.frame(x_tt, x_effect) Now, we can create a so called Bland-Altman or MA plot (left). It shows the association between the relative abundance and the magnitude of the difference per sample. Next to that, we can also create a plot that shows the dispersion on the x-axis instead of log-ratio abundance. Red dots represent genera that are differentially abundant (\\(q \\leq 0.1\\)) between the 2 groups. Black points are rare taxa and grey ones are abundant taxa. par(mfrow = c(1, 2)) aldex.plot( aldex_out, type = &quot;MA&quot;, test = &quot;welch&quot;, xlab = &quot;Log-ratio abundance&quot;, ylab = &quot;Difference&quot;, cutoff = 0.05 ) aldex.plot( aldex_out, type = &quot;MW&quot;, test = &quot;welch&quot;, xlab = &quot;Dispersion&quot;, ylab = &quot;Difference&quot;, cutoff = 0.05 ) The evaluation as differential abundant in above plots is based on the corrected pvalue. According to the ALDEx2 developers, the safest approach is to identify those features where the 95% CI of the effect size does not cross 0. As we can see in below table, this is not the case for any of the identified genera (see overlap column, which indicates the proportion of overlap). Also, the authors recommend an effect size cutoff of 1 rather than only interpreting the pvalue. Again, this is not the case for any feature. rownames_to_column(aldex_out, &quot;genus&quot;) %&gt;% filter(wi.eBH &lt;= 0.05) %&gt;% # here we chose the wilcoxon output rather than tt select(genus, we.eBH, wi.eBH, effect, overlap) %&gt;% kable() genus we.eBH wi.eBH effect overlap Alistipes 0.0009 0.0001 -0.3823 0.2979 Barnesiella 0.0442 0.0066 -0.3229 0.3489 Catenibacterium 0.0266 0.0330 0.2713 0.3718 Lactobacillus 0.0282 0.0183 0.2983 0.3537 Megasphaera 0.0000 0.0001 0.5249 0.2758 Oscillibacter 0.0004 0.0014 -0.3681 0.3291 Parabacteroides 0.0541 0.0133 -0.2832 0.3509 Phascolarctobacterium 0.0238 0.0077 -0.3491 0.3404 Uknown 0.0786 0.0439 -0.2474 0.3852 11.1.4 ANCOM-BC The analysis of composition of microbiomes with bias correction (ANCOM-BC) is a recently developed method for differential abundance testing. It is based on an earlier published approach. The previous version of ANCOM was among the methods that produced the most consistent results and is probably a conservative approach. However, the new ANCOM-BC method operates quite differently compared to the former ANCOM method. As the only method, ANCOM-BC incorporates the so called sampling fraction into the model. The latter term could be empirically estimated by the ratio of the library size to the microbial load. According to the authors, variations in this sampling fraction would bias differential abundance analyses if ignored. Furthermore, this method provides p-values, and confidence intervals for each taxon. It also controls the FDR and it is computationally simple to implement. As we will see below, to obtain results, all that is needed is to pass a phyloseq object to the ancombc() function. Therefore, below we first convert our tse object to a phyloseq object. Then, we specify the formula. In this formula, other covariates could potentially be included to adjust for confounding. We show this further below. Please check the function documentation to learn about the additional arguments that we specify below. # currently, ancombc requires the phyloseq format, but we can easily convert: pseq &lt;- makePhyloseqFromTreeSummarizedExperiment(tse) # perform the analysis out = ancombc( phyloseq = pseq, formula = &quot;pheno&quot;, p_adj_method = &quot;fdr&quot;, zero_cut = 1, # no prev filtering necessary anymore lib_cut = 0, group = &quot;pheno&quot;, struc_zero = TRUE, neg_lb = TRUE, tol = 1e-5, max_iter = 100, conserve = TRUE, alpha = 0.05, global = TRUE ) # store the results in res res &lt;- out$res The object out contains all model output. Again, see the documentation of the function under Value for an explanation of all the output objects. Our question whether taxa are differentially abundant can be answered by looking at the res object, which now contains dataframes with the coefficients, standard errors, p-values and q-values. Conveniently, there is a dataframe diff_abn. Here, for each taxon it is indicated whether it is differentially abundant between the groups. Below we show the first 6 entries of this dataframe: kable(head(res$diff_abn)) phenoObese Acetanaerobacterium TRUE Acetivibrio FALSE Acidaminococcus TRUE Akkermansia FALSE Alistipes TRUE Allisonella FALSE 11.1.5 MaAsLin2 Lastly, we will illustrate how to use MaAsLin2, which is the next generation of MaAsLin. As it is based on generalized linear models, it is flexible for different study designs and covariate structures. The official package tutorial can be found here. # maaslin expects features as columns and samples as rows # for both the asv/otu table as well as meta data asv &lt;- t(assay(tse)) meta_data &lt;- data.frame(colData(tse)) # you can specifiy different GLMs/normalizations/transforms. We used similar # settings as in Nearing et al. (2021) here: fit_data &lt;- Maaslin2( asv, meta_data, output = &quot;DAA example&quot;, transform = &quot;AST&quot;, fixed_effects = &quot;pheno&quot;, # random_effects = c(...), # you can also fit MLM by specifying random effects # specifying a ref is especially important if you have more than 2 levels reference = &quot;pheno,Lean&quot;, normalization = &quot;TSS&quot;, standardize = FALSE, min_prevalence = 0 # prev filterin already done ) # which genera are identified as differentially abundant? (leave out &quot;head&quot; to # see all) kable(head(filter(fit_data$results, qval &lt;= 0.05))) feature metadata value coef stderr pval name qval N N.not.zero Megasphaera pheno Obese 0.0489 0.0093 0 phenoObese 0e+00 254 78 Barnesiella pheno Obese -0.0297 0.0068 0 phenoObese 2e-04 254 111 Parabacteroides pheno Obese -0.0219 0.0050 0 phenoObese 2e-04 254 163 Phascolarctobacterium pheno Obese -0.0325 0.0072 0 phenoObese 2e-04 254 99 Alistipes pheno Obese -0.0523 0.0123 0 phenoObese 3e-04 254 227 Desulfovibrio pheno Obese -0.0134 0.0032 0 phenoObese 3e-04 254 72 # A folder will be created that is called like the above specified output. # It contains also figures to visualize the difference between genera # for the significant ones. 11.1.6 Comparison of the methods When we compare the methods in the context of a research question, we could look at e.g. at whether they agree based on the applied decision criterion (e.g. adjusted p value &lt; 0.05). That is what we illustrate here. First we will look at how many taxa were identified by each method to begin with. In the next step we will look at the intersection of identified taxa. To achieve that, we first create a dataframe that summarises the decision criterion for each method and shows a score from 0 to 3 indicating how many methods agreed on a particular taxon. summ &lt;- full_join( rownames_to_column(aldex_out, &quot;genus&quot;) %&gt;% select(genus, aldex2 = wi.eBH), rownames_to_column(out$res$diff_abn, &quot;genus&quot;) %&gt;% select(genus, ancombc = phenoObese), by = &quot;genus&quot;) %&gt;% full_join( select(fit_data$results, genus = feature, maaslin2 = qval), by = &quot;genus&quot;) %&gt;% mutate( across(c(aldex2, maaslin2), ~ .x &lt;= 0.05), # the following line would be necessary without prevalence filtering # as some methods output NA #across(-genus, function(x) ifelse(is.na(x), FALSE, x)), score = rowSums(across(c(aldex2, ancombc, maaslin2))) ) # This is how it looks like: kable(head(summ)) genus aldex2 ancombc maaslin2 score Acetanaerobacterium FALSE TRUE TRUE 2 Acetivibrio FALSE FALSE FALSE 0 Acidaminococcus FALSE TRUE TRUE 2 Akkermansia FALSE FALSE FALSE 0 Alistipes TRUE TRUE TRUE 3 Allisonella FALSE FALSE FALSE 0 Now we can answer our questions: # how many genera were identified by each method? summarise(summ, across(where(is.logical), sum)) %&gt;% kable() aldex2 ancombc maaslin2 9 22 16 # which genera are identified by all methods? filter(summ, score == 3) %&gt;% kable() genus aldex2 ancombc maaslin2 score Alistipes TRUE TRUE TRUE 3 Barnesiella TRUE TRUE TRUE 3 Catenibacterium TRUE TRUE TRUE 3 Lactobacillus TRUE TRUE TRUE 3 Megasphaera TRUE TRUE TRUE 3 Oscillibacter TRUE TRUE TRUE 3 Parabacteroides TRUE TRUE TRUE 3 Phascolarctobacterium TRUE TRUE TRUE 3 We see that each method identified at least 9 genera as differentially abundant. Eight of those that were identified by ALDEx2, were also identified by both of the other methods. We could plot the data for any method or for those taxa that were identified by all methods: plot_data &lt;- data.frame(t(assay(tse))) plot_data$pheno &lt;- colData(tse)$pheno # create a plot for each genus where the score is indicated in the title plots &lt;- pmap(select(summ, genus, score), function(genus, score) { ggplot(plot_data, aes_string(&quot;pheno&quot;, genus)) + geom_boxplot(aes(fill = pheno), outlier.shape = NA) + geom_jitter(width = 0.2, alpha = 0.5) + ggtitle(glue::glue(&quot;Robustness score {score}&quot;)) + theme_bw() + theme(legend.position = &quot;none&quot;) }) # now we can show only those genera that have at least score 3 (or 2 or 1) robust_plots &lt;- plots[summ$score == 3] # to display this nicely in the book we use patchwork here: # (we show first 8) robust_plots[[1]] + robust_plots[[2]] + robust_plots[[3]] + robust_plots[[4]] + robust_plots[[5]] + robust_plots[[6]] + robust_plots[[7]] + robust_plots[[8]] + plot_layout(nrow = 2) # or if we have most trust in any specific method we can show genera that # are differentially abundant according to that method and then look in the # title how many methods also identified it (we only show first 6 here): ancombc_plots &lt;- plots[summ$ancombc] ancombc_plots[[1]] + ancombc_plots[[2]] + ancombc_plots[[3]] + ancombc_plots[[4]] + ancombc_plots[[5]] + ancombc_plots[[6]] 11.1.7 Confounding variables To perform causal inference, it is crucial that the method is able to include covariates in the model. This is not possible with e.g. the Wilcoxon test. Other methods such as both ANCOM methods, ALDEx2, DESeq2, MaAsLin2 and others allow this. Below we show how to include a covariate in ANCOM-BC. It is very similar for all the methods that allow this. Since in this dataset there are no covariates, I first simulate a new variable and add it to the TSE object. # to join new data to existing colData we need to put rownames as a column colData(tse)$sample_id &lt;- rownames(colData(tse)) # simulate a covariate that I will add to the colData. df_sim &lt;- tibble( sample_id = colData(tse)$sample_id, age = rnorm(n = length(colData(tse)$sample_id)) ) # an easy way to join data is to use dplyr functions. The package # tidySummarizedExperiment enables this functionality tse &lt;- full_join(tse, df_sim, by = &quot;sample_id&quot;) # now the data from df_sim is in the tse object and we can again repeat # the steps as above: pseq &lt;- makePhyloseqFromTreeSummarizedExperiment(tse) out_cov = ancombc( phyloseq = pseq, formula = &quot;pheno + age&quot;, # here we add age to the model p_adj_method = &quot;fdr&quot;, zero_cut = 0.90, lib_cut = 0, group = &quot;pheno&quot;, struc_zero = TRUE, neg_lb = TRUE, tol = 1e-5, max_iter = 100, conserve = TRUE, alpha = 0.05, global = TRUE ) # now the model answers the question: holding age constant, are # bacterial taxa differentially abundant? Or, if that is of interest, # holding phenotype constant, is age associated with bacterial abundance? # Again we only show the first 6 entries. kable(head(out_cov$res$diff_abn)) phenoObese age Acetanaerobacterium TRUE FALSE Acetivibrio FALSE FALSE Acidaminococcus TRUE FALSE Akkermansia FALSE FALSE Alistipes TRUE FALSE Allisonella FALSE FALSE In the next section of this book chapter we cover methods that can also take into account the phylogenetic information of bacterial taxa to perform group-wise associations. 11.2 Tree-based methods 11.2.1 Group-wise associations testing based on balances with fido TreeSummarizedExperiment frequently includes a Phylogenetic tree along with associated data about the experiment (at colData), that holds covariates which can be used for analyzing group-wise associations. Such an analysis could be performed with the function pibble from the fido package, that offers a Multinomial Logistic-Normal Linear Regression model; see vignette of package. The following presents such an exemplary analysis based on the Sprockett et al. (2020) available through microbiomeDataSets package. if (!require(fido)){ # installing the fido package devtools::install_github(&quot;jsilve24/fido&quot;) } Loading the libraries and importing data: library(fido) library(mia) library(microbiomeDataSets) tse &lt;- SprockettTHData() We pick three covariates (“Sex,”“Age_Years,”“Delivery_Mode”) during this analysis as an example, and beforehand we check for missing data: cov_names &lt;- c(&quot;Sex&quot;,&quot;Age_Years&quot;,&quot;Delivery_Mode&quot;) na_counts &lt;- apply(is.na(colData(tse)[,cov_names]), 2, sum) na_summary&lt;-as.data.frame(na_counts,row.names=cov_names) We drop samples with na values at the covariates (features) under analysis: tse &lt;- tse[ , !is.na(colData(tse)$Delivery_Mode) ] tse &lt;- tse[ , !is.na(colData(tse)$Age_Years) ] We agglomerate the data at a Phylum rank. Note: Large assay data (along with the covariates/features data) could prevent the analysis later, since the computation will construct matrices that would not always fit memory. tse_phylum &lt;- agglomerateByRank(tse, &quot;Phylum&quot;) We extract the counts assay and feature data to build the model matrix having an extra row of ones presenting the intercept for the regression task later: Y &lt;- assays(tse_phylum)$counts # design matrix # taking 3 covariates sample_data&lt;-as.data.frame(colData(tse_phylum)[,cov_names]) X &lt;- t(model.matrix(~Sex+Age_Years+Delivery_Mode,data=sample_data)) Building the parameters for the pibble call to build the model; see more at vignette: n_taxa&lt;-nrow(Y) upsilon &lt;- n_taxa+3 Omega &lt;- diag(n_taxa) G &lt;- cbind(diag(n_taxa-1), -1) Xi &lt;- (upsilon-n_taxa)*G%*%Omega%*%t(G) Theta &lt;- matrix(0, n_taxa-1, nrow(X)) Gamma &lt;- diag(nrow(X)) Automatically initializing the priors and visualizing their distributions: priors &lt;- pibble(NULL, X, upsilon, Theta, Gamma, Xi) names_covariates(priors) &lt;- rownames(X) fido::plot(priors, pars=&quot;Lambda&quot;) + ggplot2::xlim(c(-5, 5)) Estimating the posterior by including the data at Y. Note: Some computational failures could occur (see discussion) the arguments multDirichletBoot calcGradHess could be passed in such case. priors$Y &lt;- Y posterior &lt;- refit(priors, optim_method=&quot;adam&quot;, multDirichletBoot=0.5) # ,, calcGradHess=FALSE Printing a summary about the posterior predictive distribution: ppc_summary(posterior) ## Proportions of Observations within 95% Credible Interval: 0.998 Plotting the summary of the posterior distributions of the regression parameters: names_categories(posterior) &lt;- rownames(Y) fido::plot(posterior,par=&quot;Lambda&quot;,focus.cov=rownames(X)[2:4]) Seemingly the covariate “Age_Years” does not have effect on the model as “Delivery_Mode” would, and “Sex” to some extent. Let’s take a closer look at the two latter ones: fido::plot(posterior, par=&quot;Lambda&quot;, focus.cov = rownames(X)[c(2,4)]) Session Info View session info R version 4.1.1 (2021-08-10) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Ubuntu 20.04.3 LTS Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.8.so locale: [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C [3] LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 [5] LC_MONETARY=en_US.UTF-8 LC_MESSAGES=C [7] LC_PAPER=en_US.UTF-8 LC_NAME=C [9] LC_ADDRESS=C LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C attached base packages: [1] stats4 stats graphics grDevices utils datasets methods [8] base other attached packages: [1] microbiomeDataSets_1.1.5 MultiAssayExperiment_1.19.16 [3] fido_0.1.13 forcats_0.5.1 [5] stringr_1.4.0 dplyr_1.0.7 [7] purrr_0.3.4 readr_2.0.2 [9] tidyr_1.1.4 tibble_3.1.5 [11] ggplot2_3.3.5 tidyverse_1.3.1 [13] knitr_1.36 Maaslin2_1.7.2 [15] ALDEx2_1.25.2 zCompositions_1.3.4 [17] truncnorm_1.0-8 NADA_1.6-1.1 [19] survival_3.2-13 MASS_7.3-54 [21] ANCOMBC_1.3.2 tidySummarizedExperiment_1.3.0 [23] patchwork_1.1.1 mia_1.1.19 [25] TreeSummarizedExperiment_2.1.4 Biostrings_2.61.2 [27] XVector_0.33.0 SingleCellExperiment_1.15.2 [29] SummarizedExperiment_1.23.5 Biobase_2.53.0 [31] GenomicRanges_1.45.0 GenomeInfoDb_1.29.8 [33] IRanges_2.27.2 S4Vectors_0.31.5 [35] BiocGenerics_0.39.2 MatrixGenerics_1.5.4 [37] matrixStats_0.61.0-9001 BiocStyle_2.21.4 [39] rebook_1.3.1 loaded via a namespace (and not attached): [1] rappdirs_0.3.3 coda_0.19-4 [3] bit64_4.0.5 irlba_2.3.3 [5] DelayedArray_0.19.4 data.table_1.14.2 [7] KEGGREST_1.33.0 RCurl_1.98-1.5 [9] generics_0.1.0 ScaledMatrix_1.1.0 [11] microbiome_1.15.1 RSQLite_2.2.8 [13] bit_4.0.4 tzdb_0.1.2 [15] httpuv_1.6.3 xml2_1.3.2 [17] lubridate_1.8.0 assertthat_0.2.1 [19] DirichletMultinomial_1.35.0 viridis_0.6.2 [21] xfun_0.26 hms_1.1.1 [23] ggdist_3.0.0 jquerylib_0.1.4 [25] promises_1.2.0.1 evaluate_0.14 [27] DEoptimR_1.0-9 fansi_0.5.0 [29] dbplyr_2.1.1 readxl_1.3.1 [31] igraph_1.2.6 DBI_1.1.1 [33] htmlwidgets_1.5.4 tensorA_0.36.2 [35] hash_2.2.6.1 ellipsis_0.3.2 [37] backports_1.2.1 bookdown_0.24 [39] permute_0.9-5 sparseMatrixStats_1.5.3 [41] vctrs_0.3.8 abind_1.4-5 [43] tidybayes_3.0.1 cachem_1.0.6 [45] withr_2.4.2 robustbase_0.93-9 [47] checkmate_2.0.0 vegan_2.5-7 [49] treeio_1.17.2 getopt_1.20.3 [51] cluster_2.1.2 ExperimentHub_2.1.4 [53] ape_5.5 dir.expiry_1.1.0 [55] lazyeval_0.2.2 crayon_1.4.1 [57] pkgconfig_2.0.3 labeling_0.4.2 [59] nlme_3.1-153 vipor_0.4.5 [61] rlang_0.4.11 lifecycle_1.0.1 [63] filelock_1.0.2 BiocFileCache_2.1.1 [65] phyloseq_1.37.0 modelr_0.1.8 [67] rsvd_1.0.5 AnnotationHub_3.1.6 [69] cellranger_1.1.0 distributional_0.2.2 [71] graph_1.71.2 Matrix_1.3-4 [73] lpsymphony_1.21.0 Rhdf5lib_1.15.2 [75] reprex_2.0.1 beeswarm_0.4.0 [77] png_0.1-7 viridisLite_0.4.0 [79] bitops_1.0-7 rhdf5filters_1.5.0 [81] blob_1.2.2 DelayedMatrixStats_1.15.4 [83] decontam_1.13.0 DECIPHER_2.21.0 [85] beachmat_2.9.1 scales_1.1.1 [87] memoise_2.0.0 magrittr_2.0.1 [89] plyr_1.8.6 zlibbioc_1.39.0 [91] compiler_4.1.1 driver_0.1.1 [93] RColorBrewer_1.1-2 cli_3.0.1 [95] ade4_1.7-18 pbapply_1.5-0 [97] mgcv_1.8-38 tidyselect_1.1.1 [99] stringi_1.7.5 highr_0.9 [101] yaml_2.2.1 BiocSingular_1.9.1 [103] svUnit_1.0.6 ggrepel_0.9.1 [105] grid_4.1.1 sass_0.4.0 [107] tools_4.1.1 parallel_4.1.1 [109] rstudioapi_0.13 foreach_1.5.1 [111] logging_0.10-108 optparse_1.7.1 [113] gridExtra_2.3 posterior_1.1.0 [115] farver_2.1.0 Rtsne_0.15 [117] RcppZiggurat_0.1.6 digest_0.6.28 [119] BiocManager_1.30.16 shiny_1.7.1 [121] Rcpp_1.0.7 broom_0.7.9 [123] scuttle_1.3.1 later_1.3.0 [125] BiocVersion_3.14.0 AnnotationDbi_1.55.1 [127] httr_1.4.2 Rdpack_2.1.2 [129] colorspace_2.0-2 rvest_1.0.1 [131] XML_3.99-0.8 fs_1.5.0 [133] splines_4.1.1 tidytree_0.3.5 [135] scater_1.21.8 multtest_2.49.0 [137] plotly_4.10.0 xtable_1.8-4 [139] jsonlite_1.7.2 nloptr_1.2.2.2 [141] CodeDepends_0.6.5 Rfast_2.0.3 [143] R6_2.5.1 mime_0.12 [145] pillar_1.6.3 htmltools_0.5.2 [147] glue_1.4.2 fastmap_1.1.0 [149] BiocParallel_1.27.17 BiocNeighbors_1.11.0 [151] interactiveDisplayBase_1.31.2 codetools_0.2-18 [153] pcaPP_1.9-74 mvtnorm_1.1-3 [155] utf8_1.2.2 lattice_0.20-45 [157] bslib_0.3.1 arrayhelpers_1.1-0 [159] curl_4.3.2 ggbeeswarm_0.6.0 [161] biglm_0.9-2.1 rmarkdown_2.11 [163] biomformat_1.21.0 munsell_0.5.0 [165] rhdf5_2.37.4 GenomeInfoDbData_1.2.7 [167] iterators_1.0.13 haven_2.4.3 [169] reshape2_1.4.4 gtable_0.3.0 [171] rbibutils_2.2.4 "],["resources.html", "Chapter 12 Resources 12.1 Data containers 12.2 R programming resources", " Chapter 12 Resources .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } 12.1 Data containers 12.1.1 Resources for TreeSummarizedExperiment SingleCellExperiment Publication Project page SummarizedExperiment Publication Project page TreeSummarizedExperiment Publication Project page 12.1.2 Other relevant containers DataFrame which behaves similarly to data.frame, yet efficient and fast when used with large datasets. DNAString along with DNAStringSet,RNAString and RNAStringSet efficient storage and handling of long biological sequences are offered within the Biostrings package. GenomicRanges offers an efficient representation and manipulation of genomic annotations and alignments, see e.g. GRanges and GRangesList at An Introduction to the GenomicRangesPackage. NGS Analysis Basics provides a walk-through of the above-mentioned features with detailed examples. 12.1.3 Alternative containers for microbiome data The phyloseq package and class became the first widely used data container for microbiome data science in R. Many methods for taxonomic profiling data are readily available for this class. We provide here a short description how phyloseq and *Experiment classes relate to each other. assays : This slot is similar to otu_table in phyloseq. In a SummarizedExperiment object multiple assays, raw counts, transformed counts can be stored. See also MultiAssayExperiment for storing data from multiple experiments such as RNASeq, Proteomics, etc. rowData : This slot is similar to tax_table in phyloseq to store taxonomic information. colData : This slot is similar to sample_data in phyloseq to store information related to samples. rowTree : This slot is similar to phy_tree in phyloseq to store phylogenetic tree. In this book, you will come across terms like FeatureIDs and SampleIDs. FeatureIDs : These are basically OTU/ASV ids which are row names in assays and rowData. SampleIDs : As the name suggests, these are sample ids which are column names in assays and row names in colData. FeatureIDs and SampleIDs are used but the technical terms rownames and colnames are encouraged to be used, since they relate to actual objects we work with. 12.1.4 Resources for phyloseq The (Tree)SummarizedExperiment objects can be converted into the alternative phyloseq format, for which further methods are available. List of R tools for microbiome analysis phyloseq microbiome tutorial microbiomeutilities Bioconductor Workflow for Microbiome Data Analysis: from raw reads to community analyses (Callahan et al. F1000, 2016). 12.2 R programming resources If you are new to R, you could try swirl for a kickstart to R programming. Further support resources are available through the Bioconductor project. R programming basics: Base R Basics of R programming: Base R R cheat sheets R visualization with ggplot2 R graphics cookbook Rmarkdown Rmarkdown tips RStudio RStudio cheat sheet 12.2.1 Bioconductor Classes S4 system S4 class system has brought several useful features to the object-oriented programming paradigm within R, and it is constantly deployed in R/Bioconductor packages.   Online Document: Hervé Pagès, A quick overview of the S4 class system. Laurent Gatto, A practical tutorial on S4 programming John M. Chambers. How S4 Methods Work   Books: John M. Chambers. Software for Data Analysis: Programming with R. Springer, New York, 2008. ISBN-13 978-0387759357. I Robert Gentleman. R Programming for Bioinformatics. Chapman &amp; Hall/CRC, New York, 2008. ISBN-13 978-1420063677 Figure sources: Original article - Huang R et al. (2021) TreeSummarizedExperiment: a S4 class for data with hierarchical structure. F1000Research 9:1246. Reference Sequence slot extension - Lahti L et al. (2020) Upgrading the R/Bioconductor ecosystem for microbiome research F1000Research 9:1464 (slides). "],["extras.html", "Chapter 13 Extra material 13.1 Interactive 3D Plots", " Chapter 13 Extra material 13.1 Interactive 3D Plots # Installing required packages if (!require(rgl)){ BiocManager::install(&quot;rgl&quot;) } if (!require(plotly)){ BiocManager::install(&quot;plotly&quot;) } library(knitr) library(rgl) knitr::knit_hooks$set(webgl = hook_webgl) In this section we make a 3D version of the earlier Visualizing the most dominant genus on PCoA, with the help of the plotly R package. # Installing the package if (!require(curatedMetagenomicData)){ BiocManager::install(&quot;curatedMetagenomicData&quot;) } # Importing necessary libraries library(curatedMetagenomicData) library(dplyr) library(DT) library(mia) library(scater) # Querying the data tse &lt;- sampleMetadata %&gt;% filter(age &gt;= 18) %&gt;% # taking only data of age 18 or above filter(!is.na(alcohol)) %&gt;% # excluding missing values returnSamples(&quot;relative_abundance&quot;) tse_Genus &lt;- agglomerateByRank(tse, rank=&quot;Genus&quot;) tse_Genus &lt;- addPerSampleDominantTaxa(tse_Genus,abund_values=&quot;relative_abundance&quot;, name = &quot;dominant_taxa&quot;) # Performing PCoA with Bray-Curtis dissimilarity. tse_Genus &lt;- runMDS(tse_Genus, FUN = vegan::vegdist, ncomponents = 3, name = &quot;PCoA_BC&quot;, exprs_values = &quot;relative_abundance&quot;) # Getting the 6 top taxa top_taxa &lt;- getTopTaxa(tse_Genus,top = 6, abund_values = &quot;relative_abundance&quot;) # Naming all the rest of non top-taxa as &quot;Other&quot; most_abundant &lt;- lapply(colData(tse_Genus)$dominant_taxa, function(x){if (x %in% top_taxa) {x} else {&quot;Other&quot;}}) # Storing the previous results as a new column within colData colData(tse_Genus)$most_abundant &lt;- as.character(most_abundant) # Calculating percentage of the most abundant most_abundant_freq &lt;- table(as.character(most_abundant)) most_abundant_percent &lt;- round(most_abundant_freq/sum(most_abundant_freq)*100, 1) # Retrieving the explained variance e &lt;- attr(reducedDim(tse_Genus, &quot;PCoA_BC&quot;), &quot;eig&quot;); var_explained &lt;- e/sum(e[e&gt;0])*100 Interactive 3D visualization of the most dominant genus on PCoA. Note that labels at legend can be used to visualize one or more Genus separately (double click to isolate one from the others, or toggle to select multiple ones). library(plotly) # 3D Visualization reduced_data &lt;- as.data.frame(reducedDim(tse_Genus)[,]) names(reduced_data) &lt;- c(&quot;PC1&quot;,&quot;PC2&quot;,&quot;PC3&quot;) plot_ly(reduced_data, x=~PC1,y=~PC2,z=~PC3)%&gt;% add_markers(color=colData(tse_Genus)$most_abundant, size=5, colors=c(&quot;black&quot;, &quot;blue&quot;, &quot;lightblue&quot;, &quot;darkgray&quot;, &quot;magenta&quot;, &quot;darkgreen&quot;, &quot;red&quot;)) %&gt;% layout(scene=list(xaxis=list(title = paste(&quot;PC1 (&quot;,round(var_explained[1],1),&quot;%)&quot;)), yaxis=list(title = paste(&quot;PC2 (&quot;,round(var_explained[2],1),&quot;%)&quot;)), zaxis=list(title = paste(&quot;PC3 (&quot;,round(var_explained[3],1),&quot;%)&quot;)))) "],["acknowledgments.html", "Chapter 14 Acknowledgments", " Chapter 14 Acknowledgments .rebook-collapse { background-color: #eee; color: #444; cursor: pointer; padding: 18px; width: 100%; border: none; text-align: left; outline: none; font-size: 15px; } .rebook-content { padding: 0 18px; display: none; overflow: hidden; background-color: #f1f1f1; } This work would not have been possible without the countless contributions and interactions within the broader research community. We express our gratitude to the entire Bioconductor community for developing this high-quality open research software repository for life science analytics, continuously pushing the limits in emerging application fields Huber et al. (2015). The base ecosystem of data containers, packages, and tutorials was set up as a collaborative effort by Tuomas Borman, Henrik Eckermann, Chouaib Benchraka, Chandler Ross, Shigdel Rajesh, Yağmur Şimşek, Giulio Benedetti, Sudarshan Shetty, Felix Ernst, and Leo Lahti, with further support from the COST Action network on Statistical and Machine Learning Techniques for Human Microbiome Studies (ML4microbiome) (Moreno-Indias et al. 2021). The framework is based on the TreeSummarizedExperiment data container created by Ruizhu Huang and others (Huang 2020). The idea of using this container as a new basis for microbiome data science was initially advanced by the groundwork of Domenick Braccia, Héctor Corrada Bravo and others, and brought together with other microbiome data science developers (Shetty and Lahti 2019). Ample demonstration data resources have been made available as the curatedMetagenomicData project by Edoardo Pasolli, Lucas Schiffer, Levi Waldron and others (Pasolli et al. 2017) adding important early support for the emerging framework. A number of other contributors have advanced the ecosystem further, and will be acknowledged in the individual packages, pull requests, issues, and other work. The work has drawn inspiration from many sources, most notably from the work on phyloseq by Paul McMurdie and Susan Holmes (McMurdie and Holmes 2013) who pioneered the work on rigorous and reproducible microbiome data science ecosystems in R/Bioconductor. The phyloseq framework continues to provide a strong complementary set of packages and methods for microbiome studies, and we do our best to support full interoperability. The open source books by Susan Holmes and Wolfgang Huber, Modern Statistics for Modern Biology (Holmes and Huber 2019) and by Garret Grolemund and Hadley Wickham, the R for Data Science (Grolemund and Wickham 2017), and Richard McElreath’s Statistical Rethinking and the associated online resources by Solomon Kurz (McElreath 2020) are key references that advanced reproducible data science training and dissemination. The Orchestrating Single-Cell Analysis with Bioconductor, or OSCA book by Robert Amezquita, Aaron Lun, Stephanie Hicks, and Raphael Gottardo (R. Amezquita et al. 2020) has implemented closely related work on the SummarizedExperiment data container and its derivatives in the field of single cell sequencing studies. Many approaches used in this book have been derived from the OSCA framework, with various adjustments and extensions dedicated to microbiome data science. Bibliography "],["bibliography.html", "Bibliography", " Bibliography "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
