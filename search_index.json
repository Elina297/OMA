[["index.html", "Microbiome Analysis Preface", " Microbiome Analysis 2020-11-08 Preface "],["intro.html", "Chapter 1 Introduction 1.1 Installation 1.2 Package data 1.3 Tools", " Chapter 1 Introduction 1.1 Installation Install the development version from GitHub using remotes R package. # install remotes #install.packages(&quot;remotes&quot;) remotes::install_github(&quot;FelixErnst/mia&quot;) 1.2 Package data The datasets in mia are conversions of the phyloseq datasets GlobalPatterns enterotype, esophagus and soilrep. Taxa contains example taxonomic data derived from the metagenomeFeatures package. library(mia) ## Loading required package: SummarizedExperiment ## Loading required package: MatrixGenerics ## Loading required package: matrixStats ## ## Attaching package: &#39;MatrixGenerics&#39; ## The following objects are masked from &#39;package:matrixStats&#39;: ## ## colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, ## colCounts, colCummaxs, colCummins, colCumprods, colCumsums, ## colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, ## colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, ## colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, ## colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, ## colWeightedMeans, colWeightedMedians, colWeightedSds, ## colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, ## rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, ## rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, ## rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, ## rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, ## rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, ## rowWeightedMads, rowWeightedMeans, rowWeightedMedians, ## rowWeightedSds, rowWeightedVars ## Loading required package: GenomicRanges ## Loading required package: stats4 ## Loading required package: BiocGenerics ## Loading required package: parallel ## ## Attaching package: &#39;BiocGenerics&#39; ## The following objects are masked from &#39;package:parallel&#39;: ## ## clusterApply, clusterApplyLB, clusterCall, clusterEvalQ, ## clusterExport, clusterMap, parApply, parCapply, parLapply, ## parLapplyLB, parRapply, parSapply, parSapplyLB ## The following objects are masked from &#39;package:stats&#39;: ## ## IQR, mad, sd, var, xtabs ## The following objects are masked from &#39;package:base&#39;: ## ## anyDuplicated, append, as.data.frame, basename, cbind, colnames, ## dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep, ## grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget, ## order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, ## rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply, ## union, unique, unsplit, which.max, which.min ## Loading required package: S4Vectors ## ## Attaching package: &#39;S4Vectors&#39; ## The following object is masked from &#39;package:base&#39;: ## ## expand.grid ## Loading required package: IRanges ## Loading required package: GenomeInfoDb ## Loading required package: Biobase ## Welcome to Bioconductor ## ## Vignettes contain introductory material; view with ## &#39;browseVignettes()&#39;. To cite Bioconductor, see ## &#39;citation(&quot;Biobase&quot;)&#39;, and for packages &#39;citation(&quot;pkgname&quot;)&#39;. ## ## Attaching package: &#39;Biobase&#39; ## The following object is masked from &#39;package:MatrixGenerics&#39;: ## ## rowMedians ## The following objects are masked from &#39;package:matrixStats&#39;: ## ## anyMissing, rowMedians ## Loading required package: SingleCellExperiment ## Loading required package: TreeSummarizedExperiment ## Loading required package: MicrobiomeExperiment ## Loading required package: Biostrings ## Loading required package: XVector ## ## Attaching package: &#39;Biostrings&#39; ## The following object is masked from &#39;package:base&#39;: ## ## strsplit # Example how to load data data(&quot;GlobalPatterns&quot;) GlobalPatterns ## class: TreeSummarizedExperiment ## dim: 19216 26 ## metadata(0): ## assays(1): counts ## rownames(19216): 549322 522457 ... 200359 271582 ## rowData names(7): Kingdom Phylum ... Genus Species ## colnames(26): CL3 CC1 ... Even2 Even3 ## colData names(7): X.SampleID Primer ... SampleType Description ## reducedDimNames(0): ## altExpNames(0): ## rowLinks: a LinkDataFrame (19216 rows) ## rowTree: a phylo (19216 leaves) ## colLinks: NULL ## colTree: NULL 1.3 Tools mia : Microbiome analysis tools miaViz : Visualization support for mia See also: TreeSummarizedExperiment MicrobiomeExperiment SummarizedExperiment microbiome "],["Data-operations.html", "Chapter 2 Data operations 2.1 Common terminologies 2.2 Retrieving data elements 2.3 Extract specific elements 2.4 Library size 2.5 Agglomerate 2.6 Get unique 2.7 Pick specific 2.8 Join 2.9 Get top taxa and taxonomy", " Chapter 2 Data operations The SummarizedExperiment (SE) is a widely used class for analyzing data obtained by common sequencing techniques. SE is common structure for several Bioconductor packages that are used for analyzing RNAseq, ChIp-Seq data. SE class is also used in R packages for analyzing microarrays, flow cytometry, proteomics, single-cell sequencing data and many more. The single-cell analysis is facilitated by SingelCellExperiment class (SCE), which allows the user to store results of dimensionality reduction and alternative experiments. Alternative experiments (altExps) can be differently processed data within the analysis workflows. Recently, TreeSummarizedExperiment (TSE), MicrobiomeExperiment were developed to extend the SE and SCE class for incorporating hierarchical information (including phylogenetic tree) and reference sequences. The mia package implements tools using these classes for analysis of microbiome sequencing data. 2.1 Common terminologies assays : This slot is similar to otu_table in phyloseq. In a SummarizedExperiment object multiple assays, raw counts, transformed counts can be stored. See also MultiAssayExperiment for storing data from multiple experiments such as RNASeq, Proteomics, etc. rowData : This slot is similar to tax_table in phyloseq to store taxonomic information. colData : This slot is similar to sample_data in phyloseq to store information related to samples. rowTree : This slot is similar to phy_tree in phyloseq to store phylogenetic tree. In this book, you will come across terms like FeatureIDs and SampleIDs. FeatureIDs : These are basically OTU/ASV ids which are row names in assays and rowData. SampleIDs : As the name suggests, these are sample ids which are column names in assays and row names in colData. 2.2 Retrieving data elements Extract specific elements from TreeSummarizedExperiment and MicrobiomeExperiment object. library(mia) library(dplyr) library(ggplot2) library(tibble) Example data data(&quot;GlobalPatterns&quot;) me &lt;- GlobalPatterns Create a relative abundance assay me &lt;- relAbundanceCounts(GlobalPatterns) me ## class: TreeSummarizedExperiment ## dim: 19216 26 ## metadata(0): ## assays(2): counts relabundance ## rownames(19216): 549322 522457 ... 200359 271582 ## rowData names(7): Kingdom Phylum ... Genus Species ## colnames(26): CL3 CC1 ... Even2 Even3 ## colData names(7): X.SampleID Primer ... SampleType Description ## reducedDimNames(0): ## altExpNames(0): ## rowLinks: a LinkDataFrame (19216 rows) ## rowTree: a phylo (19216 leaves) ## colLinks: NULL ## colTree: NULL Above there are now two assays 1] counts 2] relabundance 2.3 Extract specific elements 2.3.1 Assays Assay slots hold the counts and transformed data for FeatureIDs and these can be extracted as follows: Extract count abundance data. me_counts &lt;- assay(me, &quot;counts&quot;) me_counts[1:5,1:7] ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr M11Plmr ## 549322 0 0 0 0 0 0 0 ## 522457 0 0 0 0 0 0 0 ## 951 0 0 0 0 0 0 1 ## 244423 0 0 0 0 0 0 0 ## 586076 0 0 0 0 0 0 0 Extract relative abundance data. me_reab &lt;- assay(me, &quot;relabundance&quot;) me_reab[1:5,1:7] ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr M11Plmr ## 549322 0 0 0 0 0 0 0.00000e+00 ## 522457 0 0 0 0 0 0 0.00000e+00 ## 951 0 0 0 0 0 0 2.30471e-06 ## 244423 0 0 0 0 0 0 0.00000e+00 ## 586076 0 0 0 0 0 0 0.00000e+00 2.3.2 colData The sample information can be retrieved by accessing the colData as a data.frame. me_sample_data &lt;- colData(me) %&gt;% as.data.frame() # show select row and columns me_sample_data[1:5,1:5] ## X.SampleID Primer Final_Barcode Barcode_truncated_plus_T ## CL3 CL3 ILBC_01 AACGCA TGCGTT ## CC1 CC1 ILBC_02 AACTCG CGAGTT ## SV1 SV1 ILBC_03 AACTGT ACAGTT ## M31Fcsw M31Fcsw ILBC_04 AAGAGA TCTCTT ## M11Fcsw M11Fcsw ILBC_05 AAGCTG CAGCTT ## Barcode_full_length ## CL3 CTAGCGTGCGT ## CC1 CATCGACGAGT ## SV1 GTACGCACAGT ## M31Fcsw TCGACATCTCT ## M11Fcsw CGACTGCAGCT 2.3.3 rowData The taxonomic classification of FeatureIds can be retrieved by accessing the rowData as a data.frame. me_row_data &lt;- rowData(me) %&gt;% as.data.frame() # show select row and columns me_row_data[1:5,1:5] ## Kingdom Phylum Class Order Family ## 549322 Archaea Crenarchaeota Thermoprotei &lt;NA&gt; &lt;NA&gt; ## 522457 Archaea Crenarchaeota Thermoprotei &lt;NA&gt; &lt;NA&gt; ## 951 Archaea Crenarchaeota Thermoprotei Sulfolobales Sulfolobaceae ## 244423 Archaea Crenarchaeota Sd-NA &lt;NA&gt; &lt;NA&gt; ## 586076 Archaea Crenarchaeota Sd-NA &lt;NA&gt; &lt;NA&gt; 2.3.4 rowTree The phylogenetic tree for FeatureIds can be retrieved by accessing the rowTree which is a phylo object. me_row_tree &lt;- rowTree(me) me_row_tree ## ## Phylogenetic tree with 19216 tips and 19215 internal nodes. ## ## Tip labels: ## 549322, 522457, 951, 244423, 586076, 246140, ... ## Node labels: ## , 0.858.4, 1.000.154, 0.764.3, 0.995.2, 1.000.2, ... ## ## Rooted; includes branch lengths. Check link between rownames FeatureIds. # extract the linkData # on rows rowL &lt;- rowLinks(x = me) 2.4 Library size The total counts/sample can be calculated using the colSums. reads_sample &lt;- colSums(assay(me, &quot;counts&quot;)) # add it to colData colData(me)$reads_sample &lt;- reads_sample Visualize library size me_sample_data &lt;- colData(me) %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;SampleId&quot;) ggplot(me_sample_data, aes(reads_sample, SampleId)) + geom_col(aes(fill=SampleType)) + theme_bw() + # prettify plot theme(axis.text = element_text(size = 10), axis.line.x = element_line(color = &quot;#242424&quot;), axis.line.y = element_line(color = &quot;#242424&quot;), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_rect(colour = &quot;#242424&quot;), legend.key = element_blank(), legend.text = element_text(color = &quot;#353535&quot;), legend.background = element_rect(colour = NA, fill = NA)) 2.5 Agglomerate Agglomerate at a specific taxonomic rank. If multiple assays (counts and relabundance) exists, both will be agglomerated. me_fam &lt;- agglomerateByRank(me, rank = &quot;Family&quot;, agglomerateTree = TRUE) print(me_fam) ## class: TreeSummarizedExperiment ## dim: 603 26 ## metadata(0): ## assays(2): counts relabundance ## rownames(603): Class::Thermoprotei Family:Sulfolobaceae ... ## Family:Thermodesulfobiaceae Phylum::SR1 ## rowData names(7): Kingdom Phylum ... Genus Species ## colnames(26): CL3 CC1 ... Even2 Even3 ## colData names(8): X.SampleID Primer ... Description reads_sample ## reducedDimNames(0): ## altExpNames(0): ## rowLinks: a LinkDataFrame (603 rows) ## rowTree: a phylo (603 leaves) ## colLinks: NULL ## colTree: NULL me_fam_reab &lt;- assay(me_fam, &quot;relabundance&quot;) me_fam_reab[1:5,1:7] ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr ## Class::Thermoprotei 0.0000000000 0.000000e+00 0 0 0 0 ## Family:Sulfolobaceae 0.0000000000 0.000000e+00 0 0 0 0 ## Class::Sd-NA 0.0000000000 0.000000e+00 0 0 0 0 ## Order::NRP-J 0.0001990563 2.069651e-04 0 0 0 0 ## Family:SAGMA-X 0.0000000000 6.164919e-06 0 0 0 0 ## M11Plmr ## Class::Thermoprotei 0.000000e+00 ## Family:Sulfolobaceae 2.304710e-06 ## Class::Sd-NA 0.000000e+00 ## Order::NRP-J 6.914131e-06 ## Family:SAGMA-X 0.000000e+00 me_fam_reab &lt;- assay(me_fam, &quot;counts&quot;) me_fam_reab[1:5,1:7] ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr M11Plmr ## Class::Thermoprotei 0 0 0 0 0 0 0 ## Family:Sulfolobaceae 0 0 0 0 0 0 1 ## Class::Sd-NA 0 0 0 0 0 0 0 ## Order::NRP-J 172 235 0 0 0 0 3 ## Family:SAGMA-X 0 7 0 0 0 0 0 These newly created data can also be kept in altExp a feature provided by SingleCellExperiment. altExp(me, &quot;family&quot;) &lt;- me_fam altExpNames now consists of family level data. This can be extended to use any level present in Kingdom, Phylum, Class, Order, Family, Genus, Species. 2.6 Get unique Get which Phyla are present. head(unique(rowData(me)[,&quot;Phylum&quot;])) ## [1] &quot;Crenarchaeota&quot; &quot;Euryarchaeota&quot; &quot;Actinobacteria&quot; &quot;Spirochaetes&quot; ## [5] &quot;MVP-15&quot; &quot;Proteobacteria&quot; 2.7 Pick specific Retrieving of specific elements are required for specific analysis. For instance, extracting abundances for a specific taxa in all samples or all taxa in one sample. 2.7.1 Abundances of all taxa in specific sample taxa.abund.cc1 &lt;- getAbundanceSample(me, sample_id = &quot;CC1&quot;, abund_values = &quot;counts&quot;) taxa.abund.cc1[1:10] ## 549322 522457 951 244423 586076 246140 143239 244960 255340 144887 ## 0 0 0 0 0 0 1 0 194 5 2.7.2 Abundances of specific taxa in all samples taxa.abundances &lt;- getAbundanceFeature(me, feature_id = &quot;255340&quot;, abund_values = &quot;counts&quot;) taxa.abundances[1:10] ## CL3 CC1 SV1 M31Fcsw M11Fcsw M31Plmr M11Plmr F21Plmr M31Tong M11Tong ## 153 194 0 0 0 0 0 0 0 0 2.8 Join Joining assay and rowData in one data frame for exploring featureIds and their taxonomic identities. me_reab &lt;- assay(me, &quot;relabundance&quot;) %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;FeatureID&quot;) me_joined &lt;- rowData(me) %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;FeatureID&quot;) %&gt;% left_join(me_reab) ## Joining, by = &quot;FeatureID&quot; me_joined[1:3,1:8] ## FeatureID Kingdom Phylum Class Order Family ## 1 549322 Archaea Crenarchaeota Thermoprotei &lt;NA&gt; &lt;NA&gt; ## 2 522457 Archaea Crenarchaeota Thermoprotei &lt;NA&gt; &lt;NA&gt; ## 3 951 Archaea Crenarchaeota Thermoprotei Sulfolobales Sulfolobaceae ## Genus Species ## 1 &lt;NA&gt; &lt;NA&gt; ## 2 &lt;NA&gt; &lt;NA&gt; ## 3 Sulfolobus Sulfolobusacidocaldarius 2.8.1 Convert to long data.frame For several custom analysis and visualization packages such as those from the tidyverse the SE data can be converted to long data.frame format with meltAssay. molten_se &lt;- meltAssay(me, add_row_data = TRUE, add_col_data = TRUE, abund_values = &quot;relabundance&quot;) 2.9 Get top taxa and taxonomy 2.9.1 Features The getTopTaxa can be used for identifying top taxa in the data. top_features &lt;- getTopTaxa(me, method=&quot;median&quot;, top=10) tax_data &lt;- rowData(me)[top_features,taxonomyRanks(me)] tax_data %&gt;% as.data.frame() ## Kingdom Phylum Class Order ## 549656 Bacteria Cyanobacteria Chloroplast Stramenopiles ## 331820 Bacteria Bacteroidetes Bacteroidia Bacteroidales ## 317182 Bacteria Cyanobacteria Chloroplast Stramenopiles ## 94166 Bacteria Proteobacteria Gammaproteobacteria Pasteurellales ## 279599 Bacteria Cyanobacteria Nostocophycideae Nostocales ## 158660 Bacteria Bacteroidetes Bacteroidia Bacteroidales ## 329744 Bacteria Actinobacteria Actinobacteria Actinomycetales ## 326977 Bacteria Actinobacteria Actinobacteria Bifidobacteriales ## 248140 Bacteria Bacteroidetes Bacteroidia Bacteroidales ## 550960 Bacteria Proteobacteria Gammaproteobacteria Enterobacteriales ## Family Genus Species ## 549656 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 331820 Bacteroidaceae Bacteroides &lt;NA&gt; ## 317182 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 94166 Pasteurellaceae Haemophilus Haemophilusparainfluenzae ## 279599 Nostocaceae Dolichospermum &lt;NA&gt; ## 158660 Bacteroidaceae Bacteroides &lt;NA&gt; ## 329744 ACK-M1 &lt;NA&gt; &lt;NA&gt; ## 326977 Bifidobacteriaceae Bifidobacterium Bifidobacteriumadolescentis ## 248140 Bacteroidaceae Bacteroides Bacteroidescaccae ## 550960 Enterobacteriaceae Providencia &lt;NA&gt; "],["bibliography.html", "Bibliography", " Bibliography "]]
